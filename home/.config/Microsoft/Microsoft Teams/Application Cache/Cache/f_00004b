webpackJsonp([19],{2589:function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),i(2590),i(2592),i(2595),i(2597),i(2599),i(2601)},2590:function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var s=i(2591),n=function(){function t(t,e,i,s,n,o,a,c,r,l,g){this.$scope=t,this.constants=e,this.dialogService=i,this.resources=s,this.$translate=n,this.notificationsAdapter=o,this.channelNotificationSettingsService=a,this.eventingService=c,this.analyticsService=r,this.isUpdated=!0,this.channelSettings={isIncludeReplies:!1,allNewPost:{},channelMentions:{}},this.logger=g.newLogger("Teams Channel Notification settings"),this.selectedPreset=void 0,this.enableCustomPresetBit=l.valueAsBoolean(e.settings.names.enableCustomPresetBit),this.getNotificationSettings(e.appId.teamsAndChannel),this.getSelectedPreset(),this.attachEvents()}return t.$inject=["$scope","constants","dialogService","resources","$translate","notificationsAdapter","channelNotificationSettingsService","eventingService","analyticsService","settingsService","loggingService"],t.prototype.attachEvents=function(){var t=this;this.eventingService.$on(this.$scope,this.constants.events.settings.updatePresets,function(e,i){t.selectedPreset!==i.settingsPreset&&(t.selectedPreset=i.settingsPreset,t.setSelectedPreset())}),this.eventingService.$on(this.$scope,this.constants.events.settings.settingsUpdate,function(e){t.notificationsAdapter.setSelectedOnLoadOrChange(t.settingsHeader)})},t.prototype.setSelectedPreset=function(){this.setCustomSubHeaderText(this.selectedPreset),this.notificationsAdapter.setSelectedPreset(this.selectedPreset),this.recordPresetsTelemetry()},t.prototype.recordPresetsTelemetry=function(){var t={action:{gesture:teamspace.components.PanelActionGesture.click,outcome:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.components.PanelActionOutcome.submit.toString(),teamspace.components.PanelActionOutcome,this.logger),scenario:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.components.PanelActionScenario.presetSelection.toString(),teamspace.components.PanelActionScenario,this.logger),scenarioType:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.components.PanelActionScenarioType.select.toString(),teamspace.components.PanelActionScenarioType,this.logger)},module:{name:teamspace.shared.AttributeHelper.tryGetEnum(this.getSelectedPresetModuleName(),teamspace.components.PanelModuleName,this.logger),type:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.components.PanelModuleType.notificationSettings.toString(),teamspace.components.PanelModuleType,this.logger),state:teamspace.services.SettingsPreset[this.selectedPreset],summary:"Notification settings change"},panel:{type:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.PanelType.globalSettings.toString(),teamspace.PanelType,this.logger)}};this.analyticsService.onPanelAction(this.$scope,t)},t.prototype.sendCustomTelemetry=function(){var t={action:{gesture:teamspace.components.PanelActionGesture.click,outcome:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.components.PanelActionOutcome.nav.toString(),teamspace.components.PanelActionOutcome,this.logger),scenario:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.components.PanelActionScenario.navNotifSettings.toString(),teamspace.components.PanelActionScenario,this.logger),scenarioType:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.components.PanelActionScenarioType.nav.toString(),teamspace.components.PanelActionScenarioType,this.logger)},module:{name:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.components.PanelModuleName.notifSettings.toString(),teamspace.components.PanelModuleName,this.logger),type:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.components.PanelModuleType.notificationSettings.toString(),teamspace.components.PanelModuleType,this.logger),state:"teamsNotifSettings",summary:"Notification settings change"},panel:{type:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.PanelType.globalSettings.toString(),teamspace.PanelType,this.logger)},dataBag:{value:"teamsNotifSettings"}};this.analyticsService.onPanelAction(this.$scope,t)},t.prototype.setCustomSubHeaderText=function(t){t===teamspace.services.SettingsPreset.Custom?this.subHeaderText=this.$translate.instant(this.resources.strings.notification_settings_details_teams_channel_button_custom_subtext2):this.subHeaderText=this.$translate.instant(this.resources.strings.notification_settings_details_teams_channel_button_custom_subtext1)},t.prototype.getSelectedPresetModuleName=function(){return this.selectedPreset===teamspace.services.SettingsPreset.AllActivity?teamspace.components.PanelModuleName.allActivity.toString():this.selectedPreset===teamspace.services.SettingsPreset.MyAtMentions?teamspace.components.PanelModuleName.myAtMentions.toString():this.selectedPreset===teamspace.services.SettingsPreset.Custom?teamspace.components.PanelModuleName.custom.toString():null},t.prototype.getSelectedPreset=function(){_.isNil(this.selectedPreset)?this.isAllActivityPreset()?this.selectedPreset=teamspace.services.SettingsPreset.AllActivity:this.ismyAtMentionsPreset()?this.selectedPreset=teamspace.services.SettingsPreset.MyAtMentions:this.selectedPreset=teamspace.services.SettingsPreset.Custom:this.selectedPreset=this.notificationsAdapter.getSelectedPreset(),this.setCustomSubHeaderText(this.selectedPreset)},t.prototype.isAllActivityPreset=function(){var t=this,e=!0;return this.settingsHeader.forEach(function(i){Object.entries(i.itemsList).forEach(function(i){i[0];i[1].selected!==t.$translate.instant(t.resources.strings.notification_settings_dropdown_options_banner_and_feed_text)&&(e=!1)})}),e},t.prototype.ismyAtMentionsPreset=function(){var t=this,e=!0;return this.settingsHeader.forEach(function(i){Object.entries(i.itemsList).forEach(function(i){var s=i[0],n=i[1];s===t.constants.notificationSettings.propNames.visible_ChannelNewMessage||s===t.constants.notificationSettings.propNames.visible_ChannelMention||s===t.constants.notificationSettings.propNames.visible_ChannelReplyMessage||s===t.constants.notificationSettings.propNames.inferred||s===t.constants.notificationSettings.propNames.trending?n.selected!==t.$translate.instant(t.resources.strings.notification_settings_dropdown_options_off_text)&&(e=!1):n.selected!==t.$translate.instant(t.resources.strings.notification_settings_dropdown_options_banner_and_feed_text)&&(e=!1)})}),e},t.prototype.getNotificationSettings=function(t){this.settingsHeader=this.notificationsAdapter.getSettingsFromAppId(t);var e=this.channelNotificationSettingsService.setValueInChannelDialog();this.channelSettings=e.defaults,this.selectedPreset=this.notificationsAdapter.getSelectedPreset()},t.prototype.allActivityPreset=function(){var t=this;this.selectedPreset=teamspace.services.SettingsPreset.AllActivity,this.setSelectedPreset(),this.enableCustomPresetBit||(this.settingsHeader.forEach(function(e){Object.entries(e.itemsList).forEach(function(e){e[0];e[1].selected=t.$translate.instant(t.resources.strings.notification_settings_dropdown_options_banner_and_feed_text)})}),this.notificationsAdapter.setTnCPresets(this.settingsHeader))},t.prototype.myAtMentionsPreset=function(){var t=this;this.selectedPreset=teamspace.services.SettingsPreset.MyAtMentions,this.setSelectedPreset(),this.enableCustomPresetBit||(this.settingsHeader.forEach(function(e){Object.entries(e.itemsList).forEach(function(e){var i=e[0],s=e[1];i===t.constants.notificationSettings.propNames.visible_ChannelNewMessage||i===t.constants.notificationSettings.propNames.visible_ChannelMention||i===t.constants.notificationSettings.propNames.inferred||i===t.constants.notificationSettings.propNames.trending||i===t.constants.notificationSettings.propNames.visible_ChannelReplyMessage||i===t.constants.notificationSettings.propNames.mention_Team?s.selected=t.$translate.instant(t.resources.strings.notification_settings_dropdown_options_off_text):s.selected=t.$translate.instant(t.resources.strings.notification_settings_dropdown_options_banner_and_feed_text)})}),this.notificationsAdapter.setTnCPresets(this.settingsHeader))},t.prototype.customSettings=function(){this.enableCustomPresetBit&&(this.selectedPreset=teamspace.services.SettingsPreset.Custom,this.setSelectedPreset()),this.openSettingsDialog(),this.sendCustomTelemetry()},t.prototype.openSettingsDialog=function(){this.dialogService.openLazyDialog(this.constants.lazyDialogs.teamsChannelNotificationSettings,this.constants.lazyModules.notificationSettingsDialog,{})},t}();e.TeamsChannelNotificationSettingsController=n,angular.module("teamspace.teamsChannelNotificationSettings",["teamspace.settingsService","teamspace.constants","teamspace.dialogService","pascalprecht.translate"]).directive("teamsChannelNotificationSettings",[function(){return{restrict:"E",scope:{},controller:n,controllerAs:"ctrl",template:s}}])},2591:function(t,e){t.exports='<div class="teams-channel-settings">\n  <h2 class="app-font-base-bold title-with-desc">{{::$root.resources.strings.notification_settings_details_teams_channel_header_text|translate}}</h2>\n  <p class="notification-item-generic">{{::$root.resources.strings.notification_settings_details_teams_channel_subtext|translate}}</p>\n  <div class="item-container flex-container">\n    <ul class="form-field-input flex-item-container" role="tablist">\n      <li class="rectangle left-rail-item-hover" role="tab" tabindex="0" aria-label="{{::$root.resources.strings.notification_settings_details_teams_channel_button_all_activity_label|translate}}" ng-click="ctrl.allActivityPreset()" ng-class="{\'preset-active\': ctrl.selectedPreset == 1}" aria-selected="{{ctrl.selectedPreset == 1}}">\n        <div class="header">\n            {{::$root.resources.strings.notification_settings_details_teams_channel_button_all_activity|translate}}\n        </div>\n        <div class="subheader">\n            {{::$root.resources.strings.notification_settings_details_teams_channel_button_all_activity_subtext|translate}}\n        </div>\n      </li>\n\n      <li class="rectangle left-rail-item-hover" role="tab" tabindex="0" aria-label="{{::$root.resources.strings.notification_settings_details_teams_channel_button_mentions_replies_label|translate}}" ng-click="ctrl.myAtMentionsPreset()" ng-class="{\'preset-active\': ctrl.selectedPreset == 2}" aria-selected="{{ctrl.selectedPreset == 2}}">\n        <div class="header">\n            {{::$root.resources.strings.notification_settings_details_teams_channel_button_mentions_replies|translate}}\n        </div>\n        <div class="subheader">\n            {{::$root.resources.strings.notification_settings_details_teams_channel_button_mentions_replies_subtext|translate}}\n        </div>\n      </li>\n\n      <li class="rectangle left-rail-item-hover" role="tab" tabindex="0" aria-label="{{::$root.resources.strings.notification_settings_details_teams_channel_button_custom_label|translate}}" ng-click="ctrl.customSettings()" ng-class="{\'preset-active\': ctrl.selectedPreset == 3}" aria-selected="{{ctrl.selectedPreset == 3}}">\n        <div class="custom-flex-container">\n          <div class="header">\n              {{::$root.resources.strings.notification_settings_details_teams_channel_button_custom|translate}}\n          </div>\n          <div class="custom-arrow">\n              <ng-include class="icon-container" src="\'svg/icons-patharrow.html\'"></ng-include>\n          </div>\n        </div>\n\n        <div class="subheader">\n            {{ctrl.subHeaderText}}\n        </div>\n      </li>\n    </ul>\n  </div>\n</div>'},2592:function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var s=i(2593),n=i(2594);e.shownChannelInfoPaneId="shown-channel-notification-header-button",e.tnCInfoId="tnc-notification-header-button";var o="components/teams-channel-notification-setings-dialog/teams-channel-notification-setings-dialog.html",a="components/teams-channel-notification-setings-dialog/shown-channels-tooltip.html",c=function(){function t(t,i,s,n,o,a,c,r,l,g,p,d,h,u){var f=this;this.$scope=t,this.$translate=i,this.resources=s,this.constants=n,this.dialogService=o,this.notificationsAdapter=a,this.channelNotificationSettingsService=c,this.tooltipCssApplicators=r,this.utilityService=l,this.tooltipService=g,this.eventingService=p,this.uisSettingsService=d,this.analyticsService=h,this.platformDetectService=u,this.wait=!0,this.shownChannelInfoPaneId=e.shownChannelInfoPaneId,this.tnCInfoId=e.tnCInfoId,this.visibleChannelNewMessageSelectedOption=teamspace.services.NotificationDefaultOptions.Off,this.closeSettingsDialogue=function(){f.closeThisDialog(),f.dialogService.close(f.constants.dialogs.optionsSettingsDialog)},this.hideTooltip=function(){void 0!==f.tooltipId&&(f.tooltipService.clearTooltip(teamspace.services.TooltipType.Dropdown,f.tooltipId),f.tooltipId=void 0)},this.headerButtons=[{text:i.instant(s.strings.settings_back_to_settings_label),func:function(){f.closeThisDialog()},icon:"svg/icons-chevron-left-small.html"}],this.getNotificationSettings(n.appId.teamsAndChannel),this.wait=!1,this.attachEvents(),_.delay(function(){f.focusFirstDropdown()},500)}return t.$inject=["$scope","$translate","resources","constants","dialogService","notificationsAdapter","channelNotificationSettingsService","tooltipCssApplicators","utilityService","tooltipService","eventingService","uisSettingsService","analyticsService","platformDetectService"],t.prototype.attachEvents=function(){var t=this;this.eventingService.$on(this.$scope,this.constants.events.settings.settingsUpdate,function(e){t.notificationsAdapter.setSelectedOnLoadOrChange(t.settingsHeader);var i=t.channelNotificationSettingsService.setValueInChannelDialog();t.channelSettings=i.defaults})},t.prototype.resetToDefaultTeamAndChannelSettings=function(){this.notificationsAdapter.resetTeamAndChannelNotificationSettings(),this.getNotificationSettings(this.constants.appId.teamsAndChannel)},t.prototype.onSettingsUpdate=function(t,e,i){this.notificationsAdapter.onNotificationSettingsChange(this.settingsHeader,t,e,i),this.eventingService.$emit(this.constants.events.settings.updatePresets,{settingsPreset:teamspace.services.SettingsPreset.Custom})},t.prototype.getNotificationSettings=function(t){this.settingsHeader=this.notificationsAdapter.getSettingsFromAppId(t);var e=this.channelNotificationSettingsService.setValueInChannelDialog();this.channelSettings=e.defaults,this.visibleChannelNewMessageSelectedOption=e.visibleChannelNewMessageSelectedOption},t.prototype.isResetValid=function(){return this.notificationsAdapter.isValidResetForTeamsAndChannelSettings()},t.prototype.closeThisDialog=function(){this.$scope.closeThisDialog()},t.prototype.close=function(){this.$scope.closeThisDialog()},t.prototype.recordHoverITelemetry=function(t){var e={panel:{type:teamspace.PanelType[teamspace.PanelType.globalSettings].toString(),uri:void 0,uriParams:void 0,viewId:this.utilityService.generateUUID(),region:teamspace.PanelRegion[teamspace.PanelRegion.modal],previousUri:void 0,previousUriParams:void 0,launchMethod:teamspace.components.LaunchMethod[teamspace.components.LaunchMethod.nav]},dataBag:{module:t}};this.analyticsService.sendPanelView(e)},t.prototype.showTooltip=function(t,e){switch(e){case"shownChannels":this.showInfoTooltip(t,this.$translate.instant(this.resources.strings.notification_settings_details_teams_channel_shown_channels_popover_text),this.shownChannelInfoPaneId);break;case"tnC":var i=void 0;i=this.platformDetectService.getOS()===this.constants.os.mac?this.resources.strings.notification_settings_details_teams_channel_all_teams_mac_popover_text:(this.platformDetectService.getOS(),this.constants.os.windows,this.resources.strings.notification_settings_details_teams_channel_all_teams_popover_text),this.showInfoTooltip(t,this.$translate.instant(i),this.tnCInfoId)}this.recordHoverITelemetry(e)},t.prototype.showInfoTooltip=function(t,e,i){var s=this;if(!_.isNil(t)){this.hideTooltip(),this.tooltipId=i;var n=this.$scope.$new();n.tooltipText=e;var o={templateUrl:a,trigger:"manual",container:"body",scope:n},c={sourceElement:$(t.currentTarget),tooltipType:teamspace.services.TooltipType.Dropdown,options:o,tooltipId:this.tooltipId,cssApplicator:function(){s.tooltipCssApplicators.tooltip(t,".teams-channel-notifications-tooltip","#"+i,0,100)}};t.stopPropagation(),this.tooltipService.showTooltip(c)}},t.prototype.newPostsTweak=function(t,e){this.visibleChannelNewMessageSelectedOption=teamspace.services.NotificationDefaultOptions[t.key],this.channelSettings.isIncludeReplies&&(this.onSettingsUpdate(this.constants.visibleChannelFollowReplyPropertyName,t,e),t.key===this.$translate.instant(this.resources.strings.notification_settings_dropdown_options_off_key)&&(this.channelSettings.isIncludeReplies=!1)),this.onSettingsUpdate(this.constants.visibleChannelFollowNewMessagePropertyName,t,e)},t.prototype.toggleCheckbox=function(t){if("Off"!=this.uisSettingsService.resolveSettings(this.channelSettings.allNewPost.selected)){var e=this.constants.visibleChannelFollowReplyPropertyName,i={},s={};this.channelSettings.isIncludeReplies?(i.key=teamspace.services.NotificationDefaultOptions[this.visibleChannelNewMessageSelectedOption],s.key=teamspace.services.NotificationDefaultOptions[teamspace.services.NotificationDefaultOptions.Off]):(i.key=teamspace.services.NotificationDefaultOptions[teamspace.services.NotificationDefaultOptions.Off],s.key=teamspace.services.NotificationDefaultOptions[this.visibleChannelNewMessageSelectedOption]),this.onSettingsUpdate(e,i,s)}t.stopPropagation()},t.prototype.channelMentionsTweak=function(t,e){this.onSettingsUpdate(this.constants.visibleChannelMentionPropertyName,t,e)},t.prototype.focusFirstDropdown=function(){if(!_.isNil(angular.element("div.ts-dropdown-focus"))){var t=angular.element("div.ts-dropdown-focus")[0].children[0];t&&t.focus()}},t}();e.TeamsChannelNotificationSettingsDialogController=c,angular.module("teamspace.teamsChannelNotificationSettingsDialog",["teamspace.constants","teamspace.dialogService","teamspace.uisSettingsService","teamspace.settingsService","teamspace.channelNotificationSettingsService","teamspace.notificationsAdapter"]).controller("TeamsChannelNotificationSettingsDialogController",c).run(["constants","dialogService",function(t,e){e.register(t.lazyDialogs.teamsChannelNotificationSettings,{template:o,className:"ts-modal-dialog chat-notification-settings-dialog visible-channel-notification-settings-dialog",closeByEscape:!0,closeByDocument:!0,controller:"TeamsChannelNotificationSettingsDialogController",controllerAs:"ctrl",ariaAuto:!1,ariaRole:"dialog"})}]).run(["$templateCache",function(t){t.put(o,s),t.put(a,n)}])},2593:function(t,e){t.exports='<div class="channel-notification-settings" acc-role="dialog">\n  <modal-dialog footer-buttons="ctrl.footerButtons" dialog-title="{{::($root.resources.strings.notification_settings_dialog_for_custom_preset|translate)}}" suppress-default-button="true" dialog-busy="ctrl.dialogBusy" track-panel-type="{{$root.trackConstants.panelType.channelSettingsModal}}" role="dialog" right-align-buttons="true" skip-auto-focus="true" add-close-icon="true" aria-label="{{::$root.resources.strings.notification_settings_dialog_for_custom_preset|translate}}" close-function="ctrl.closeSettingsDialogue" header-buttons="ctrl.headerButtons">\n    <section class="channel-notification-settings-spinner" ng-if="ctrl.wait">\n      <busy-animation size="large"></busy-animation>\n    </section>\n    <section ng-if="!ctrl.wait" class="setting-container notification-settings content-block setting-section" simple-scrollbar>\n      <div class="alert alert-danger" ng-if="ctrl.error" translate-once="{{::$root.resources.strings.notification_settings_generalError}}"></div>\n      <div ng-if="ctrl.settingsHeader && !ctrl.error" class="setting-container">\n        <div class="content-block">\n          <ul>\n            <div class="flex-container">\n              <div class="app-font-base-bold flex-item-container">{{::ctrl.settingsHeader[0].header}}</div>\n              <button class="ts-sym has-icon btn btn-default app-icons-fill-hover flex-item-container info-button" id="{{::ctrl.tnCInfoId}}" ng-mouseenter="ctrl.showTooltip($event, \'tnC\')" ng-mouseleave="ctrl.hideTooltip()" aria-label="{{::ctrl.settingsHeader[0].header}}" role="text">\n                <ng-include class="icon" src="\'svg/icons-info.html\'">\n                </ng-include>\n              </button>\n            </div>\n            <li ng-repeat="(propName, items) in ctrl.settingsHeader[0].itemsList">\n              <div class="item-container item-content" ng-if="items.show">\n                <div class="notification-item-title-width">\n                  <label id="{{::propName}}-label" aria-hidden="true">{{::items.name}}</label>\n                </div>\n                \x3c!--Dropdown for each notification Type--\x3e\n                <dropdown-select class="form-field-input ts-dropdown-focus" ng-if="!(propName == \'alertSound\' && ctrl.enableSettingsRevamp)" ds-options="::items.options" ds-selected-value="items.selected" ds-text-field="value" ds-value-field="value" ds-labelledby-id="{{::propName}}-label" ds-on-change="ctrl.onSettingsUpdate(propName, newOption, oldOption)" ds-highlight-selected-option="true" ds-enable-title="true" ds-enable-truncation="true" ds-parent-container-selector=".chat-notification-settings-dialog" ds-max-viewable-items="6">\n                </dropdown-select>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </div>\n      <hr class="teams-channel-line-seperator">\n\n      \x3c!-- SHOWN AND PINNED CHANNELS--\x3e\n      <div class="channel-notification-settings-dialog">\n        <div class="flex-container">\n          <div class="app-font-base-bold flex-item-container">{{::ctrl.settingsHeader[1].header}}</div>\n          <button class="ts-sym has-icon btn btn-default app-icons-fill-hover flex-item-container info-button" id="{{::ctrl.shownChannelInfoPaneId}}" ng-mouseenter="ctrl.showTooltip($event,\'shownChannels\')" ng-mouseleave="ctrl.hideTooltip()" aria-label="{{::ctrl.settingsHeader[1].header}}" role="text">\n            <ng-include class="icon" src="\'svg/icons-info.html\'">\n            </ng-include>\n          </button>\n        </div>\n        <div class="item-container item-container-padding">\n          <div>\n            <div aria-hidden="true" class="channel-settings-all-new-post-text">\n              <div id="new-post-title">{{::($root.resources.strings.channel_notification_settings_new_posts|translate)}}</div>\n            </div>\n            <div class="channel-settings-subheader">\n              <div id="new-post-subheader-title">{{::($root.resources.strings.channel_notification_settings_new_posts_text|translate)}}</div>\n            </div>\n          </div>\n            \x3c!--Dropdown for each notification Type--\x3e\n          <dropdown-select class="form-field-input content-block" ds-options="::ctrl.channelSettings.allNewPost.options" ds-selected-value="ctrl.channelSettings.allNewPost.selected" ds-text-field="value" ds-value-field="value" ds-labelledby-id="new-post-title new-post-subheader-title" ds-highlight-selected-option="true" ds-parent-container-selector=".notification-settings .ts-modal-dialog-container" ds-max-viewable-items="6" ds-on-change="ctrl.newPostsTweak(newOption, oldOption)" id="ts-all-new-post-dd">\n          </dropdown-select>\n        </div>\n        <div class="channel-settings-checkbox">\n          <teams-checkbox ng-model="ctrl.channelSettings.isIncludeReplies" label-text="{{::$root.resources.strings.visible_channel_notification_settings_include_reply_link_text|translate}}" is-disabled="ctrl.uisSettingsService.resolveSettings(ctrl.channelSettings.allNewPost.selected) == \'Off\'" ng-click="ctrl.toggleCheckbox($event)">\n          </teams-checkbox>\n        </div>\n        <div class="item-container-channel">\n          <div>\n            <div class="channel-settings-all-new-post-text">\n              <div aria-hidden="true" id="channel-mention-title">{{::($root.resources.strings.channel_notification_settings_channel_mentions|translate)}}</div>\n            </div>\n            <div class="channel-settings-subheader">\n              <span aria-hidden="true" id="channel-mention-subheader-title">{{::($root.resources.strings.channel_notification_settings_channel_mentions_text|translate)}}</span>\n            </div>\n          </div>\n          \x3c!--Dropdown for each notification Type--\x3e\n          <dropdown-select class="form-field-input" ds-options="::ctrl.channelSettings.channelMentions.options" ds-selected-value="ctrl.channelSettings.channelMentions.selected" ds-text-field="value" ds-value-field="value" ds-labelledby-id="channel-mention-title channel-mention-subheader-title" ds-highlight-selected-option="true" ds-parent-container-selector=".notification-settings .ts-modal-dialog-container" ds-max-viewable-items="6" ds-on-change="ctrl.channelMentionsTweak(newOption, oldOption)">\n          </dropdown-select>\n        </div>\n      </div>\n      <hr class="teams-channel-line-seperator">\n      <div class="buttons-container reset-btn-margin-btm">\n        <button id="ts-cns-reset-default-button" class="btn-link" ng-click="ctrl.resetToDefaultTeamAndChannelSettings()" ng-disabled="ctrl.isResetValid()" aria-hidden="false" ng-bind="::($root.resources.strings.channel_notification_settings_reset_link_text|translate)">\n        </button>\n      </div>\n    </section>\n  </modal-dialog>\n</div>'},2594:function(t,e){t.exports='<div class="teams-channel-notifications-tooltip custom-tooltip">\n    <div class="arrow-up"></div>\n    <div class="message-header-channel-notification-tooltip-content">\n      {{tooltipText}}\n    </div>\n  </div>'},2595:function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var s=i(2596),n=function(){function t(t,e,i,s,n,o){this.$scope=t,this.constants=e,this.dialogService=i,this.analyticsService=s,this.taggedContactsService=n,this.isUpdated=!0,this.logger=o.newLogger("generic notification settings")}return t.$inject=["$scope","constants","dialogService","analyticsService","taggedContactsService","loggingService"],t.prototype.openDialog=function(){"groupCallSettings"===this.settingsViewModel.appId?this.dialogService.openLazyDialog(this.constants.lazyDialogs.forwardedCallNotificationSettings,this.constants.lazyModules.notificationSettingsDialog):"followStatus"===this.settingsViewModel.appId?(this.logger.log("Manage followed presence button clicked"),this.taggedContactsService.rescheduleAndCallGetTaggedContactsFromMT(),this.dialogService.open(this.constants.dialogs.followPresenceSettings)):this.dialogService.openLazyDialog(this.constants.lazyDialogs.genericNotificationSettings,this.constants.lazyModules.notificationSettingsDialog,{settingsViewModel:this.settingsViewModel}),this.settingsViewModel.isGraphApp?this.recordOpenSettingsTelemetry("navGraphNotifSettings","graphNotifSettings","graphNotifSettings","nav"+this.settingsViewModel.appId+"NotifSettings"):this.recordOpenSettingsTelemetry("navNotifSettings","notifSettings","notifSettings","nav"+this.settingsViewModel.appId+"NotifSettings")},t.prototype.recordOpenSettingsTelemetry=function(t,e,i,s){var n={action:{gesture:teamspace.components.PanelActionGesture.click,outcome:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.components.PanelActionOutcome.nav.toString(),teamspace.components.PanelActionOutcome,this.logger),scenario:teamspace.shared.AttributeHelper.tryGetEnum(t,teamspace.components.PanelActionScenario,this.logger),scenarioType:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.components.PanelActionScenarioType.nav.toString(),teamspace.components.PanelActionScenarioType,this.logger)},module:{name:teamspace.shared.AttributeHelper.tryGetEnum(e,teamspace.components.PanelModuleName,this.logger),type:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.components.PanelModuleType.notificationSettings.toString(),teamspace.components.PanelModuleType,this.logger),state:i,summary:"Notification settings change"},panel:{type:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.PanelType.globalSettings.toString(),teamspace.PanelType,this.logger)},dataBag:{value:s}};this.analyticsService.onPanelAction(this.$scope,n)},t}();e.GenericNotificationSettingsController=n,angular.module("teamspace.genericNotificationSettings",["teamspace.settingsService","teamspace.constants","teamspace.dialogService","pascalprecht.translate","teamspace.taggedContactsService"]).directive("genericNotificationSettings",[function(){return{restrict:"E",scope:{},bindToController:{settingsViewModel:"="},controller:n,controllerAs:"ctrl",template:s}}])},2596:function(t,e){t.exports='<div class="generic-notification-settings" ng-if="!ctrl.settingsViewModel.isHidden">\n  <h2 class="app-font-base-bold notification-title-with-desc">{{::ctrl.settingsViewModel.header}}</h2>\n  <div class="item-container">\n    <div class="notification-item-generic" ng-bind="ctrl.settingsViewModel.subheader"></div>\n    <div class="form-field-input generic-edit-button">\n      <button class="ts-btn ts-btn-fluent ts-btn-fluent-secondary" acc-role="button-item" translate-once="{{::$root.resources.strings.notification_settings_details_chat_edit_button_text}}" ng-click="ctrl.openDialog()" track-summary="Chat Notification Settings Edit Button" aria-label="{{::ctrl.settingsViewModel.ariaLabel}}">\n      </button>\n    </div>\n  </div>\n  <hr class="notifications-line-seperator generic-line-margins">\n</div>'},2597:function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var s=i(2598),n=function(){function t(t,e,i,s,n,o,a,c){var r=this;this.$scope=t,this.constants=i,this.dialogService=o,this.notificationsAdapter=a,this.eventingService=c,this.wait=!0,this.closeSettingsDialogue=function(){r.closeThisDialog(),r.dialogService.close(r.constants.dialogs.optionsSettingsDialog)},this.logger=s.newLogger("GenericNotificationSettingsDialogController"),this.settingsViewModel=t.ngDialogData.settingsViewModel,this.headerButtons=[{text:e.instant(n.strings.settings_back_to_settings_label),func:function(){r.closeThisDialog()},icon:"svg/icons-chevron-left-small.html"}],this.getNotificationSettings(this.settingsViewModel.appId),this.wait=!1,this.attachEvents(),_.delay(function(){r.focusFirstDropdown()},500)}return t.$inject=["$scope","$translate","constants","loggingService","resources","dialogService","notificationsAdapter","eventingService"],t.prototype.attachEvents=function(){var t=this;this.settingsHeader&&this.settingsHeader[0].isUserGraphSettings?this.eventingService.$on(this.$scope,this.constants.events.settings.graphSettingsUpdate,function(e){t.notificationsAdapter.setSelectedOnLoadOrChange(t.settingsHeader)}):this.eventingService.$on(this.$scope,this.constants.events.settings.settingsUpdate,function(e){t.notificationsAdapter.setSelectedOnLoadOrChange(t.settingsHeader)})},t.prototype.getNotificationSettings=function(t){this.logger.info("get notification settings for app ID "+this.settingsViewModel.appId),this.settingsHeader=this.notificationsAdapter.getSettingsFromAppId(this.settingsViewModel.appId)},t.prototype.onNotificationSettingsChange=function(t,e,i){this.notificationsAdapter.onNotificationSettingsChange(this.settingsHeader,t,e,i)},t.prototype.closeThisDialog=function(){this.$scope.closeThisDialog()},t.prototype.close=function(){this.$scope.closeThisDialog()},t.prototype.focusFirstDropdown=function(){if(!_.isNil(angular.element("div.ts-dropdown-focus"))){var t=angular.element("div.ts-dropdown-focus")[0].children[0];t&&t.focus()}},t}();e.GenericNotificationSettingsDialogController=n;var o="components/generic-notification-settings-dialog/generic-notification-settings-dialog.html";angular.module("teamspace.genericNotificationSettingsDialog",["teamspace.constants","teamspace.loggingService","teamspace.dialogService","teamspace.channelEmailService","teamspace.utilityService","teamspace.channelService","teamspace.exceptionUtilityService","teamspace.uisSettingsService","teamspace.settingsService","teamspace.notificationsAuxiliaryService","teamspace.channelNotificationSettingsService","teamspace.notificationsAdapter"]).controller("GenericNotificationSettingsDialogController",n).run(["constants","dialogService",function(t,e){e.register(t.lazyDialogs.genericNotificationSettings,{template:o,className:"ts-modal-dialog chat-notification-settings-dialog visible-channel-notification-settings-dialog",closeByEscape:!0,closeByDocument:!0,controller:"GenericNotificationSettingsDialogController",controllerAs:"cns",ariaAuto:!1,ariaRole:"dialog"})}]).run(["$templateCache",function(t){t.put(o,s)}])},2598:function(t,e){t.exports='<div class="channel-notification-settings" acc-role="dialog">\n    <modal-dialog footer-buttons="cns.footerButtons" dialog-title="{{::cns.settingsViewModel.header}}" suppress-default-button="true" dialog-busy="cns.dialogBusy" track-panel-type="{{$root.trackConstants.panelType.channelSettingsModal}}" role="dialog" right-align-buttons="true" add-close-icon="true" aria-label="{{::cns.settingsViewModel.header}}" close-function="cns.closeSettingsDialogue" header-buttons="cns.headerButtons">\n      <section class="channel-notification-settings-spinner" ng-if="cns.wait">\n        <busy-animation size="large"></busy-animation>\n      </section>\n      <section ng-if="!cns.wait" class="setting-container notification-settings content-block setting-section" simple-scrollbar>\n        <div class="alert alert-danger" ng-if="cns.error" translate-once="{{::$root.resources.strings.notification_settings_generalError}}"></div>\n        <div ng-if="cns.settingsHeader && !cns.error" class="setting-container">\n          <div class="content-block">\n            <ul ng-repeat="values in ::cns.settingsHeader" ng-hide="values.hide">\n              <li ng-repeat="(propName, items) in ::values.itemsList">\n                <div class="item-container item-content" ng-if="items.show">\n                  <div class="notification-item-title-width">\n                    <label id="{{::propName}}-label" aria-hidden="true">{{::items.name}}</label>\n                  </div>\n                  \x3c!--Dropdown for each notification Type--\x3e\n                  <dropdown-select class="form-field-input ts-dropdown-focus" ng-if="!(propName == \'alertSound\' && cns.enableSettingsRevamp)" ds-options="::items.options" ds-selected-value="items.selected" ds-text-field="value" ds-value-field="value" ds-labelledby-id="{{::propName}}-label" ds-on-change="cns.onNotificationSettingsChange(propName, newOption, oldOption)" ds-highlight-selected-option="true" ds-enable-title="true" ds-enable-truncation="true" ds-parent-container-selector=".generic-notification-settings-dialog" ds-max-viewable-items="6" ds-fixed-position="true">\n                  </dropdown-select>\n                </div>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </section>\n    </modal-dialog>\n  </div>'},2599:function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var s=i(2600),n=function(){function t(t,e,i,s,n,o,a,c,r,l,g,p,d,h,u,f,m,v,S){this.$scope=t,this.analyticsService=e,this.eventingService=i,this.resources=s,this.constants=n,this.$translate=o,this.loggingService=a,this.identityService=r,this.settingsService=l,this.$injector=g,this.appsService=p,this.notificationsStore=d,this.platformDetectService=u,this.desktopUtilityService=f,this.delayedEntitlementsProcessor=m,this.myUserPreferencesStore=v,this.utilityService=S,this.panelActionScenarioMap={},this.isInteropDropdownDisabled=!1,this.isInteropOptionShown=!0,this.enableSettingsRevamp=!1,this.enableNotificationSettingsRevamp=!1,this.enableSyntheticNotificationSettings=!1,this.disableTeamsAndChannels=!1,this.isMacNativeNotificationSupported=!1,this.disableNotificationHelpPageInTFL=!1,this.removeSettingUpdateListener=null,this.logger=a.newLogger("NotificationSettingsDialog"),this.translate=_.memoize(o.instant),this.enableNotificationSettingsRevamp=l.valueAsBoolean(n.settings.names.notificationsSettingsRevamp),this.disableTeamsAndChannels=l.valueAsBoolean(n.settings.names.isTeamsAndChannelsDisabled),this.disableNotificationHelpPageInTFL=l.valueAsBoolean(n.settings.names.disableNotificationHelpPageInTFL),this.enableSyntheticNotificationSettings=l.valueAsBoolean(n.settings.names.enableSyntheticNotificationSettings),this.safeIpc=h.electronSafeIpc,this.isMacNativeNotificationSupported=this.checkMacNotificationSupport(),this.initializeService(),this.eventHandlerForShowPreviewIpc=this.eventHandlerForShowPreviewIpc.bind(this),this.toastStyleChoiceEnabledResponseHandler=this.toastStyleChoiceEnabledResponseHandler.bind(this),t.$on("$destroy",this.removeEventListners.bind(this))}return t.$inject=["$scope","analyticsService","eventingService","resources","constants","$translate","loggingService","notificationsAuxiliaryService","identityService","settingsService","$injector","appsService","notificationsStore","$window","platformDetectService","desktopUtilityService","delayedEntitlementsProcessor","myUserPreferencesStore","utilityService"],t.prototype.removeEventListners=function(){this.safeIpc&&(this.settingsService.valueAsBoolean(this.constants.settings.names.enableShowPreviewInToasts)&&this.safeIpc.removeListener(this.constants.events.desktopApp.showPreviewInToastsEnabledResponse,this.eventHandlerForShowPreviewIpc),this.desktopUtilityService.isDesktop()&&(this.platformDetectService.getOS()===this.constants.os.windows&&"10"===this.platformDetectService.getOSVersion()||this.isMacNativeNotificationSupported)&&this.safeIpc.removeListener(this.constants.events.desktopApp.toastStyleChoiceEnabledResponse,this.toastStyleChoiceEnabledResponseHandler)),this.removeSettingUpdateListener&&(this.removeSettingUpdateListener(),this.removeSettingUpdateListener=null)},t.prototype.checkMacNotificationSupport=function(){return this.desktopUtilityService.isDesktop()&&this.platformDetectService.getOS()===this.constants.os.mac},t.prototype.initializeService=function(){var t=this;this.notificationsAdapter=this.$injector.get("notificationsAdapter"),this.notificationsAdapter.isMacNativeNotificationSupported=this.isMacNativeNotificationSupported,this.notificationsAdapter.notificationAdapterInitializedPromise.promise.then(function(){t.initNotificationSettingViewModel(),t.setAppsInfo(),t.attachEvents(),t.setOtherNotificationInfo(),t.windowsToggleScenario=t.loggingService.newScenario(t.constants.scenarios.toast.styleSettingRequest),t.desktopUtilityService.isDesktop()&&(t.platformDetectService.getOS()===t.constants.os.windows&&"10"===t.platformDetectService.getOSVersion()||t.isMacNativeNotificationSupported)&&t.safeIpc&&t.safeIpc.send(t.constants.events.desktopApp.toastStyleChoiceEnabledRequest),t.desktopUtilityService.isDesktop()&&t.settingsService.valueAsBoolean(t.constants.settings.names.enableShowPreviewInToasts)&&t.safeIpc&&t.safeIpc.send(t.constants.events.desktopApp.showPreviewInToastsEnabledRequest)})},t.prototype.attachEvents=function(){var t=this;this.removeSettingUpdateListener=this.eventingService.$on(this.$scope,this.constants.events.settings.settingsUpdate,function(e){t.notificationsAdapter.setSelectedOnLoadOrChange(t.settingsHeader)}),this.desktopUtilityService.isDesktop()&&(this.platformDetectService.getOS()===this.constants.os.windows&&"10"===this.platformDetectService.getOSVersion()||this.isMacNativeNotificationSupported)&&this.safeIpc&&this.safeIpc.on(this.constants.events.desktopApp.toastStyleChoiceEnabledResponse,this.toastStyleChoiceEnabledResponseHandler),this.desktopUtilityService.isWeb()?(this.showTextPreviewSetting=this.settingsService.valueAsBoolean(this.constants.settings.names.enableShowPreviewInToasts),this.enablePreviewInToasts(this.showTextPreviewSetting,this.constants.scenarios.toast.markers.webPreviewSetting)):this.desktopUtilityService.isDesktop()&&this.settingsService.valueAsBoolean(this.constants.settings.names.enableShowPreviewInToasts)&&this.safeIpc?this.safeIpc.on(this.constants.events.desktopApp.showPreviewInToastsEnabledResponse,this.eventHandlerForShowPreviewIpc):(this.showTextPreviewSetting=!1,this.enablePreviewInToasts(this.showTextPreviewSetting,this.constants.scenarios.toast.markers.noPreviewSetting))},t.prototype.toastStyleChoiceEnabledResponseHandler=function(t,e){var i=this,s=-1;_.isNil(this.settingsHeader)||(s=this.settingsHeader.findIndex(function(t){return!_.isNil(t.itemsList)&&!_.isNil(t.itemsList[i.constants.notificationSettings.propNames.notificationToggle])})),-1!=s&&(this.settingsHeader[s].itemsList[this.constants.notificationSettings.propNames.notificationToggle].show=e,this.settingsService.valueAsBoolean(this.constants.settings.names.enforceAngularDigestCycleSGNS)&&(this.logger.log("enforcing digest cycle for ToastStyleSelector"),this.utilityService.digest(this.$scope)),!0===e&&(this.settingsHeader[s].subheader=this.translate(this.resources.strings.notification_settings_details_sound_subheader_v2_text),this.settingsHeader[s].subText=this.translate(this.resources.strings.notification_settings_details_sound_subText_text))),this.logger.info("Notification style choice enablement status is: "+e),this.windowsToggleScenario&&this.windowsToggleScenario.stop(),this.windowsToggleScenario=void 0},t.prototype.eventHandlerForShowPreviewIpc=function(t,e){this.showTextPreviewSetting=e,this.enablePreviewInToasts(this.showTextPreviewSetting,this.constants.scenarios.toast.markers.desktopPreviewSetting,!0)},t.prototype.enablePreviewInToasts=function(t,e,i){var s=this;void 0===i&&(i=!1),this.previewInToastsScenario=this.loggingService.newScenario(this.constants.scenarios.toast.showPreviewInToastsSettingRequest);var n=-1;_.isNil(this.settingsHeader)||(n=this.settingsHeader.findIndex(function(t){return!_.isNil(t.itemsList)&&!_.isNil(t.itemsList[s.constants.notificationSettings.propNames.showPreviewInToasts])})),-1!=n&&(this.settingsHeader[n].itemsList[this.constants.notificationSettings.propNames.showPreviewInToasts].show=t,i&&this.settingsService.valueAsBoolean(this.constants.settings.names.enforceAngularDigestCycleSGNS)&&(this.logger.log("enforcing digest cycle for enablePreviewInToasts"),this.utilityService.digest(this.$scope)),!0===t&&(this.settingsHeader[n].subheader=this.translate(this.resources.strings.notification_settings_details_sound_subheader_v2_text))),this.previewInToastsScenario.mark(e+"_"+t),this.previewInToastsScenario&&this.previewInToastsScenario.stop()},t.prototype.onNotificationSettingsChange=function(t,e,i){this.notificationsAdapter.onNotificationSettingsChange(this.settingsHeader,t,e,i)},t.prototype.initNotificationSettingViewModel=function(){this.settingsHeader=this.getDefaultAppSettings()},Object.defineProperty(t.prototype,"soundPermission",{get:function(){return this.notificationsAdapter.soundPermission()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"showPreviewInToastsSettings",{get:function(){return this.notificationsAdapter.showPreviewInToastsSettings()},enumerable:!0,configurable:!0}),t.prototype.changeSoundSettingsState=function(t){this.notificationsAdapter.changeSoundSettingsState(t)},t.prototype.changePreviewInToastsState=function(t){this.notificationsAdapter.changePreviewInToastsState(t)},t.prototype.getDefaultAppSettings=function(){return this.notificationsAdapter.getSettingsFromAppId(this.constants.notificationSettings.defaults)},t.prototype.setAppsInfo=function(){var t=this;this.appsInfo={},this.appsInfo[this.constants.appId.chat]=[{appId:this.constants.appId.chat,header:this.translate(this.resources.strings.notification_settings_details_chat_subheader_text),subheader:this.translate(this.resources.strings.notification_settings_details_chat_subtext),ariaLabel:this.translate(this.resources.strings.notification_settings_details_chat_subheader_text_aria_label),showSeparator:!1}],this.settingsService.valueAsBoolean(this.constants.settings.names.showMeetingAppSettings)&&(this.appsInfo[this.constants.appId.calling]=[{appId:this.constants.appId.calling,header:this.translate(this.settingsService.valueAsBoolean(this.constants.settings.names.renameMeetingsAsEvents)?this.resources.strings.notification_settings_details_events_subheader_text:this.resources.strings.notification_settings_details_meetings_subheader_text),subheader:this.translate(this.resources.strings.notification_settings_details_meetings_subtext),ariaLabel:this.translate(this.resources.strings.notification_settings_details_meetings_subheader_text_aria_label),showSeparator:!1}]),this.appsInfo[this.constants.notificationSettings.apps.groupCallSettings]=[{appId:this.constants.notificationSettings.apps.groupCallSettings,header:this.translate(this.resources.strings.group_call_pickup_notification_setting_header),subheader:this.translate(this.resources.strings.group_call_pickup_notification_setting),ariaLabel:this.translate(this.resources.strings.group_call_pickup_notification_setting_aria_label),isHidden:!0,showSeparator:!1}],this.settingsService.valueAsBoolean(this.constants.settings.names.disableNotifyWhenAvailable)||(this.appsInfo[this.constants.notificationSettings.apps.followStatus]=[{appId:this.constants.notificationSettings.apps.followStatus,header:this.translate(this.resources.strings.notification_settings_details_status_header_text),subheader:this.translate(this.resources.strings.notification_settings_details_status_subheader_text),ariaLabel:this.translate(this.resources.strings.notification_settings_details_status_subheader_text_aria_label),isHidden:this.identityService.isGuestUserType(),showSeparator:!1}]),this.notificationsAdapter.canShowCallForwardingSettings(null).then(function(e){e&&(t.appsInfo[t.constants.notificationSettings.apps.groupCallSettings][0].isHidden=!e.areSettingsVisible)}),this.settingsService.valueAsBoolean(this.constants.settings.names.enableGraphApiNotifications)&&this.getAggregatedNotificationAppDefinition().then(function(e){e&&Object.keys(e).forEach(function(i){e[i]&&e[i].id&&e[i].name&&e[i].shortDescription&&(t.appsInfo[e[i].id]=[{appId:e[i].id,header:e[i].name,subheader:e[i].shortDescription,ariaLabel:t.$translate.instant(t.resources.strings.notification_settings_details_third_party_app_edit_aria_label,{description:e[i].shortDescription}),showSeparator:!1,isGraphApp:!0}])})})},t.prototype.getAggregatedNotificationAppDefinition=function(){var t=this;return this.notificationsStore.getGraphAppIdsFromFeed().then(function(e){var i=e||new Set,s=t.myUserPreferencesStore.getUserPreferences();if(s&&s.userGraphSettings){var n=_.keys(s.userGraphSettings);_.each(n,function(t){return i.add(t)})}var o={};return i.forEach(function(e){var i=t.appsService.getAggregatedAppDefinition(e);i||(i=t.delayedEntitlementsProcessor.getDelayedAppDefinitionFromFeed(e)),i&&i.activities&&i.activities.activityItems&&(o[i.id.toLowerCase()]=i)}),o})},t.prototype.setOtherNotificationInfo=function(){this.otherNotificationInfo={appId:this.constants.notificationSettings.propNames.synthetic,header:this.translate(this.resources.strings.notification_settings_details_other_subheader_text),subheader:this.translate(this.resources.strings.notification_settings_details_other_subtext),ariaLabel:this.translate(this.resources.strings.notification_settings_details_other_subheader_text_aria_label),showSeparator:!1}},t.prototype.sendInfoTelemetry=function(){var t={action:{gesture:teamspace.components.PanelActionGesture.click,outcome:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.components.PanelActionOutcome.nav.toString(),teamspace.components.PanelActionOutcome,this.logger),scenario:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.components.PanelActionScenario.navNotificationHelp.toString(),teamspace.components.PanelActionScenario,this.logger),scenarioType:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.components.PanelActionScenarioType.nav.toString(),teamspace.components.PanelActionScenarioType,this.logger)},module:{name:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.components.PanelModuleName.notifSettingHelp.toString(),teamspace.components.PanelModuleName,this.logger),type:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.components.PanelModuleType.notificationSettings.toString(),teamspace.components.PanelModuleType,this.logger),state:"notifSettingHelp",summary:"Notification settings help info"},panel:{type:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.PanelType.globalSettings.toString(),teamspace.PanelType,this.logger)}};this.analyticsService.onPanelAction(this.$scope,t)},t.prototype.showWindowsWarning=function(t){if(!!!t.itemsList[this.constants.notificationSettings.propNames.notificationToggle])return!1;var e=t.itemsList[this.constants.notificationSettings.propNames.notificationToggle].show,i=t.itemsList[this.constants.notificationSettings.propNames.notificationToggle].selected===this.translate(this.resources.strings.notification_settings_dropdown_toast_Native_text)||t.itemsList[this.constants.notificationSettings.propNames.notificationToggle].selected===this.translate(this.resources.strings.notification_settings_dropdown_toast_Mac_Native_text);return e&&("10"===this.platformDetectService.getOSVersion()&&this.platformDetectService.getOS()===this.constants.os.windows||this.isMacNativeNotificationSupported)&&i},t}();e.NotificationSettingsV2Controller=n,angular.module("teamspace.notificationSettingsV2",["teamspace.settingsService","teamspace.analyticsService","teamspace.eventingService","pascalprecht.translate","teamspace.constants","teamspace.settingsService","teamspace.loggingService","teamspace.notificationsAuxiliaryService","teamspace.dialogService","teamspace.utilityService","skypeX.notificationsStore","skypeX.delayedEntitlementsProcessor"]).directive("notificationsSettingsV2",[function(){return{restrict:"E",scope:{},controller:n,controllerAs:"ctrl",template:s}}])},2600:function(t,e){t.exports='<div class="notification-settings" simple-scrollbar>\n  <div class="alert alert-danger" ng-if="ctrl.error" translate-once="{{::$root.resources.strings.notification_settings_generalError}}"></div>\n  <div ng-if="ctrl.settingsHeader && !ctrl.error" simple-scrollbar>\n    <div class="content-block">\n      <ul ng-repeat="values in ::ctrl.settingsHeader" ng-hide="values.hide">\n        <li ng-hide="::values.showSeparator">\n          <h2 class="app-font-base-bold">{{values.subheader}}</h2>\n          <div class="notification-choice-warning" ng-if="ctrl.showWindowsWarning(values)">\n            <ng-include src="\'svg/icons-info.html\'"></ng-include>\n            <div>\n              <span ng-if="!ctrl.isMacNativeNotificationSupported">{{::$root.resources.strings.notification_settings_warning_windows|translate}}</span>\n              <span ng-if="ctrl.isMacNativeNotificationSupported">{{::$root.resources.strings.notification_settings_warning_mac|translate}}</span>\n              <a ng-if="!ctrl.disableNotificationHelpPageInTFL" tabindex="0" aria-label="{{::$root.resources.strings.notification_settings_details_info_page_link_short_aria_label|translate}}" href="https://support.office.com/article/manage-notifications-in-teams-1cc31834-5fe5-412b-8edb-43fecc78413d" target="_blank" ng-click="ctrl.sendInfoTelemetry()">\n                  {{::$root.resources.strings.notification_settings_details_info_page_link_short|translate}}\n              </a>\n            </div>\n          </div>\n        </li>\n        <li ng-repeat="(propName, items) in ::values.itemsList">\n          <div class="item-container" ng-if="items.show">\n            <div class="notification-item-title">\n              <label id="{{::propName}}-label" aria-hidden="true">{{::items.name}}</label>\n            </div>\n            <toggle-switch ng-if="propName == \'alertSound\' && ctrl.enableNotificationSettingsRevamp" ds-aria-label="{{::items.name}}" class="switch-input notification-sound" is-checked="ctrl.soundPermission" on-toggle="ctrl.changeSoundSettingsState(isChecked)"></toggle-switch>\n\n            <toggle-switch ng-if="propName == \'ShowPreviewInToasts\' && ctrl.enableNotificationSettingsRevamp" ds-aria-label="{{::items.name}}" class="switch-input notification-sound" is-checked="ctrl.showPreviewInToastsSettings" on-toggle="ctrl.changePreviewInToastsState(isChecked)"></toggle-switch>\n\n            \x3c!--Dropdown for each notification Type--\x3e\n            <dropdown-select class="form-field-input" ng-if="!(propName == \'alertSound\') && !(propName == \'ShowPreviewInToasts\')" ds-options="::items.options" ds-selected-value="items.selected" ds-text-field="value" ds-value-field="value" ds-labelledby-id="{{::propName}}-label" ds-on-change="ctrl.onNotificationSettingsChange(propName, newOption, oldOption)" ds-highlight-selected-option="true" ds-enable-title="true" ds-enable-truncation="true" ds-parent-container-selector=".notification-settings" ds-max-viewable-items="6">\n            </dropdown-select>\n          </div>\n        </li>\n        <li>\n            <hr class="notifications-line-seperator">\n        </li>\n      </ul>\n      <teams-channel-notification-settings ng-if="!ctrl.disableTeamsAndChannels" class="visible-channel-settings">\n      </teams-channel-notification-settings>\n      <hr class="notifications-line-seperator tnc-line-margins" ng-if="!ctrl.disableTeamsAndChannels">\n      <div ng-repeat="values in ctrl.appsInfo">\n        <generic-notification-settings class="visible-channel-settings" settings-view-model="values[0]">\n        </generic-notification-settings>\n      </div>\n      <div ng-if="::ctrl.enableSyntheticNotificationSettings">\n        <generic-notification-settings class="visible-channel-settings" settings-view-model="::ctrl.otherNotificationInfo">\n        </generic-notification-settings>\n      </div>\n      <div ng-if="!ctrl.disableNotificationHelpPageInTFL">\n          {{::$root.resources.strings.notification_settings_details_info_page|translate}}\n          <a href="https://support.office.com/article/manage-notifications-in-teams-1cc31834-5fe5-412b-8edb-43fecc78413d" target="_blank" ng-click="ctrl.sendInfoTelemetry()">\n              {{::$root.resources.strings.notification_settings_details_info_page_link|translate}}\n          </a>\n      </div>\n    </div>\n  </div>\n</div>'},2601:function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var s=i(2602),n=function(){function t(t,e,i,s,n){var o=this;this.$scope=t,this.constants=e,this.dialogService=i,this.wait=!0,this.closeSettingsDialogue=function(){o.closeThisDialog(),o.dialogService.close(o.constants.dialogs.optionsSettingsDialog)},this.headerButtons=[{text:s.instant(n.strings.settings_back_to_settings_label),func:function(){o.closeThisDialog()},icon:"svg/icons-chevron-left-small.html"}],this.heading=s.instant(n.strings.group_call_pickup_notification_setting_header),this.wait=!1}return t.$inject=["$scope","constants","dialogService","$translate","resources"],t.prototype.closeThisDialog=function(){this.$scope.closeThisDialog()},t.prototype.close=function(){this.$scope.closeThisDialog()},t}();e.ForwardCallsNotificationSettingsDialogController=n;var o="components/generic-notification-settings-dialog/forward-calls-notification-settings-dialog.html";angular.module("teamspace.forwardCallsNotificationSettingsDialog",["teamspace.constants","teamspace.loggingService","teamspace.dialogService","teamspace.constants"]).controller("ForwardCallsNotificationSettingsDialogController",n).run(["constants","dialogService",function(t,e){e.register(t.lazyDialogs.forwardedCallNotificationSettings,{template:o,className:"ts-modal-dialog chat-notification-settings-dialog visible-channel-notification-settings-dialog",closeByEscape:!0,closeByDocument:!0,controller:"ForwardCallsNotificationSettingsDialogController",controllerAs:"fcns",ariaAuto:!1,ariaRole:"dialog"})}]).run(["$templateCache",function(t){t.put(o,s)}])},2602:function(t,e){t.exports='<div class="channel-notification-settings" acc-role="dialog">\n    <modal-dialog footer-buttons="fcns.footerButtons" dialog-title="{{::fcns.heading}}" suppress-default-button="true" dialog-busy="fcns.dialogBusy" track-panel-type="{{$root.trackConstants.panelType.channelSettingsModal}}" role="dialog" right-align-buttons="true" add-close-icon="true" aria-label="{{::fcns.heading}}" close-function="fcns.closeSettingsDialogue" header-buttons="fcns.headerButtons">\n      <section class="channel-notification-settings-spinner" ng-if="fcns.wait">\n        <busy-animation size="large"></busy-animation>\n      </section>\n      <section ng-if="!fcns.wait" class="setting-container notification-settings content-block setting-section">\n        <div class="alert alert-danger" ng-if="fcns.error" translate-once="{{::$root.resources.strings.notification_settings_generalError}}"></div>\n        <forwarded-calls-notification-settings></forwarded-calls-notification-settings>\n      </section>\n    </modal-dialog>\n  </div>'}},[2589]);
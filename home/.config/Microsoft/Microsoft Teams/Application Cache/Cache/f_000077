webpackJsonp([12],{2157:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(2158),n(2160),n(2162),n(2164),n(2166),n(2168),n(2170),n(2172),n(303),n(305),n(306),n(304)},2158:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(2159),s=function(){function e(e,t,n){this.showPerfProfiler=!1,this.showPerfDashboard=!1,t.valueAsBoolean(e.settings.names.enableDevTools)&&(this.showPerfProfiler=n.canShowPerfProfiler()&&window.perfProfiler,this.showPerfDashboard=!this.showPerfProfiler)}return e.$inject=["constants","settingsService","utilityService"],e}();t.DebugPanelController=s,angular.module("teamspace.debugPanel",[]).directive("debugPanel",["$compile","constants",function(e,t){return{restrict:"E",controllerAs:"debugPanelCtrl",controller:s,templateUrl:"components/perf-dashboard/debug-panel.html"}}]).run(["$templateCache",function(e){e.put("components/perf-dashboard/debug-panel.html",i)}])},2159:function(e,t){e.exports='<div class="debug-panel">\n  <perf-profiler ng-if="::debugPanelCtrl.showPerfProfiler"></perf-profiler>\n  <perf-dashboard ng-if="::debugPanelCtrl.showPerfDashboard"></perf-dashboard>\n</div>'},2160:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(2161),s=function(){function e(e,t,n,i,s,r,a,o,l,c,h,d,p,u,f,m,g,b,v){var y=this;if(this.constants=e,this.heartbeatService=t,this.layoutService=n,this.navigationService=r,this.schoolAppNavigationService=a,this.$timeout=h,this.$interval=d,this.storageUsageCollectionService=p,this.utilityService=u,this.$q=m,this.$scope=g,this.$rootScope=b,this.autoStartPerfProfiler=!0,i.valueAsBoolean(e.settings.names.runningscenariotests))this.close();else{this.logger=f.newLogger("perf-dashboard"),this.eventListeners=[],this.isMessagingMemoryPannelVisible=!1,this.isSyncPanelVisible=!1,this.syncPanelVisibleState="off",this.isDatalayerDashboardVisible=!1,this.isWorkerDashboardVisible=!1,this.isBIMChatEnabled=v.isChatHybridAppExperienceContainerEnabled();var S=window.document.getElementById("perf-dashboard-iframe").contentWindow;this.perfDataCollector=t.newPerfDataCollector(),this.perfDataCollector.start(function(e){e.watchers=b.$$watchersCount,e.elements=document.getElementsByTagName("*").length,S.postMessage({name:"perfData",value:e},"*")});var w=t.getMemoryInfoSampler(),C=t.getCpuInfoSampler();p.registerStorageUsageListener("perfDashboard",function(e){S.postMessage({name:"storageUsageSize",value:{localStoragePercentUsed:e.localStorageUsed.percentOfQuota,indexDbSize:e.indexedDBSize}},"*")}),this.processInfoInterval=d(function(){var e=w.getSampleSync(),t=C.getSampleSync();S.postMessage({name:"processInfo",value:{memoryInfo:e,cpuInfo:t}},"*")},5e3,0,!1),this.channelSwitchViewModel={isChannelSwitchGridView:!1,isChannelSwitchTestVisible:!1,isLoadingTeamsAndChannels:!0,isRunningChannelSwitchTest:!1,hasResults:!1,iterations:10,timeout:3e3,channelSwitchButtonString:"Run Test",rawResults:{elementsAdded:[],watchersAdded:[],totalElapsedTime:[],renderTime:[]},finalResults:[]},o.getTeams().then(function(e){y.channelSwitchViewModel.allTeams=angular.copy(e),y.channelSwitchViewModel.isLoadingTeamsAndChannels=!1,y.initializeChannelSwitchTest()}),this.chatSwitchViewModel={isChatSwitchTestVisible:!1,isLoadingChats:!0,isRunningChatSwitchTest:!1,hasResults:!1,iterations:10,timeout:3e3,chatSwitchButtonString:"Run Test",rawResults:{elementsAdded:[],watchersAdded:[],totalElapsedTime:[],renderTime:[]},finalResults:[]};var M=l.getChatConversations(teamspace.services.ChatListType.PINNED),P=l.getChatConversations(teamspace.services.ChatListType.RECENTS);this.chatSwitchViewModel.allChats=_.map(_.union(M,P),function(t){return{objectId:t.id,displayName:t.title,subType:t.isMeeting?e.navigation.context.meeting:void 0}}),this.eventListeners.push(s.$on(g,e.events.debug.messageListFullyRendered,function(e,t){y.deferred&&y.deferred.resolve(t)})),this.eventListeners.push(s.$on(g,e.events.debug.gridViewFullyRendered,function(e,t){y.deferred&&y.deferred.resolve(t)})),this.eventListeners.push(s.$on(g,e.events.app.framePltDone,function(e,t){S.postMessage({name:"framePltDone",value:t},"*")}));var D=function(e){y.appState=teamspace.services.ApplicationState[e.newState]+" ("+e.reason,e.prevState?y.appState+=" was "+teamspace.services.ApplicationState[e.prevState].toLowerCase()+")":y.appState+=")"};D({newState:c.current,reason:"Starting up"}),this.eventListeners.push(s.$on(g,e.events.appState.changed,function(e,t){D(t)})),g.$on("$destroy",function(e){y.perfDataCollector.stop(),y.eventListeners.forEach(function(e){e()})})}}return e.$inject=["constants","heartbeatService","layoutService","settingsService","eventingService","navigationService","schoolAppNavigationService","channelService","chatListService","appStateService","$timeout","$interval","storageUsageCollectionService","utilityService","loggingService","$q","$scope","$rootScope","experienceContainerFeatureService"],Object.defineProperty(e.prototype,"navCtx",{get:function(){return"perf-dashboard"},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"channelSwitchTestVisibleState",{get:function(){return this.channelSwitchViewModel.isChannelSwitchTestVisible?"on":"off"},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"chatSwitchTestVisibleState",{get:function(){return this.chatSwitchViewModel.isChatSwitchTestVisible?"on":"off"},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"perfIndicateState",{get:function(){return this.layoutService.showPerfIndicators?"on":"off"},enumerable:!0,configurable:!0}),e.prototype.togglePerfIndicators=function(){this.layoutService.showPerfIndicators=!this.layoutService.showPerfIndicators},e.prototype.reloadAppWithPerfProfiler=function(){var e=this.autoStartPerfProfiler?teamspace.components.DebugPanelState.PerfProfilerWithAutoStart.toString():teamspace.components.DebugPanelState.PerfProfiler.toString(),t=this.utilityService.addDebugPanelQPToUrl(window.location.href,e);window.location.href=t},e.prototype.close=function(){this.$interval.cancel(this.processInfoInterval),this.heartbeatService.unregisterFrameRateListener("perfDashboard"),this.storageUsageCollectionService.unregisterStorageUsageListener("perfDashboard"),this.layoutService.showPerfDashboard=!1},e.prototype.toggleTestChannelSwitch=function(){this.channelSwitchViewModel.isChannelSwitchTestVisible||(this.isMessagingMemoryPannelVisible=!1,this.callingPerfPanelVisible=!1,this.isDatalayerDashboardVisible=!1,this.isWorkerDashboardVisible=!1),this.channelSwitchViewModel.isChannelSwitchTestVisible=!this.channelSwitchViewModel.isChannelSwitchTestVisible},e.prototype.toggleTestChatSwitch=function(){this.chatSwitchViewModel.isChatSwitchTestVisible||(this.isMessagingMemoryPannelVisible=!1,this.callingPerfPanelVisible=!1,this.isDatalayerDashboardVisible=!1,this.isWorkerDashboardVisible=!1),this.chatSwitchViewModel.isChatSwitchTestVisible=!this.chatSwitchViewModel.isChatSwitchTestVisible},e.prototype.toggleMessagingMemoryPannel=function(){this.isMessagingMemoryPannelVisible||(this.channelSwitchViewModel.isChannelSwitchTestVisible=!1,this.chatSwitchViewModel.isChatSwitchTestVisible=!1,this.isDatalayerDashboardVisible=!1),this.isWorkerDashboardVisible=!1,this.isMessagingMemoryPannelVisible=!this.isMessagingMemoryPannelVisible,this.messagingMemoryPannelVisibleState=this.isMessagingMemoryPannelVisible?"on":"off",this.isMessagingMemoryPannelVisible&&this.isSyncPanelVisible&&this.toggleSyncPanel()},e.prototype.toggleCallingPerfPanel=function(){this.callingPerfPanelVisible||(this.channelSwitchViewModel.isChannelSwitchTestVisible=!1,this.isWorkerDashboardVisible=!1),this.callingPerfPanelVisible=!this.callingPerfPanelVisible},e.prototype.toggleSyncPanel=function(){this.isSyncPanelVisible=!this.isSyncPanelVisible,this.isWorkerDashboardVisible=!1,this.syncPanelVisibleState=this.isSyncPanelVisible?"on":"off",this.isSyncPanelVisible&&this.isMessagingMemoryPannelVisible&&this.toggleMessagingMemoryPannel()},e.prototype.toggleMultiwindowDashboard=function(){this.isDatalayerDashboardVisible||(this.channelSwitchViewModel.isChannelSwitchTestVisible=!1,this.isMessagingMemoryPannelVisible=!1,this.isWorkerDashboardVisible=!1),this.isDatalayerDashboardVisible=!this.isDatalayerDashboardVisible},e.prototype.toggleWorkerDashboard=function(){this.isWorkerDashboardVisible=!this.isWorkerDashboardVisible,this.channelSwitchViewModel.isChannelSwitchTestVisible=!1,this.isMessagingMemoryPannelVisible=!1,this.channelSwitchViewModel.isChannelSwitchTestVisible=!1,this.isMessagingMemoryPannelVisible=!1,this.isSyncPanelVisible=!1},e.prototype.toggleCallingDebug=function(){this.callingDebugVisible=!this.callingDebugVisible,this.channelSwitchViewModel.isChannelSwitchTestVisible=!1,this.isMessagingMemoryPannelVisible=!1,this.isSyncPanelVisible=!1,this.isWorkerDashboardVisible=!1},e.prototype.initializeChannelSwitchTest=function(){this.channelSwitchViewModel.allTeams&&this.channelSwitchViewModel.allTeams.length&&(this.channelSwitchViewModel.selectedStartTeam=_.find(this.channelSwitchViewModel.allTeams,{displayName:"Microsoft Teams"}),this.channelSwitchViewModel.selectedStartTeam||(this.channelSwitchViewModel.selectedStartTeam=this.channelSwitchViewModel.allTeams[0]),this.channelSwitchViewModel.selectedStartChannel=_.find(this.channelSwitchViewModel.selectedStartTeam.channels,{displayName:"General"}),this.channelSwitchViewModel.selectedStartChannel||(this.channelSwitchViewModel.selectedStartChannel=this.channelSwitchViewModel.selectedStartTeam.channels[0]),this.channelSwitchViewModel.selectedEndTeam=_.find(this.channelSwitchViewModel.allTeams,{displayName:"Microsoft Teams"}),this.channelSwitchViewModel.selectedEndTeam||(this.channelSwitchViewModel.selectedEndTeam=this.channelSwitchViewModel.allTeams[0]),this.channelSwitchViewModel.selectedEndChannel=_.find(this.channelSwitchViewModel.selectedEndTeam.channels,{displayName:"Architecture"}),this.channelSwitchViewModel.selectedEndChannel||(this.channelSwitchViewModel.selectedEndChannel=this.channelSwitchViewModel.selectedEndTeam.channels[0]))},e.prototype.copyResults=function(){var e="";for(var t in this.channelSwitchViewModel.rawResults)this.channelSwitchViewModel.rawResults.hasOwnProperty(t)&&(e+=t+","+this.channelSwitchViewModel.rawResults[t].join(",")+"\n");prompt("ctrl+c to copy values",e)},e.prototype.startChannelSwitchTest=function(){var e=this;if(this.channelSwitchViewModel.selectedStartTeam&&this.channelSwitchViewModel.selectedStartChannel&&this.channelSwitchViewModel.selectedEndTeam&&this.channelSwitchViewModel.selectedEndChannel){for(var t in this.channelSwitchViewModel.rawResults)this.channelSwitchViewModel.rawResults.hasOwnProperty(t)&&(this.channelSwitchViewModel.rawResults[t].length=0);this.channelSwitchViewModel.finalResults.length=0,this.channelSwitchViewModel.isRunningChannelSwitchTest=!0,this.channelSwitchViewModel.currentIteration=0,this.runChannelSwitchIterations().then(function(t){e.channelSwitchViewModel.channelSwitchButtonString="Run Test",e.channelSwitchViewModel.isRunningChannelSwitchTest=!1,e.channelSwitchViewModel.hasResults=!0;for(var n in e.channelSwitchViewModel.rawResults)if(e.channelSwitchViewModel.rawResults.hasOwnProperty(n)){var i=e.constructFinalResult(n,e.channelSwitchViewModel.rawResults[n]);e.channelSwitchViewModel.finalResults.push(i)}})}else alert("Make sure all fields are filled out")},e.prototype.runChannelSwitchIterations=function(){var e=[];if(this.channelSwitchViewModel.isChannelSwitchGridView)for(t=0;t<this.channelSwitchViewModel.iterations;t++)e.push(this.gridViewChannelSwitchIteration.bind(this));else for(var t=0;t<this.channelSwitchViewModel.iterations;t++)e.push(this.channelSwitchIteration.bind(this));return e.reduce(this.$q.when,0)},e.prototype.gridViewChannelSwitchIteration=function(){var e,t,n,i,s=this;return this.channelSwitchViewModel.currentIteration++,this.channelSwitchViewModel.channelSwitchButtonString="Running Test "+this.channelSwitchViewModel.currentIteration+" / "+this.channelSwitchViewModel.iterations,this.schoolAppNavigationService.navigateToSingleTeam(this.$scope,this.channelSwitchViewModel.selectedStartTeam).then(function(e){return s.defer(e)}).then(function(){return s.$timeout(function(){n=document.getElementsByTagName("*").length,e=s.$rootScope.$$watchersCount},s.channelSwitchViewModel.timeout,!1)}).then(function(){return s.schoolAppNavigationService.navigateToGridView(s.$scope).then(function(e){return s.defer(e)})}).then(function(){return s.schoolAppNavigationService.navigateToSingleTeam(s.$scope,s.channelSwitchViewModel.selectedEndTeam).then(function(e){return s.defer(e)})}).then(function(r){return r||s.logger.error("Invalid scenario returned from navigateToSingleTeam"),s.channelSwitchViewModel.rawResults.totalElapsedTime.push(r.displayDataJson.total),s.channelSwitchViewModel.rawResults.renderTime.push(r.displayDataJson.vr_pre_render),s.$timeout(function(){i=document.getElementsByTagName("*").length,t=s.$rootScope.$$watchersCount,s.channelSwitchViewModel.rawResults.elementsAdded.push(i-n),s.channelSwitchViewModel.rawResults.watchersAdded.push(t-e)},s.channelSwitchViewModel.timeout,!1)})},e.prototype.channelSwitchIteration=function(){var e,t,n,i,s=this;return this.channelSwitchViewModel.currentIteration++,this.channelSwitchViewModel.channelSwitchButtonString="Running Test "+this.channelSwitchViewModel.currentIteration+" / "+this.channelSwitchViewModel.iterations,this.navigateToChannel(this.channelSwitchViewModel.selectedStartTeam,this.channelSwitchViewModel.selectedStartChannel).then(function(){return s.$timeout(function(){n=document.getElementsByTagName("*").length,e=s.$rootScope.$$watchersCount},s.channelSwitchViewModel.timeout,!1)}).then(function(){return s.navigateToChannel(s.channelSwitchViewModel.selectedEndTeam,s.channelSwitchViewModel.selectedEndChannel)}).then(function(r){return r||s.logger.error("Invalid scenario returned from navigateToChannel"),s.channelSwitchViewModel.rawResults.totalElapsedTime.push(r.displayDataJson.total),s.channelSwitchViewModel.rawResults.renderTime.push(r.displayDataJson.vr_pre_render),s.$timeout(function(){i=document.getElementsByTagName("*").length,t=s.$rootScope.$$watchersCount,s.channelSwitchViewModel.rawResults.elementsAdded.push(i-n),s.channelSwitchViewModel.rawResults.watchersAdded.push(t-e)},s.channelSwitchViewModel.timeout,!1)})},e.prototype.navigateToChannel=function(e,t){var n=this,i={slug:t.displayName,groupName:e.displayName,middlePane:"conversations",threadId:t.objectId,messageId:void 0,ctx:this.constants.navigation.context.channel,navCtx:this.navCtx};return this.navigationService.navigatePromise(this.$scope,this.constants.states.appConversation,i).then(function(e){return n.defer(e)})},e.prototype.defer=function(e){return e?(this.deferred=this.$q.defer(),this.deferred.promise):this.$q.when()},e.prototype.initializeChatSwitchTest=function(){!this.chatSwitchViewModel.allChats||!this.chatSwitchViewModel.allChats.length||this.chatSwitchViewModel.allChats.length<2||(this.chatSwitchViewModel.selectedStartChat=this.chatSwitchViewModel.allChats[0],this.chatSwitchViewModel.selectedEndChat=this.chatSwitchViewModel.allChats[1])},e.prototype.copyChatResults=function(){var e="";for(var t in this.chatSwitchViewModel.rawResults)this.chatSwitchViewModel.rawResults.hasOwnProperty(t)&&(e+=t+","+this.chatSwitchViewModel.rawResults[t].join(",")+"\n");prompt("ctrl+c to copy values",e)},e.prototype.startChatSwitchTest=function(){var e=this;if(this.chatSwitchViewModel.selectedStartChat&&this.chatSwitchViewModel.selectedEndChat){for(var t in this.chatSwitchViewModel.rawResults)this.chatSwitchViewModel.rawResults.hasOwnProperty(t)&&(this.chatSwitchViewModel.rawResults[t].length=0);this.chatSwitchViewModel.finalResults.length=0,this.chatSwitchViewModel.isRunningChatSwitchTest=!0,this.chatSwitchViewModel.currentIteration=0,this.runChatSwitchIterations().then(function(t){e.chatSwitchViewModel.chatSwitchButtonString="Run Test",e.chatSwitchViewModel.isRunningChatSwitchTest=!1,e.chatSwitchViewModel.hasResults=!0;for(var n in e.chatSwitchViewModel.rawResults)if(e.chatSwitchViewModel.rawResults.hasOwnProperty(n)){var i=e.constructFinalResult(n,e.chatSwitchViewModel.rawResults[n]);e.chatSwitchViewModel.finalResults.push(i)}})}else alert("Make sure all fields are filled out")},e.prototype.runChatSwitchIterations=function(){for(var e=[],t=0;t<this.chatSwitchViewModel.iterations;t++)e.push(this.chatSwitchIteration.bind(this));return e.reduce(this.$q.when,0)},e.prototype.chatSwitchIteration=function(){var e,t,n,i,s=this;return this.chatSwitchViewModel.currentIteration++,this.chatSwitchViewModel.chatSwitchButtonString="Running Test "+this.chatSwitchViewModel.currentIteration+" / "+this.chatSwitchViewModel.iterations,this.navigateToChat(this.chatSwitchViewModel.selectedStartChat).then(function(){return s.$timeout(function(){n=document.getElementsByTagName("*").length,e=s.$rootScope.$$watchersCount},s.chatSwitchViewModel.timeout,!1)}).then(function(){return s.navigateToChat(s.chatSwitchViewModel.selectedEndChat)}).then(function(r){return r?(s.chatSwitchViewModel.rawResults.totalElapsedTime.push(r.displayDataJson.total),s.chatSwitchViewModel.rawResults.renderTime.push(r.displayDataJson.vr_pre_render)):s.logger.error("Invalid scenario returned from navigateToChat"),s.$timeout(function(){i=document.getElementsByTagName("*").length,t=s.$rootScope.$$watchersCount,s.chatSwitchViewModel.rawResults.elementsAdded.push(i-n),s.chatSwitchViewModel.rawResults.watchersAdded.push(t-e)},s.chatSwitchViewModel.timeout,!1)})},e.prototype.navigateToChat=function(e){var t=this;return this.navigationService.navigateToChat(e.objectId,"perf-dashboard",e.subType).then(function(e){return e||t.isBIMChatEnabled?(t.deferred=t.$q.defer(),t.deferred.promise):t.$q.when()})},e.prototype.standardError=function(e){return this.standardDeviation(e)/Math.sqrt(e.length)},e.prototype.standardDeviation=function(e){var t=this.average(e),n=e.map(function(e){var n=e-t;return n*n}),i=this.average(n);return Math.sqrt(i)},e.prototype.average=function(e){return e.reduce(function(e,t){return e+t},0)/e.length},e.prototype.constructFinalResult=function(e,t){var n={elementsAdded:"# Elements added",watchersAdded:"# Watchers added",totalElapsedTime:"Total elapsed (ms)",renderTime:"Total render"}[e],i=Math.min.apply(null,t),s=Math.max.apply(null,t);return{id:e,displayName:n,mean:Math.ceil(this.average(t)),stdDev:Math.ceil(this.standardDeviation(t)),stdErr:Math.ceil(this.standardError(t)),range:i+"-"+s}},e}();t.PerfDashboardController=s,angular.module("teamspace.perfDashboard",["teamspace.heartbeatService"]).directive("perfDashboard",["$compile","constants",function(e,t){return{restrict:"E",controllerAs:"perfDashboardCtrl",controller:s,templateUrl:"components/perf-dashboard/perf-dashboard.html"}}]).run(["$templateCache",function(e){e.put("components/perf-dashboard/perf-dashboard.html",i)}])},2161:function(e,t){e.exports='<div class="perf-dashboard-panel">\n  <div class="switch-board">\n    <label class="perf-dashboard-app-state">{{perfDashboardCtrl.appState}}</label>\n    <div class="close-perf" title="close perf dashboard" ng-click="perfDashboardCtrl.close()">X</div>\n    <br/>\n    <label>Resp. Profiler (App Will Reload):</label>\n    <button ng-click="perfDashboardCtrl.reloadAppWithPerfProfiler()" title="Reload With Perf Profiler" class="off">off</button>&nbsp;&nbsp;<label><input type="checkbox" ng-model="perfDashboardCtrl.autoStartPerfProfiler"/>AutoStart</label>\n    <br/>\n    <label>Perf Indicators:</label>\n    <button ng-click="perfDashboardCtrl.togglePerfIndicators()" title="show/hide perf indicators" class="{{perfDashboardCtrl.perfIndicateState}}">{{perfDashboardCtrl.perfIndicateState}}</button>\n    <br/>\n    <label>Channel Switch Panel:</label>\n    <button ng-click="perfDashboardCtrl.toggleTestChannelSwitch()" title="show/hide channel switch test" class="{{perfDashboardCtrl.channelSwitchTestVisibleState}}">{{perfDashboardCtrl.channelSwitchTestVisibleState}}</button>\n    <br/>\n    <label>Chat Switch Panel:</label>\n    <button ng-click="perfDashboardCtrl.toggleTestChatSwitch()" title="show/hide chat switch test" class="{{perfDashboardCtrl.chatSwitchTestVisibleState}}">{{perfDashboardCtrl.chatSwitchTestVisibleState}}</button>\n    <br/>\n    <label>Memory Panel:</label>\n    <button ng-click="perfDashboardCtrl.toggleMessagingMemoryPannel()" title="show/hide messaging memory analysis panel" class="{{perfDashboardCtrl.isMessagingMemoryPannelVisible ? \'on\' : \'off\'}}">{{perfDashboardCtrl.isMessagingMemoryPannelVisible ? \'on\' : \'off\'}}</button>\n    <br/>\n    <label>Sync Panel:</label>\n    <button ng-click="perfDashboardCtrl.toggleSyncPanel()" title="show/hide sync panel" class="{{perfDashboardCtrl.syncPanelVisibleState}}">{{perfDashboardCtrl.syncPanelVisibleState}}</button>\n    <br/>\n    <label>Calling Performance Panel:</label>\n    <button ng-click="perfDashboardCtrl.toggleCallingPerfPanel()" title="show/hide calling perf analysis panel" ng-class="perfDashboardCtrl.callingPerfPanelVisible ? \'on\' : \'off\'">{{perfDashboardCtrl.callingPerfPanelVisible ? \'on\' : \'off\'}}</button>\n    <br/>\n    <label>Calling Debug:</label>\n    <button ng-click="perfDashboardCtrl.toggleCallingDebug()" title="show/hide calling-debug panel" ng-class="perfDashboardCtrl.callingDebugVisible ? \'on\' : \'off\'">{{perfDashboardCtrl.callingDebugVisible ? \'on\' : \'off\'}}</button>\n    <br/>\n    <label>Multiwindow Panel</label>\n    <button ng-click="perfDashboardCtrl.toggleMultiwindowDashboard()" title="show/hide multiwindow perf panel" ng-class="perfDashboardCtrl.isDatalayerDashboardVisible ? \'on\' : \'off\'">{{perfDashboardCtrl.isDatalayerDashboardVisible ? \'on\' : \'off\'}}</button>\n    <br/>\n    <label>Worker Panel</label>\n    <button ng-click="perfDashboardCtrl.toggleWorkerDashboard()" title="show/hide worker panel" ng-class="perfDashboardCtrl.isWorkerDashboardVisible ? \'on\' : \'off\'">{{perfDashboardCtrl.isWorkerDashboardVisible ? \'on\' : \'off\'}}</button>\n    <br/>\n    <div class="channel-switch-panel" ng-if="perfDashboardCtrl.channelSwitchViewModel.isChannelSwitchTestVisible && !perfDashboardCtrl.isMessagingMemoryPannelVisible && !perfDashboardCtrl.isSyncPanelVisible">\n      <form class="channel-switch-form">\n        <label>Use GridView Channel Switch: <input type="checkbox" ng-model="perfDashboardCtrl.channelSwitchViewModel.isChannelSwitchGridView"/></label>\n        <p>(Switch back to GridView before channel switch)</p>\n        <label>Starting Team: </label>\n        <select ng-options="team.displayName for team in ::perfDashboardCtrl.channelSwitchViewModel.allTeams track by team.objectId" ng-model="perfDashboardCtrl.channelSwitchViewModel.selectedStartTeam">\n          <option value="">-- Select a starting team --</option>\n        </select>\n        <label>Starting Channel: </label>\n        <select ng-options="channel.displayName for channel in perfDashboardCtrl.channelSwitchViewModel.selectedStartTeam.channels track by channel.objectId" ng-model="perfDashboardCtrl.channelSwitchViewModel.selectedStartChannel">\n          <option value="">-- Select a starting channel --</option>\n        </select>\n        <label>End Team: </label>\n        <select ng-options="team.displayName for team in ::perfDashboardCtrl.channelSwitchViewModel.allTeams track by team.objectId" ng-model="perfDashboardCtrl.channelSwitchViewModel.selectedEndTeam">\n          <option value="">-- Select an ending team --</option>\n        </select>\n        <label>End Channel: </label>\n        <select ng-options="channel.displayName for channel in perfDashboardCtrl.channelSwitchViewModel.selectedEndTeam.channels track by channel.objectId" ng-model="perfDashboardCtrl.channelSwitchViewModel.selectedEndChannel">\n          <option value="">-- Select an ending channel --</option>\n        </select>\n        <div class="advanced-options">\n          <div class="option">\n            <label title="# of times to run channel switch test">Iterations: </label>\n            <input sanitized="done" type="text" ng-model="perfDashboardCtrl.channelSwitchViewModel.iterations">\n          </div>\n          <div class="option">\n            <label title="delay between each channel switch">Delay: </label>\n            <input sanitized="done" type="text" ng-model="perfDashboardCtrl.channelSwitchViewModel.timeout">\n          </div>\n        </div>\n        <button ng-bind="perfDashboardCtrl.channelSwitchViewModel.channelSwitchButtonString" ng-click="perfDashboardCtrl.startChannelSwitchTest()" ng-disabled="perfDashboardCtrl.channelSwitchViewModel.isRunningChannelSwitchTest" title="start channel switch test">\n        </button>\n      </form>\n      <div ng-if="!perfDashboardCtrl.channelSwitchViewModel.isRunningChannelSwitchTest && perfDashboardCtrl.channelSwitchViewModel.hasResults">\n        <h3>Results</h3>\n        <table class="channel-switch-results">\n          <tr>\n            <th>Metric</th>\n            <th>Mean</th>\n            <th>StdDev</th>\n            <th>StdErr</th>\n          </tr>\n          <tr ng-repeat="result in ::perfDashboardCtrl.channelSwitchViewModel.finalResults track by result.id">\n            <td>{{::result.displayName}}</td>\n            <td>{{::result.mean}}</td>\n            <td>{{::result.stdDev}}</td>\n            <td>{{::result.stdErr}}</td>\n          </tr>\n        </table>\n        <button ng-click="perfDashboardCtrl.copyResults()">Copy Raw Results</button>\n        <div class="channel-switch-tip">\n          <p><b>Tip: Testing for statistical signficance</b></p>\n          <p>\n            You can copy result values into Excel and run your own T.TEST to calculate p-value. There are also online tools such as GraphPad\n            that can do this for you.\n          </p>\n        </div>\n      </div>\n    </div>\n    <div class="chat-switch-panel" ng-if="perfDashboardCtrl.chatSwitchViewModel.isChatSwitchTestVisible && !perfDashboardCtrl.isMessagingMemoryPannelVisible && !perfDashboardCtrl.isSyncPanelVisible">\n      <form class="chat-switch-form">\n        <label>Starting Chat: </label>\n        <select ng-options="chat.displayName for chat in perfDashboardCtrl.chatSwitchViewModel.allChats track by chat.objectId" ng-model="perfDashboardCtrl.chatSwitchViewModel.selectedStartChat">\n          <option value="">-- Select a starting chat --</option>\n        </select>\n        <label>End Chat: </label>\n        <select ng-options="chat.displayName for chat in perfDashboardCtrl.chatSwitchViewModel.allChats track by chat.objectId" ng-model="perfDashboardCtrl.chatSwitchViewModel.selectedEndChat">\n          <option value="">-- Select an ending chat --</option>\n        </select>\n        <div class="advanced-options">\n          <div class="option">\n            <label title="# of times to run chat switch test">Iterations: </label>\n            <input sanitized="done" type="text" ng-model="perfDashboardCtrl.chatSwitchViewModel.iterations">\n          </div>\n          <div class="option">\n            <label title="delay between each chat switch">Delay: </label>\n            <input sanitized="done" type="text" ng-model="perfDashboardCtrl.chatSwitchViewModel.timeout">\n          </div>\n        </div>\n        <button ng-bind="perfDashboardCtrl.chatSwitchViewModel.chatSwitchButtonString" ng-click="perfDashboardCtrl.startChatSwitchTest()" ng-disabled="perfDashboardCtrl.chatSwitchViewModel.isRunningChatSwitchTest" title="start chat switch test">\n        </button>\n      </form>\n      <div ng-if="!perfDashboardCtrl.chatSwitchViewModel.isRunningChatSwitchTest && perfDashboardCtrl.chatSwitchViewModel.hasResults">\n        <h3>Results</h3>\n        <table class="chat-switch-results">\n          <tr>\n            <th>Metric</th>\n            <th>Mean</th>\n            <th>StdDev</th>\n            <th>StdErr</th>\n          </tr>\n          <tr ng-repeat="result in ::perfDashboardCtrl.chatSwitchViewModel.finalResults track by result.id">\n            <td>{{::result.displayName}}</td>\n            <td>{{::result.mean}}</td>\n            <td>{{::result.stdDev}}</td>\n            <td>{{::result.stdErr}}</td>\n          </tr>\n        </table>\n        <button ng-click="perfDashboardCtrl.copyChatResults()">Copy Raw Results</button>\n      </div>\n    </div>\n    <div ng-if="perfDashboardCtrl.isMessagingMemoryPannelVisible" class="perf-dashboard-memory-analysis">\n      <memory-dashboard></memory-dashboard>\n    </div>\n    <div ng-if="!perfDashboardCtrl.channelSwitchViewModel.isChannelSwitchTestVisible && !perfDashboardCtrl.isMessagingMemoryPannelVisible && perfDashboardCtrl.isSyncPanelVisible" class="perf-dashboard-memory-analysis">\n      <sync-dashboard></sync-dashboard>\n    </div>\n    <calling-perf-dashboard ng-if="perfDashboardCtrl.callingPerfPanelVisible"></calling-perf-dashboard>\n    <div ng-if="perfDashboardCtrl.isDatalayerDashboardVisible" class="perf-dashboard-multiwindow-analysis">\n        <datalayer-dashboard></datalayer-dashboard>\n    </div>\n    <div ng-if="perfDashboardCtrl.isWorkerDashboardVisible" class="perf-dashboard-worker-analysis">\n        <worker-dashboard></worker-dashboard>\n    </div>\n    <calling-debug ng-if="perfDashboardCtrl.callingDebugVisible"></calling-debug>\n  </div>\n  <iframe ng-show="!perfDashboardCtrl.channelSwitchViewModel.isChannelSwitchTestVisible && !perfDashboardCtrl.isMessagingMemoryPannelVisible && !perfDashboardCtrl.callingDebugVisible && !perfDashboardCtrl.isDatalayerDashboardVisible && !perfDashboardCtrl.isSyncPanelVisible && !perfDashboardCtrl.callingPerfPanelVisible" id="perf-dashboard-iframe" class="perf-dashboard-iframe" ng-src="perf.html" sandbox="allow-scripts"></iframe>\n</div>'},2162:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(2163),s=function(){function e(e,t,n,i,s,r,a,o,l,c,h,d,p){this.messageFetchService=e,this.messagePrefetchAndCleanupService=t,this.conversationsService=n,this.conversationsStore=i,this.mruChannelsService=s,this.chatSyncPriorityService=r,this.constants=a,this.settingsService=o,this.memoryAnalysisService=l,this.objectLeaksDetector=h,this.$timeout=d,this.diagnosticsActionService=p,this.eventLeakResults=[],this.scopeLeakResults=[],this.serviceLeakResults=[],this.messageVisibilityResults=[],this.messageDistributionResults=[],this.providerMemoryResults=[],this.scopePerfResults=[],this.windowResults=[],this.rollUpResult=[],this.listenerAnalysisResults=[],this.listenerAnalysisTop100Results=[],this.scopeInfoResults=[],this.scopeInfoTop100Results=[],this.logger=c.newLogger("MemoryDashboard"),this.canGatherLeakedObjects=h.isEnabled(),window.desktop&&window.desktop.watchdog&&(this.startWatchdog=window.desktop.watchdog.start,this.stopWatchdog=window.desktop.watchdog.stop)}return e.$inject=["messageFetchService","messagePrefetchAndCleanupService","conversationsService","conversationsStore","mruChannelsService","chatSyncPriorityService","constants","settingsService","memoryAnalysisService","loggingService","objectLeaksDetector","$timeout","diagnosticsActionService"],e.prototype.measureMemory=function(){var e=this;this.isMeasuringMemory=!0,this.stopWatchdog&&this.stopWatchdog(),this.$timeout(function(){e.calculateMemorySize(),e.isMeasuringMemory=!1,e.startWatchdog&&e.startWatchdog()},50,!1)},e.prototype.clearResults=function(){this.messageVisibilityResults=[],this.messageDistributionResults=[],this.providerMemoryResults=[],this.scopePerfResults=[],this.windowResults=[],this.rollUpResult=[],this.listenerAnalysisResults=[],this.listenerAnalysisTop100Results=[],this.scopeInfoResults=[],this.scopeInfoTop100Results=[],this.scopeListenersAnalyzed=!1,this.scopeWatchersAnalyzed=!1,this.isEventLeaksAnalyzed=!1,this.isEventLeaksV2Analyzed=!1,this.isScopeLeaksAnalyzed=!1,this.isServiceLeaksAnalyzed=!1,this.eventLeakResults=[],this.detachedDomEventLeakResults=void 0,this.scopeLeakResults=[],this.serviceLeakResults=[],this.leaksByType=void 0,this.leaksByTypeMW=void 0},e.prototype.tabulateMemoryResults=function(e){e=_.orderBy(e,["sizeInMB"],["desc"]),this.providerMemoryResults=_.take(e,10),console.table(e),this.rollUpResult.push({propertyName:"Angular Services and Providers",sizeInMB:_.reduce(e,function(e,t){return e+t.sizeInMB},0)})},e.prototype.tabulateScopePerfResults=function(e){e=_.orderBy(e,["sizeInMB"],["desc"]),this.scopePerfResults=_.take(e,10),console.table(e)},e.prototype.pushRootScopeSize=function(e){this.rollUpResult.push({propertyName:"rootScope",sizeInMB:e})},e.prototype.tabulateWindowResults=function(e){var t=[];_.forEach(e,function(e,n){t.push({propertyName:n,sizeInMB:e})}),t=_.orderBy(t,["sizeInMB"],["desc"]),this.windowResults=_.take(t,10),console.table(t),this.rollUpResult.push({propertyName:"window",sizeInMB:e.window})},e.prototype.gatherLeakedObjects=function(){var e=this.objectLeaksDetector.getAllLeaks();this.leaksByType=Object.keys(e).map(function(t){return{type:t,count:e[t].length}})},e.prototype.gatherLeakedObjectsFromMW=function(){var e=this;this.leaksByTypeMW="loading",this.diagnosticsActionService.getExperienceRendererLeaks().then(function(t){var n=[];for(var i in t)n.push({type:i,count:t[i]});e.leaksByTypeMW=["loadingComplete",n]}).catch(function(t){e.leaksByTypeMW=["loadingFailed",t&&t.toString()]})},e.prototype.calculateMemorySize=function(){this.rollUpResult=[],this.providerMemoryResults=[];var e=this.memoryAnalysisService.calculateTeamsAppModuleMemorySize();this.tabulateMemoryResults(e),this.scopePerfResults=[];var t=this.memoryAnalysisService.analyzeScopeMemory();this.tabulateScopePerfResults(t),this.pushRootScopeSize(this.memoryAnalysisService.sizeOfRootScopeInMB()),this.windowResults=[];var n=this.memoryAnalysisService.windowSize();this.tabulateWindowResults(n),console.table(this.rollUpResult)},e.prototype.copyResult=function(e){if(_.isObject(e)){var t=JSON.stringify(e);this.logger.info("Leaked results for the clicked component"),this.logger.info(t),prompt("ctrl+c to copy result",t)}else prompt("ctrl+c to copy result",e)},e.prototype.analyzeEventListeners=function(){this.isAnalyzingEventListeners=!0,this.listenerAnalysisResults=this.memoryAnalysisService.analyzeEventListeners(),this.listenerAnalysisResults.sort(function(e,t){return t.listenerCount-e.listenerCount}),this.listenerAnalysisTop100Results=this.listenerAnalysisResults.slice(0,101),console.log("All Event Listeners"),console.table(this.listenerAnalysisResults),this.isAnalyzingEventListeners=!1},e.prototype.sortAndSliceScopeInfoResults=function(e){this.scopeInfoResults.sort(e),this.scopeInfoTop100Results=this.scopeInfoResults.slice(0,101),0===this.scopeInfoTop100Results.length&&this.scopeInfoTop100Results.push({id:void 0,xpath:void 0,watchCount:0,listenerCount:0,listenerSummary:void 0})},e.prototype.analyzeScopeWatchers=function(){this.isAnalyzingScopeWatchers=!0,this.scopeInfoResults=this.memoryAnalysisService.analyzeScopeInfo(),this.sortAndSliceScopeInfoResults(function(e,t){return t.watchCount-e.watchCount}),this.scopeWatchersAnalyzed=!0,this.isAnalyzingScopeWatchers=!1},e.prototype.analyzeScopeListeners=function(){this.isAnalyzingScopeListeners=!0,this.scopeInfoResults=this.memoryAnalysisService.analyzeScopeInfo(),this.sortAndSliceScopeInfoResults(function(e,t){return t.listenerCount-e.listenerCount}),this.scopeListenersAnalyzed=!0,this.isAnalyzingScopeListeners=!1},e.prototype.evictChannelFromMru=function(){var e=this.chatSyncPriorityService.getActiveConversation();if(e){var t=this.settingsService.valueFor(this.constants.settings.names.evictFromDBThresholdInDays)*this.constants.timeInMiliseconds.day+1;this.mruChannelsService.remove(e),this.conversationsStore.patchConversation(e,function(e){return e.markForEviction(t)}),this.logger.info("conversation evicted from MRU: "+e)}},e.prototype.addChannelToMru=function(){var e=this.chatSyncPriorityService.getActiveConversation();e&&(this.mruChannelsService.add(e),this.logger.info("conversation added to MRU: "+e))},e.prototype.cleanupMessageCache=function(){var e=this;this.isCleaningUpMessageCache=!0,this.$timeout(function(){e.messagePrefetchAndCleanupService.cleanupCache(),e.isCleaningUpMessageCache=!1,e.logger.info("Cleaned message cache")},50,!1)},e.prototype.measureMessageVisibilityHeuristics=function(){var e=this;this.messageVisibilityResults=[],this.isMeasuringMessageVisibilityHeuristics=!0,this.$timeout(function(){e.calculateVisibilityMessageHeuristics(),e.isMeasuringMessageVisibilityHeuristics=!1},50,!1)},e.prototype.startEventAnalysis=function(){this.stopEventAnalysisFunc=this.memoryAnalysisService.startAnalysisForEventLeaks(),this.isAnalyzingEventLeaks=!0},e.prototype.stopEventAnalysis=function(){this.stopEventAnalysisFunc&&(this.eventLeakResults=this.stopEventAnalysisFunc()),this.isEventLeaksAnalyzed=!0,this.isAnalyzingEventLeaks=!1,this.stopEventAnalysisFunc=void 0},e.prototype.startEventAnalysisV2=function(){this.stopEventAnalysisV2Func=this.memoryAnalysisService.startAnalysisForEventLeaksV2(),this.isAnalyzingEventLeaksV2=!0},e.prototype.stopEventAnalysisV2=function(){this.stopEventAnalysisV2Func&&(this.detachedDomEventLeakResults=this.stopEventAnalysisV2Func(),_.isEmpty(this.detachedDomEventLeakResults)&&(this.detachedDomEventLeakResults=void 0)),this.isEventLeaksV2Analyzed=!0,this.isAnalyzingEventLeaksV2=!1,this.stopEventAnalysisV2Func=void 0},e.prototype.startScopeAnalysis=function(){this.stopScopeAnalysisFunc=this.memoryAnalysisService.startAnalysisForScopeLeaks(),this.isAnalyzingScopeLeaks=!0},e.prototype.stopScopeAnalysis=function(){this.stopScopeAnalysisFunc&&(this.scopeLeakResults=this.stopScopeAnalysisFunc()),this.isScopeLeaksAnalyzed=!0,this.isAnalyzingScopeLeaks=!1,this.stopScopeAnalysisFunc=void 0},e.prototype.startServiceMemoryAnalysis=function(){this.memoryAnalysisService.calculateTeamsAppModuleMemorySize(!0),this.stopServiceMemoryAnalysisFunc=this.memoryAnalysisService.startAnalysisForServiceLeaks(!this.enableSizeofCounting),this.isAnalyzingServiceMemoryLeaks=!0},e.prototype.stopServiceMemoryAnalysis=function(){this.stopServiceMemoryAnalysisFunc&&(this.serviceLeakResults=this.stopServiceMemoryAnalysisFunc()),this.isServiceLeaksAnalyzed=!0,this.isAnalyzingServiceMemoryLeaks=!1,this.stopServiceMemoryAnalysisFunc=void 0},e.prototype.calculateVisibilityMessageHeuristics=function(){var e=this,t={messageType:"Messages",channel:{visible:0,inVisible:0},chat:{visible:0,inVisible:0}},n={messageType:"Reply Chains",channel:{visible:0,inVisible:0},chat:{visible:0,inVisible:0}},i=this.messageFetchService.replyChainStore;_.mapValues(i.replyChains,function(s,r){var a=e.conversationsService.getConversation(r);if(a){var o=a.type,l=_.sortBy(i.getReplyChainsForLogging(r),"lastMessageTimeUtc"),c=7;"Chat"===o&&(c=20);var h=_.takeRight(l,c),d=l,p="channel";if("Chat"===o&&(p="chat"),0!=d.length){n[p].visible=n[p].visible+c,n[p].inVisible=n[p].inVisible+d.length-c;var u=_.reduce(h,function(e,t){return e+t.messages.length},0),f=_.reduce(d,function(e,t){return e+t.messages.length},0);t[p].visible=t[p].visible+u,t[p].inVisible=t[p].inVisible+f-u}}}),this.messageVisibilityResults.push(t),this.messageVisibilityResults.push(n)},e}();t.MemoryDashboardController=s;var r=function(){return function(){this.controllerAs="mdc",this.controller=s,this.templateUrl="components/perf-dashboard/memory-dashboard.html"}}();t.MemoryDashboardComponent=r,angular.module("teamspace.memoryDashboard",["teamspace.messageFetchService","teamspace.messagePrefetchAndCleanupService","teamspace.objectLeaksDetector","teamspace.eventingService","teamspace.conversationsService"]).component("memoryDashboard",new r).run(["$templateCache",function(e){e.put("components/perf-dashboard/memory-dashboard.html",i)}])},2163:function(e,t){e.exports='<div class="memory-dashboard">\n  <label>Measure memory usage</label>\n  <button ng-click="mdc.measureMemory()" ng-disabled="mdc.isMeasuringMemory">go</button>\n  <label>Measure in-memory message visibility heuristics</label>\n  <button ng-click="mdc.measureMessageVisibilityHeuristics()" ng-disabled="mdc.isMeasuringMessageVisibilityHeuristics">go</button>\n  <br/>\n  <label>Evict channel from MRU</label>\n  <button ng-click="mdc.evictChannelFromMru()">go</button>\n  <br/>\n  <label>Add channel into MRU</label>\n  <button ng-click="mdc.addChannelToMru()">go</button>\n  <br/>\n  <label>Clean message cache</label>\n  <button ng-click="mdc.cleanupMessageCache()" ng-disabled="mdc.isCleaningUpMessageCache">go</button>\n  <br/>\n  <label>Get All Event Listeners</label>\n  <button ng-click="mdc.analyzeEventListeners()" ng-disabled="mdc.isAnalyzingEventListeners">go</button>\n  <br/>\n  <label>Get All scope watchers</label>\n  <button ng-click="mdc.analyzeScopeWatchers()" ng-disabled="mdc.isAnalyzingScopeWatchers">go</button>\n  <br/>\n  <label>Get All scope listeners</label>\n  <button ng-click="mdc.analyzeScopeListeners()" ng-disabled="mdc.isAnalyzingScopeListeners">go</button>\n  <br/>\n  <label>Analyze for event leaks</label>\n  <button ng-click="mdc.startEventAnalysis()" ng-if="!mdc.isAnalyzingEventLeaks">start</button>\n  <button ng-click="mdc.stopEventAnalysis()" ng-if="mdc.isAnalyzingEventLeaks">stop</button>\n  <br/>\n  <label>Analyze for leaks on detached DOM</label>\n  <button ng-click="mdc.startEventAnalysisV2()" ng-if="!mdc.isAnalyzingEventLeaksV2">start</button>\n  <button ng-click="mdc.stopEventAnalysisV2()" ng-if="mdc.isAnalyzingEventLeaksV2">stop</button>\n  <br/>\n  <label>Analyze for scope leaks</label>\n  <button ng-click="mdc.startScopeAnalysis()" ng-if="!mdc.isAnalyzingScopeLeaks">start</button>\n  <button ng-click="mdc.stopScopeAnalysis()" ng-if="mdc.isAnalyzingScopeLeaks">stop</button>\n  <br/>\n  <label>Analyze for service memory leaks</label>\n  <button ng-click="mdc.startServiceMemoryAnalysis()" ng-if="!mdc.isAnalyzingServiceMemoryLeaks">start</button>\n  <button ng-click="mdc.stopServiceMemoryAnalysis()" ng-if="mdc.isAnalyzingServiceMemoryLeaks">stop</button>\n  <br/>\n  <section ng-if="mdc.canGatherLeakedObjects">\n    <label>Gather all leaked objects</label>\n    <button ng-click="mdc.gatherLeakedObjects()">start</button>\n    <br/>\n  </section>\n  <label>Gather reachable objects in MW</label>\n  <button ng-click="mdc.gatherLeakedObjectsFromMW()">start</button>\n  <br/>\n  <label style="font-style: italic">&#x21B3;Detect object size growth</label>\n  <input type="checkbox" ng-model="mdc.enableSizeofCounting" ng-disabled="mdc.isAnalyzingServiceMemoryLeaks"/>\n  <br/>\n  <label>Clear results</label>\n  <button ng-click="mdc.clearResults()">go</button>\n  <br/>\n  <div ng-if="mdc.providerMemoryResults.length > 0 || mdc.scopePerfResults.length > 0 || mdc.rollUpResult.length > 0">\n    <h4>Memory results (Top 10): Check out console for more info.</h4>\n    <br/>\n    <table>\n      <tr>\n        <th>Category</th>\n        <th>Size In MB</th>\n      </tr>\n      <tr ng-repeat="result in mdc.rollUpResult track by result.propertyName" class="analysis-results">\n        <td>{{result.propertyName}}</td>\n        <td>{{result.sizeInMB}}</td>\n      </tr>\n    </table>\n    <br/>\n    <table>\n      <tr>\n        <th>Provider Name</th>\n        <th>Size In MB</th>\n      </tr>\n      <tr ng-repeat="result in mdc.providerMemoryResults" class="analysis-results">\n        <td>{{result.providerName}}</td>\n        <td>{{result.sizeInMB}}</td>\n      </tr>\n    </table>\n    <br/>\n    <table>\n      <tr>\n        <th>ScopeId</th>\n        <th>Size In MB</th>\n      </tr>\n      <tr ng-repeat="result in mdc.scopePerfResults" class="analysis-results">\n        <td>{{result.id}}</td>\n        <td>{{result.sizeInMB}}</td>\n      </tr>\n    </table>\n    <br/>\n    <table>\n      <tr>\n        <th>Property Name</th>\n        <th>Size In MB</th>\n      </tr>\n      <tr ng-repeat="result in mdc.windowResults" class="analysis-results">\n        <td>{{result.propertyName}}</td>\n        <td>{{result.sizeInMB}}</td>\n      </tr>\n    </table>\n  </div>\n\n  <div ng-if="mdc.messageVisibilityResults.length > 0">\n    <h4>Visibility results(in-memory):</h4>\n    <br/>\n    <div ng-repeat="result in mdc.messageVisibilityResults" class="analysis-results">\n      <label>{{result.messageType}} heuristics:</label>\n      <br/>\n      <div class="analysis-result-details">\n        <b>Channel metrics:</b>\n        <br/>\n        <label>Visible</label>: {{result.channel.visible}}\n        <br/>\n        <label>Invisible</label>: {{result.channel.inVisible}}\n        <br/>\n      </div>\n      <div class="analysis-result-details">\n        <b>Chat metrics :</b>\n        <br/>\n        <label>Visible</label>: {{result.chat.visible}}\n        <br/>\n        <label>Invisible</label>: {{result.chat.inVisible}}\n        <br/>\n      </div>\n    </div>\n  </div>\n  <div ng-if="mdc.messageDistributionResults.length > 0">\n    <h4>Message distribution(in-memory)</h4>\n    <br/>\n    <div ng-repeat="result in mdc.messageDistributionResults" class="analysis-results">\n      <label>{{result.contentType}}</label> : {{result.count}}\n      <br/>\n    </div>\n  </div>\n  <div class="memory-results" ng-if="mdc.listenerAnalysisResults.length > 0">\n    <h4>Top 100 DOM nodes with event listeners</h4>\n    <div class="memory-dashboard-tips">\n      <p><b>Tips</b></p>\n      <p>0. Hover over the DOM element below to view details. Click to copy to your clipboard.</p>\n      <p>1. Try out the <a href="https://chrome.google.com/webstore/detail/visual-event/pbmmieigblcbldgdokdjpioljjninaim" target="_blank">View Event</a>        extension for a visual overlay of event listeners</p>\n      <p>2. The full list of listeners can be found in the devtools console.</p>\n      <p>3. For finer grained debugging, you can grab event listeners on a specific DOM node using something like $._data($(\'body\')[0],\'events\').</p>\n    </div>\n    <br/>\n    <div ng-repeat="result in mdc.listenerAnalysisTop100Results" class="analysis-results">\n      <label title="{{result.elementHtml}}\n\n      {{result.eventSummary}}" ng-click="mdc.copyResult(result.elementHtml)">{{::result.elementTag}}</label> ({{::result.listenerCount}}\n      listeners)\n      <br/>\n    </div>\n  </div>\n  <div class="memory-results" ng-if="mdc.leaksByType">\n    <h4>Leaked objects by type:</h4>\n    <br/>\n    <b ng-if="mdc.leaksByType.length === 0">No leaks reported!</b>\n    <div ng-if="mdc.leaksByType.length > 0">\n      <b>Potential leaks detected. Try forcing GC and re-evaluating again. If objects are still listed below, please take a heap snapshot and submit it for analysis.</b>\n      <br/>\n      <div ng-repeat="result in mdc.leaksByType" class="analysis-results">\n        {{::result.type}}: {{::result.count}}<br/>\n      </div>\n    </div>\n  </div>\n  <div class="memory-results-mw" ng-if="mdc.leaksByTypeMW">\n    <h4>MW reachable objects by type:</h4>\n    <h4 ng-if="mdc.leaksByTypeMW === \'loading\'">Loading..</h4>\n    <h4 ng-if="mdc.leaksByTypeMW[0] === \'loadingFailed\'">{{mdc.leaksByTypeMW[1]}}</h4>\n    <div ng-if="mdc.leaksByTypeMW[0] === \'loadingComplete\'">\n      <div ng-if="mdc.leaksByTypeMW[1].length === 0">\n        <b>None.</b>\n      </div>\n      <div ng-if="mdc.leaksByTypeMW[1].length > 0">\n        <div ng-repeat="result in mdc.leaksByTypeMW[1]" class="analysis-results">\n          {{::result.type}}: {{::result.count}}<br/>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class="memory-results" ng-if="mdc.scopeWatchersAnalyzed">\n    <h4>Top 100 scopes (by watcher count)</h4>\n    <div class="memory-dashboard-tips">\n      <p><b>Tips</b></p>\n      <p>0. Don\'t see any results below? This is because scope details are only reported in debug mode. Run the following command\n        in devtools to reload the app in debug mode - <b>angular.reloadWithDebugInfo()</b></p>\n      <p>1. Hover over the scope number below to view xpath. Click the number to copy the xpath to your clipboard.</p>\n      <p>2. Open up dev tools console to view full results</p>\n    </div>\n    <br/>\n    <div ng-repeat="result in mdc.scopeInfoTop100Results" class="analysis-results">\n      <label title="{{result.xpath}}" ng-click="mdc.copyResult(result.xpath)">Scope {{::result.id}}</label> ({{::result.watchCount}}\n      watchers)\n      <br/>\n    </div>\n  </div>\n  <div class="memory-results" ng-if="mdc.scopeListenersAnalyzed">\n    <h4>Top 100 scopes (by listener count)</h4>\n    <div class="memory-dashboard-tips">\n      <p><b>Tips</b></p>\n      <p>0. Don\'t see any results below? This is because scope details are only reported in debug mode. Run the following command\n        in devtools to reload the app in debug mode - <b>angular.reloadWithDebugInfo()</b></p>\n      <p>1. Hover over the scope number below to view xpath. Click the number to copy the xpath to your clipboard.</p>\n      <p>2. Open up dev tools console to view full results</p>\n    </div>\n    <br/>\n    <div ng-repeat="result in mdc.scopeInfoTop100Results" class="analysis-results">\n      <label title="{{result.xpath}}\n\n      {{result.listenerSummary}}" ng-click="mdc.copyResult(result.xpath)">Scope {{::result.id}}</label> ({{::result.listenerCount}}\n      listeners)\n      <br/>\n    </div>\n  </div>\n  <div class="memory-dashboard-tips" ng-if="mdc.isAnalyzingEventLeaks || mdc.isAnalyzingScopeLeaks || mdc.isAnalyzingServiceMemoryLeaks">\n    <p><b>Tips for leak analysis.</b></p>\n    <p>0. Make sure that the app is in a stable state after startup.</p>\n    <p>1. Make sure the start and stop points of your scenario have the same exact DOM/state.</p>\n    <p>2. View console log for leak results</p>\n    <p ng-if="mdc.isAnalyzingScopeLeaks">Don\'t see any results below? This is because scope details are only reported in debug mode. Run the following command\n      in devtools to reload the app in debug mode - <b>angular.reloadWithDebugInfo()</b></p>\n    <p ng-if="mdc.isAnalyzingServiceMemoryLeaks">This tool takes a while to run, and can freeze up the ui when it is analyzing for service leaks. Check the f12 logs for progress.\n    </p>\n  </div>\n  <div class="memory-results" ng-if="mdc.isEventLeaksAnalyzed">\n    <div ng-if="mdc.eventLeakResults.length > 0">Leaks found!</div>\n    <div ng-if="mdc.eventLeakResults.length === 0">No leaks found!</div>\n    <div ng-repeat="result in mdc.eventLeakResults" class="analysis-results">\n      <label title="{{result.xpath}}\n\n          Before:{{result.listenerSummaryBefore}}\n          After:{{result.listenerSummaryAfter}}" ng-click="mdc.copyResult(result.xpath)">Tag Name {{::result.elementTag}}</label> ({{::result.listenerCountDiff}}\n      listeners)\n      <br/>\n    </div>\n  </div>\n  <div class="memory-results" ng-if="mdc.isEventLeaksV2Analyzed">\n    <div ng-if="mdc.detachedDomEventLeakResults">Leaks found on some detached nodes!</div>\n    <div ng-if="!mdc.detachedDomEventLeakResults">No leaks found!</div>\n    <div ng-repeat="(key, value) in mdc.detachedDomEventLeakResults" class="analysis-results">\n      <label ng-click="mdc.copyResult(value)">{{key}} &nbsp; Elements leaking {{::value.length}}</label>\n      <br/>\n    </div>\n  </div>\n  <div class="memory-results" ng-if="mdc.isScopeLeaksAnalyzed">\n    <div ng-if="mdc.scopeLeakResults.length > 0">Leaks found!</div>\n    <div ng-if="mdc.scopeLeakResults.length === 0">No leaks found!</div>\n    <div ng-repeat="result in mdc.scopeLeakResults" class="analysis-results">\n      <label title="{{result.xpath}}\n\n            Before:{{result.listenerSummaryBefore}}\n            After:{{result.listenerSummaryAfter}}" ng-click="mdc.copyResult(result.xpath)">Scope {{::result.id}}</label> ({{::result.listenerCountDiff}}\n      listeners)\n      <br/>\n    </div>\n  </div>\n  <div class="memory-results" ng-if="mdc.isServiceLeaksAnalyzed">\n    <div ng-if="mdc.serviceLeakResults.length > 0">Leaks found!</div>\n    <div ng-if="mdc.serviceLeakResults.length === 0">No leaks found!</div>\n    <div ng-repeat="result in mdc.serviceLeakResults" class="analysis-results">\n      <label title="{{result.providerName}}\n\n              Before:{{result.sizeInMBBefore}}\n              After:{{result.sizeInMBAfter}}\n              Listeners:{{result.subscriptionCountDiff.length}}" ng-click="mdc.copyResult(result.provider)">Service {{::result.providerName}}</label> ({{::result.sizeInMBDiff}}MB\n      listeners:{{result.subscriptionCountDiff.length}})\n      <br/>\n    </div>\n  </div>\n</div>'},2164:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(2165),s=function(){function e(e,t,n,i,s,r,a){this.conversationsStore=e,this.chatSyncService=t,this.chatSyncPriorityService=n,this.syncStateService=s,this.resourceManager=r,this.appStateService=a,this.nDayRetention=1,this.logger=i.newLogger("SyncDashboard")}return e.$inject=["conversationsStore","chatSyncService","chatSyncPriorityService","loggingService","syncStateService","resourceManager","appStateService"],e.prototype.setRetentionHorizonToNDayBack=function(){if(!(_.isNaN(this.nDayRetention)||this.nDayRetention<1||this.nDayRetention>365)){var e=this.chatSyncPriorityService.getActiveConversation(),t=new Date;t.setDate(t.getDate()-this.nDayRetention),e&&(this.conversationsStore.patchConversation(e,function(e){e.threadProperties.retentionHorizon=t.getTime(),e.threadProperties.retentionHorizonV2=t.getTime()}),this.logger.info("Retention Horizon for conversation "+e+" set to "+t.getTime()))}},e.prototype.schedulePersistencePruningJob=function(){var e=this;this.isPruningPersistence=!0,this.chatSyncService.schedulePersistencePruning(!0).catch(function(t){e.logger.error("Persistence pruning failed with message "+t)}).finally(function(){e.isPruningPersistence=!1,e.logger.info("Scheduled persistence pruning job")})},e.prototype.stopLongPoll=function(){this.appStateService.setMachineState(teamspace.services.MachineState.MachineLocked,"sync-dashboard")},e.prototype.startLongPoll=function(){this.appStateService.setMachineState(teamspace.services.MachineState.MachineActive,"sync-dashboard")},e.prototype.triggerDeltaSync=function(){this.chatSyncService.syncScheduler._activeStrategy.sync({force:!1,retryOnFailure:!0})},e.prototype.syncStateDifference=function(){var e=this.syncStateService,t=e.getSyncStateDifference(e._syncStateMap[this.chatSyncPriorityService.getActiveConversation()]);this.logger.info(JSON.stringify(t))},e.prototype.dumpRMTaskQueue=function(){this.logger.info(JSON.stringify(this.resourceManager.getTasksDumpForTesting()))},e}();t.SyncDashboardController=s;var r=function(){return function(){this.controllerAs="sdc",this.controller=s,this.templateUrl="components/perf-dashboard/sync-dashboard.html"}}();t.SyncDashboardComponent=r,angular.module("teamspace.syncDashboard",["teamspace.messageService","teamspace.objectLeaksDetector","teamspace.conversationsService","skypeX.myUserPreferencesStore","skypeX.sxConfig"]).component("syncDashboard",new r).run(["$templateCache",function(e){e.put("components/perf-dashboard/sync-dashboard.html",i)}])},2165:function(e,t){e.exports='<div class="sync-dashboard">\n  <label>\n    Set <input sanitized type="number" ng-model="sdc.nDayRetention" value="1" min="1" max="365"/> day Retention Horizon on active Conversation\n    <button ng-click="sdc.setRetentionHorizonToNDayBack()">go</button>\n  </label>\n  <br/>\n  <label>Schedule persistence pruning job</label>\n  <button ng-click="sdc.schedulePersistencePruningJob()" ng-disabled="sdc.isPruningPersistence">go</button>\n  <br/>\n  <label>Set machine locked to kill longpoll</label>\n  <button ng-click="sdc.stopLongPoll()" ng-disabled="sdc.isPruningPersistence">go</button>\n  <br/>\n  <label>Set machine active to start longpoll</label>\n  <button ng-click="sdc.startLongPoll()" ng-disabled="sdc.isPruningPersistence">go</button>\n  <br/>\n  <label>Schedule Delta Sync</label>\n  <button ng-click="sdc.triggerDeltaSync()" ng-disabled="sdc.isPruningPersistence">go</button>\n  <br/>\n  <label>Dump sync state difference</label>\n  <button ng-click="sdc.syncStateDifference()" ng-disabled="sdc.isPruningPersistence">go</button>\n  <br/>\n  <label>Dump resource manager task queue</label>\n  <button ng-click="sdc.dumpRMTaskQueue()" ng-disabled="sdc.isPruningPersistence">go</button>\n  <br/>\n</div>'},2166:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(2167),s=function(){function e(e,t,n,i){this.objectLeaksDetector=e,this.$window=i,this.canGatherLeakedObjects=e.isEnabled(),this.canShowLiveSlimcoreObjects=t.isSlimCoreAvailable()&&!!i.SlimCore.getInstanceCounts,this.logger=n.newLogger("calling-perf-dashboard")}return e.$inject=["objectLeaksDetector","desktopUtilityService","loggingService","$window"],e.prototype.gatherLiveSlimcoreObjects=function(){try{var e=this.$window.SlimCore.getInstanceCounts();this.slimcoreInstances=Object.keys(e).map(function(t){return{type:t,count:e[t]}}).filter(function(e){return e.count>0})}catch(e){this.logger.error("Failed to gather live slimcore objects: "+e)}},e.prototype.gatherLeakedObjects=function(){var e=this.objectLeaksDetector.getAllLeaks();this.leaksByType=Object.keys(e).map(function(t){return{type:t,count:e[t].length}})},e.prototype.clearResults=function(){this.leaksByType=void 0,this.slimcoreInstances=void 0},e}();t.CallingPerfDashboardController=s,angular.module("teamspace.callingPerfDashboard",["teamspace.objectLeaksDetector","teamspace.desktopUtilityService","teamspace.loggingService"]).directive("callingPerfDashboard",function(){return{restrict:"E",controllerAs:"callingPerfDashboardCtrl",controller:s,templateUrl:"components/perf-dashboard/calling-perf-dashboard.html"}}).run(["$templateCache",function(e){e.put("components/perf-dashboard/calling-perf-dashboard.html",i)}])},2167:function(e,t){e.exports='<div class="memory-dashboard">\n  <h1>Calling Performance</h1>\n  <section ng-if="callingPerfDashboardCtrl.canGatherLeakedObjects">\n    <label>Gather all leaked objects</label>\n    <button ng-click="callingPerfDashboardCtrl.gatherLeakedObjects()">start</button>\n    <br/>\n  </section>\n  <section ng-if="callingPerfDashboardCtrl.canShowLiveSlimcoreObjects">\n    <label>Gather all slimcore live objects</label>\n    <button ng-click="callingPerfDashboardCtrl.gatherLiveSlimcoreObjects()">start</button>\n    <br/>\n  </section>\n  <label>Clear results</label>\n  <button ng-click="callingPerfDashboardCtrl.clearResults()">go</button>\n  <br/>\n  <div class="memory-results" ng-if="callingPerfDashboardCtrl.leaksByType">\n    <h4>Leaked objects by type:</h4>\n    <br/>\n    <b ng-if="callingPerfDashboardCtrl.leaksByType.length === 0">No leaks reported!</b>\n    <div ng-if="callingPerfDashboardCtrl.leaksByType.length > 0">\n      <b>Potential leaks detected. Try forcing GC and re-evaluating again. If objects are still listed below, please take\n        a heap snapshot and submit it for analysis.</b>\n      <br/>\n      <div ng-repeat="result in callingPerfDashboardCtrl.leaksByType" class="analysis-results">\n        {{::result.type}}: {{::result.count}}<br/>\n      </div>\n    </div>\n  </div>\n  <div class="memory-results" ng-if="callingPerfDashboardCtrl.slimcoreInstances">\n    <h4>Slimcore Live objects:</h4>\n    <br/>\n    <b ng-if="callingPerfDashboardCtrl.slimcoreInstances.length === 0">No slimcore live objects!</b>\n    <div ng-if="callingPerfDashboardCtrl.slimcoreInstances.length > 0">\n      <div ng-repeat="result in callingPerfDashboardCtrl.slimcoreInstances" class="analysis-results">\n        {{::result.type}}: {{::result.count}}<br/>\n      </div>\n    </div>\n  </div>\n</div>'},2168:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(2169),s=function(){function e(e,t,n){this.$interval=e,this.$injector=t}return e.$inject=["$interval","$injector","$rootScope"],e.prototype.loadDataLayerPerf=function(e){return e.get("perfStatsNotifier")},e.prototype.sumValues=function(e){return _.reduce(e,function(e,t){return t.requests+e},0)},e.prototype.isObjectEmpty=function(e){return _.isEmpty(e)},e.prototype.startMonitoring=function(){var e=this,t=function(){e.perfStatsNotifier.start(),e.isCollectingData=!0};this.perfStatsNotifier?t():(this.perfStatsNotifier=this.loadDataLayerPerf(this.$injector),t())},e.prototype.stopMonitoring=function(){this.perfStatsNotifier&&this.perfStatsNotifier.stop(!1),this.$interval.cancel(this.noisiestRendererInterval),this.isCollectingData=!1},e.prototype.prettifyOperationType=function(e){return e.charAt(0).toUpperCase()+e.slice(1)},Object.defineProperty(e.prototype,"mostRecentOperation",{get:function(){return this.perfStatsNotifier?this.perfStatsNotifier.getMostRecentOperation():null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"processingRequests",{get:function(){return this.perfStatsNotifier?this.perfStatsNotifier.getProcessingRequests():null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"childWindowStats",{get:function(){return this.perfStatsNotifier?this.perfStatsNotifier.getChildWindowStats():null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"noisiestRendererId",{get:function(){return this.perfStatsNotifier?this.perfStatsNotifier.getNoisiestRendererId():null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"noisiestRendererStats",{get:function(){return this.perfStatsNotifier?this.perfStatsNotifier.getChildWindowStats[this.perfStatsNotifier.getNoisiestRendererId()]:null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"requestSizeTotal",{get:function(){return this.perfStatsNotifier?this.perfStatsNotifier.getRequestSizeTotal():null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"requestCount",{get:function(){return this.perfStatsNotifier?this.perfStatsNotifier.getRequestCount():null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"responseSizeTotal",{get:function(){return this.perfStatsNotifier?this.perfStatsNotifier.getResponseSizeTotal():null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"responseCount",{get:function(){return this.perfStatsNotifier?this.perfStatsNotifier.getResponseCount():null},enumerable:!0,configurable:!0}),e}();t.DataLayerDashboardController=s,angular.module("teamspace.datalayerDashboard",[]).component("datalayerDashboard",{controller:s,controllerAs:"dldc",templateUrl:"components/perf-dashboard/datalayer-dashboard.html"}).run(["$templateCache",function(e){e.put("components/perf-dashboard/datalayer-dashboard.html",i)}])},2169:function(e,t){e.exports='<div class="datalayer-dashboard">\n  <button ng-if="dldc.isCollectingData" ng-click="dldc.stopMonitoring()" title="Stop monitoring of multiwindow stats">Stop</button>\n  <button ng-if="!dldc.isCollectingData" ng-click="dldc.startMonitoring()" title="Start monitoring of multiwindow stats">Start</button>\n  <div>\n    <div ng-repeat="(windowId, stats) in dldc.childWindowStats">\n      <h4>{{windowId}}</h4>\n      <div ng-repeat="(operationType, statsForOpType) in stats.operations">\n        <h5>{{operationType}}:  {{dldc.sumValues(statsForOpType)}}</h5>\n        <div ng-repeat="(operationName, statsForOpName) in statsForOpType">\n          <p>{{operationName}}: Req: {{statsForOpName.requests}}, Res: {{statsForOpName.responses}}</p>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div ng-if="!dldc.isObjectEmpty(dldc.processingRequests)" class="processing-requests">\n    <h2>\n      Currently Processing:\n    </h2>\n    <div ng-repeat="(rendererId, stats) in dldc.processingRequests">\n        <p>{{rendererId}}</p>\n      <div class="processing-requests-operation" ng-repeat="(operationType, processingStats) in stats.operations">\n        <p class="processing-requests-type">{{operationType}}: {{dldc.sumValues(processingStats)}}</p>\n        <div class="indented-value" ng-repeat="(operationName, statsForOpName) in processingStats">\n            <p>{{operationName}}: Req: ({{statsForOpName.requests}}, Res: {{statsForOpName.responses}})</p>\n        </div>\n      </div>\n    </div>\n    <br/>\n  </div>\n  <div ng-if="dldc.mostRecentOperation !== undefined" class="most-recent-operation">\n    <h2>\n      Most recent operation:\n    </h2>\n    <table>\n      <tr>\n        <th class="recent-operation-header">Type</th>\n        <td>{{mostRecentOperation.operationType}}</td>\n      </tr>\n      <tr>\n        <th class="recent-operation-header">Name</th>\n        <td>{{dldc.mostRecentOperation.operationName}}</td>\n      </tr>\n      <tr>\n        <th class="recent-operation-header">Time</th>\n        <td>{{dldc.mostRecentOperation.responseTime}} ms</td>\n      </tr>\n      <tr>\n        <th class="recent-operation-header">Renderer</th>\n        <td>{{dldc.mostRecentOperation.rendererId}}</td>\n      </tr>\n      <tr>\n        <th class="recent-operation-header">Response Size</th>\n        <td>{{dldc.mostRecentOperation.responseSize}} bytes</td>\n      </tr>\n    </table>\n  <br/>\n  </div>\n  <div ng-if="dldc.noisiestRendererId.length > 0" class="child-window-stats">\n    <h2>\n      Noisiest Renderer:\n    </h2>\n    <p class="child-window-renderer">{{dldc.noisiestRendererId}}</p>\n    <div ng-repeat="(operationType, operationsByName) in dldc.noisiestRendererStats.operations">\n      {{operationType}}: {{dldc.sumValues(operationsByName)}}\n      <div ng-repeat="(operationName, count) in operationsByName track by operationName+count" class="indented-value">\n        <p>{{operationName}} ({{count}})</p>\n      </div>\n    </div>\n    <br/>\n  </div>\n  <div ng-if="dldc.requestCount > 0">\n    <h3>\n      Average Request Size\n    </h3>\n    {{dldc.requestSizeTotal / dldc.requestCount}} bytes\n  </div>\n  <div ng-if="dldc.responseCount > 0">\n    <h3>\n      Average Response Size\n    </h3>\n    {{dldc.responseSizeTotal / dldc.responseCount}} bytes\n  </div>\n</div>'},2170:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(2171),s=function(){function e(e,t){this.webClientDataLayerWorkerService=e,this.logger=t.newLogger("WorkerDashboard")}return e.$inject=["webClientDataLayerWorkerService","loggingService"],e.prototype.startWorkflow=function(){var e=this;if(this.selectedWorkflow&&this.workflowParams){var t={};try{t=JSON.parse(this.workflowParams)}catch(e){return void this.logger.error("Cannot start workflow - params passed in not JSON: "+e)}this.logger.debug("Starting Worfklow "+this.selectedWorkflow+" with params "+JSON.stringify(t)+" "),this.isWorkflowRunning=!0,this.webClientDataLayerWorkerService.getCdlSyncEngineClient().then(function(n){n.sendRequest({type:"start_workflow",subType:e.selectedWorkflow,params:t}).catch(function(t){var n="Unable to start workflow in CDL worker, error message: "+t.response;e.logger.error(n),e.isWorkflowRunning=!1}).then(function(){e.isWorkflowRunning=!1})}).catch(function(t){e.logger.error("Unable to get the CDL Sync Engine Client, error message: "+t.message),e.isWorkflowRunning=!1})}else this.logger.error("Cannot start workflow - Empty params")},e}();t.WorkerDashboardController=s,angular.module("teamspace.WorkerDashboard",["teamsDataLayer.webClientDataLayerWorkerService","teamspace.loggingService"]).component("workerDashboard",{controller:s,controllerAs:"wdc",templateUrl:"components/perf-dashboard/worker-dashboard.html"}).run(["$templateCache",function(e){e.put("components/perf-dashboard/worker-dashboard.html",i)}])},2171:function(e,t){e.exports='<div class="worker-dashboard">\n    <label>Start a Workflow: </label>\n    <select ng-model="wdc.selectedWorkflow">\n      <option value="">-- Select a workflow to start --</option>\n      <option value="MaintenanceWorkflow">-- Maintenance Workflow --</option>\n      <option value="DeltaSyncWorkflow">-- Delta Sync Workflow --</option>\n      <option value="ConversationSyncWorkflow">-- Conversation Sync Workflow --</option>\n      <option value="MessageSyncWorkflow">-- Message Sync Workflow --</option>\n      <option value="RelatedMessageSyncWorkflow">-- Related Message Sync Workflow --</option>\n      <option value="ThreadDetailsWorkflow">-- Thread Deatails Workflow --</option>\n      <option value="ExtendHistoryWorkflow">-- Extend History Workflow --</option>\n    </select>\n    <br/>\n    <label>Workflow Params (JSON)</label>\n    <br/>\n    <textarea sanitized ng-model="wdc.workflowParams" rows="4" cols="5" placeholder="{ \'conversationId\': \'12345\' }"></textarea>\n    <br/>\n    <button ng-click="wdc.startWorkflow()" ng-class="wdc.isWorkflowRunning ? \'on\' : \'off\'" ng-disabled="wdc.isWorkflowRunning">start</button>\n</div>'},2172:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(2173),s=n(2174),r=n(2175),a=n(2176),o=n(2177),l=n(303),c=n(304),h=n(305),d=n(306),p=function(){function e(e,t,n){this.constants=e,this.utilityService=t,this.$timeout=n,this.isProfilerStarted=!1,this.isProfilerReportShown=!1;var i=t.getQueryStringByName(e.DevDebugPanel.queryParam,null);this.isProfilerStarted=i===teamspace.components.DebugPanelState.PerfProfilerWithAutoStart.toString(),this.profilerStartTime=0,this.isProfilerStarted&&this.startProfiler()}return e.$inject=["constants","utilityService","$timeout"],e.prototype.startProfiler=function(){this.isProfilerStarted=!0,this.profilerStartTime=window.performance.now(),this.toggleProfilerReport(!1),this.configureAutoStop(),this.startIndexedDbUsageProxy(),window.perfProfiler.startRecording()},e.prototype.stopProfiler=function(){this.isProfilerStarted=!1,this.clearIndexedDbUsageProxy(),this.stopTimerPromise&&(window.perfProfiler.stopRecording(),this.stopTimerPromise=null,this.$timeout.cancel(this.stopTimerPromise))},e.prototype.exitProfiler=function(){var e=window.location.href.replace(this.constants.DevDebugPanel.dashboardSetting,""),t=this.utilityService.removeFromQueryString(e,this.constants.DevDebugPanel.queryParam);window.location.href=t},e.prototype.toggleProfilerReport=function(e){this.isProfilerReportShown=e},e.prototype.configureAutoStop=function(){var e=this;this.stopTimerPromise&&(this.stopTimerPromise=null,this.$timeout.cancel(this.stopTimerPromise)),this.stopTimerPromise=this.$timeout(function(){e.stopTimerPromise=null,e.stopProfiler()},this.constants.timeInMiliseconds.twoMinutes,!0)},e.prototype.startIndexedDbUsageProxy=function(){var e=angular.element("html").injector().get("heartbeatService"),t=e.updateIndexedDbStatistics;e.updateIndexedDbStatistics=function(e,n,i,s,r,a){t.apply(this,[e,n,i,s,r,a]);var o=i||"unknown",l=window.perfProfiler.getCurrentRecord();l.indexedDbStores[o]||(l.indexedDbStores[o]=[]);var c={type:e?"write":"read",duration:Math.round(s),timeStamp:Math.round(window.performance.now())};l.indexedDbStores[o].push(c)},this.originalUpdateIndexedDb=t},e.prototype.clearIndexedDbUsageProxy=function(){this.originalUpdateIndexedDb&&(angular.element("html").injector().get("heartbeatService").updateIndexedDbStatistics=this.originalUpdateIndexedDb)},e}();t.PerfProfilerController=p,angular.module("teamspace.perfProfiler",[]).directive("perfProfiler",function(){return{restrict:"E",controllerAs:"perfProfilerCtrl",controller:p,templateUrl:"components/perf-profiler/perf-profiler.html"}}).directive("perfProfilerReport",function(){return{restrict:"E",controllerAs:"perfProfilerReportCtrl",controller:l.PerfProfilerReportController,templateUrl:"components/perf-profiler/perf-profiler-report.html",scope:{},bindToController:{toggleReport:"&"}}}).directive("perfProfilerHeatmap",function(){return{restrict:"E",controllerAs:"perfProfilerHeatmapCtrl",controller:c.PerfProfilerHeatmapController,templateUrl:"components/perf-profiler/perf-profiler-heatmap.html",link:function(e,t,n,i){i.displayHeatMap()},scope:{setStart:"&",setStop:"&"}}}).directive("perfProfilerSummary",function(){return{restrict:"E",controllerAs:"perfProfilerSummaryCtrl",controller:h.PerfProfilerSummaryController,templateUrl:"components/perf-profiler/perf-profiler-summary.html",scope:{},bindToController:{setUpdateSummary:"&"}}}).directive("perfProfilerTimeline",function(){return{restrict:"E",controllerAs:"perfProfilerTimelineCtrl",controller:d.PerfProfilerTimelineController,templateUrl:"components/perf-profiler/perf-profiler-timeline.html",scope:{},bindToController:{setUpdateTimeline:"&"}}}).directive("perfProfileTimer",function(){return{restrict:"A",link:function(e,t,n){var i=parseInt(n.perfProfileStart),s=setInterval(function(){requestAnimationFrame(function(){t.text(Math.ceil((performance.now()-i)/1e3)+" secs")})},1e3);e.$on("$destroy",function(){s&&(clearInterval(s),s=null)})}}}).run(["$templateCache",function(e){e.put("components/perf-profiler/perf-profiler.html",i),e.put("components/perf-profiler/perf-profiler-report.html",s),e.put("components/perf-profiler/perf-profiler-heatmap.html",r),e.put("components/perf-profiler/perf-profiler-summary.html",a),e.put("components/perf-profiler/perf-profiler-timeline.html",o)}])},2173:function(e,t){e.exports='<section class="perf-profiler-panel">\n  <h2>Responsiveness Profiler</h2>\n  <div class="actions">\n    <button class="start" ng-disabled="perfProfilerCtrl.isProfilerStarted" ng-click="perfProfilerCtrl.startProfiler()">Start</button>\n    <button class="end" ng-disabled="!perfProfilerCtrl.isProfilerStarted" ng-click="perfProfilerCtrl.stopProfiler()">Stop</button>\n  </div>\n  <div class="middle-panel">\n    <div class="recording" ng-if="perfProfilerCtrl.isProfilerStarted">\n      <div>\n        <div class="recording-icon">\n          <div></div><div></div>\n          <span class="timer" perf-profile-timer perf-profile-start="{{perfProfilerCtrl.profilerStartTime}}"></span>\n        </div>\n      </div>\n    </div>\n    <div class="view-profile" ng-if="!perfProfilerCtrl.isProfilerStarted">\n      <span class="view" ng-click="perfProfilerCtrl.toggleProfilerReport(true)" title="View Report">View Report</span>\n    </div>\n  </div>\n  <div class="info">\n     <span ng-if="perfProfilerCtrl.isProfilerStarted">Click Stop to end profiling and view the report.</span>\n     <span ng-if="!perfProfilerCtrl.isProfilerStarted">Click Start and browse the scenerios you want to profile.</span>\n  </div>\n  <button class="exit" ng-click="perfProfilerCtrl.exitProfiler()">Exit</button>\n  <perf-profiler-report ng-if="perfProfilerCtrl.isProfilerReportShown" toggle-report="perfProfilerCtrl.toggleProfilerReport(value)"></perf-profiler-report>\n</section>'},2174:function(e,t){e.exports='<div class="perf-profiler-report-panel">\n  <div class="close-report" ng-click="perfProfilerReportCtrl.toggleReport({value: false})">X</div>\n  <div ng-if="::perfProfilerReportCtrl.isEmptyReport">No Data. Click start the begin profiling the Application.</div>\n  <div ng-if="::!perfProfilerReportCtrl.isEmptyReport">\n    <perf-profiler-heatmap set-start="perfProfilerReportCtrl.setStart(value)" set-stop="perfProfilerReportCtrl.setStop(value)"></perf-profiler-heatmap>\n    <div class="clearfix">\n      <div class="options">\n        <span ng-class="{\'active\':perfProfilerReportCtrl.isSummaryVisible}" ng-click="perfProfilerReportCtrl.isSummaryVisible=true" class="headline">Summary</span>\n        &nbsp;&nbsp;|&nbsp;&nbsp;\n        <span ng-class="{\'active\':!perfProfilerReportCtrl.isSummaryVisible}" ng-click="perfProfilerReportCtrl.isSummaryVisible=false" class="headline">Timeline</span>\n      </div>\n      <div class="selected-times">\n        <div>Start:&nbsp;{{(perfProfilerReportCtrl.startValue || perfProfilerReportCtrl.dataStart) / 1000}}s</div>\n        <div>End:&nbsp;&nbsp;{{(perfProfilerReportCtrl.stopValue || perfProfilerReportCtrl.dataEnd) / 1000}}s</div>\n      </div>\n    </div>\n    <perf-profiler-summary ng-if="perfProfilerReportCtrl.isSummaryVisible" set-update-summary="perfProfilerReportCtrl.setUpdateSummary(cb)"></perf-profiler-summary>\n    <perf-profiler-timeline ng-if="!perfProfilerReportCtrl.isSummaryVisible" set-update-timeline="perfProfilerReportCtrl.setUpdateTimeline(cb)"></perf-profiler-timeline>\n  </div>\n</div>'},2175:function(e,t){e.exports='<section class="perf-heatmap-panel">\n  <h2>Responsiveness Heatmap</h2>\n  <button ng-show="perfProfilerHeatmapCtrl.curStart || perfProfilerHeatmapCtrl.curStop" ng-click="perfProfilerHeatmapCtrl.clearSelection()">Clear Selection</button>\n  <div id="perf-profiler-heatmap"></div>\n</section>\n'},2176:function(e,t){e.exports='<div class="perf-profiler-summary-panel">\n  <section class="loading" ng-if="perfProfilerSummaryCtrl.isLoading">Processing...</section>\n  <section ng-if="!perfProfilerSummaryCtrl.isLoading">\n    <h3>Application</h3>\n    <div class="clearfix">\n      <div class="summary-item" ng-if="::perfProfilerSummaryCtrl.profileSummary.digests.totalDuration > 0">\n        <div class="metric">Digests</div>\n        <div class="value">\n          <div class="time">{{::perfProfilerSummaryCtrl.profileSummary.digests.totalDuration}}ms</div>\n          <div class="count">({{::perfProfilerSummaryCtrl.profileSummary.digests.count}})</div>\n        </div>\n      </div>\n      <div class="summary-item" ng-if="::perfProfilerSummaryCtrl.profileSummary.xhr.count > 0">\n        <div class="metric">Network</div>\n        <div class="value">\n            <div class="time">{{::perfProfilerSummaryCtrl.profileSummary.xhr.count}}</div>\n          </div>\n      </div>\n      <div class="summary-item" ng-if="::perfProfilerSummaryCtrl.profileSummary.domManipulations.totalDuration > 0">\n        <div class="metric">Dom Manipulations</div>\n        <div class="value">\n            <div class="time">{{::perfProfilerSummaryCtrl.profileSummary.domManipulations.totalDuration}}ms</div>\n            <div class="count">({{::perfProfilerSummaryCtrl.profileSummary.domManipulations.count}})</div>\n        </div>\n      </div>\n    </div>\n    <h3>IndexDB</h3>\n    <div class="clearfix">\n      <div ng-repeat="(store, summary) in ::perfProfilerSummaryCtrl.profileSummary.indexDb">\n        <div class="summary-item" ng-if="::summary.reads.totalDuration > 0">\n          <div class="metric">{{::store.charAt(0).toUpperCase() + store.substr(1).toLowerCase()}} (R)</div>\n          <div class="value">\n              <div class="time">{{::summary.reads.totalDuration}}ms</div>\n              <div class="count">({{::summary.reads.count}})</div>\n          </div>\n        </div>\n        <div class="summary-item" ng-if="::summary.writes.totalDuration > 0">\n          <div class="metric">{{::store.charAt(0).toUpperCase() + store.substr(1).toLowerCase()}} (W)</div>\n          <div class="value">\n              <div class="time">{{::summary.writes.totalDuration}}ms</div>\n              <div class="count">({{::summary.writes.count}})</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </section>\n</div>'},2177:function(e,t){e.exports='<section class="perf-profiler-timeline-panel">\n  <section class="loading" ng-if="perfProfilerTimelineCtrl.isLoading">Processing...</section>\n  <section ng-if="!perfProfilerTimelineCtrl.isLoading">\n    <ul class="timeline-block {{::\'bgcolor\' + ($index % 3)}} {{::\'raf\' + timelineItem.raf}}" ng-repeat="timelineItem in perfProfilerTimelineCtrl.timelineItems">\n        <div class="slot">{{::timelineItem.timeSlot}}s</div>\n        <div class="bar"></div>\n        <li class="timeline-item {{::timelineItem.type}}" ng-repeat="event in ::timelineItem.events">\n            <span class="timestamp" ng-hide="{{::event.type === \'dom\'}}">{{::event.timeStamp}}</span>\n            <span class="metric-desc" title="{{::event.tooltip}}">{{::event.description}}</span>\n        </li>\n    </ul>\n  </section>\n</section>'},303:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){this.isSummaryVisible=!0;var e=window.perfProfiler.getAllRecords(),t=_.keys(e);this.dataStart=parseInt(t[0]),this.dataEnd=parseInt(t[t.length-1]),this.isEmptyReport=0===t.length}return e.prototype.setStart=function(e){this.startValue=e},e.prototype.setStop=function(e){this.stopValue=e,this.updateSummary&&this.updateSummary(this.startValue,this.stopValue),this.updateTimeline&&this.updateTimeline(this.startValue,this.stopValue)},e.prototype.setUpdateSummary=function(e){this.updateSummary=e,e&&e(this.startValue,this.stopValue)},e.prototype.setUpdateTimeline=function(e){this.updateTimeline=e,e&&e(this.startValue,this.stopValue)},e}();t.PerfProfilerReportController=i},304:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){var n=this;this.$scope=e,this.constants=t,this.colors=["#F44336","#F44336","#E6D12C","#E6D12C","#4CAF50","#4CAF50"],this.window=window,e.$on("$destroy",function(){n.prevStartEl=null,n.prevStopEl=null})}return e.$inject=["$scope","constants"],e.prototype.setHeatMapSelection=function(e,t){void 0===this.curStart?(this.curStart=e,this.styleStartBlock(t)):void 0===this.curStop&&e>this.curStart?(this.curStop=e,this.styleStopBlock(t)):(this.curStart=e,this.curStop=void 0,this.styleStartBlock(t),this.styleStopBlock(t)),this.$scope.setStart({value:this.curStart}),this.$scope.setStop({value:this.curStop}),this.$scope.$apply()},e.prototype.styleStartBlock=function(e){this.prevStartEl&&this.prevStartEl.classList.remove("active"),e.classList.add("active"),this.prevStartEl=e},e.prototype.styleStopBlock=function(e){this.prevStopEl&&this.prevStopEl!==this.prevStartEl&&this.prevStopEl.classList.remove("active"),this.curStop&&(e.classList.add("active"),this.prevStopEl=e)},e.prototype.displayHeatMap=function(){var e=this,t=window.perfProfiler,n=t?t.getAllRecords():void 0;if(n){for(var i=document.createDocumentFragment(),s=_.keys(n),r=parseInt(s[0]),a=parseInt(s[s.length-1]);r<=a;)$(i).append('<div id="hm_'+r+'"\n                                data-key="'+r+'"\n                                class="heat-map-element"\n                                style="background-color:'+this.getBgColor(n[r]&&n[r].raf||0)+';">\n                              <span data-key="'+r+'">'+(n[r]&&n[r].raf||0)+'</span>\n                              <div data-key="'+r+'" class="timestamp">\n                                '+r/1e3+"\n                              </div>\n                            </div>"),r+=100;this.htmlContent=i}else this.htmlContent=null;var o=$("#perf-profiler-heatmap");o[0].appendChild(this.htmlContent),teamspace.common.SafeJQuery.on(this.$scope,o,this.constants.events.jQuery.click,function(t){var n=parseInt(t.target.getAttribute("data-key")),i=document.getElementById("hm_"+n);_.isNumber(n)?e.setHeatMapSelection(n,i):console.error("Selected cell has invalid time-slot",t)})},e.prototype.clearSelection=function(){this.prevStartEl&&this.prevStartEl.classList.remove("active"),this.prevStopEl&&this.prevStopEl.classList.remove("active"),this.curStart=void 0,this.curStop=void 0,this.$scope.setStart({value:this.curStart}),this.$scope.setStop({value:this.curStop}),this.$scope.$apply()},e.prototype.getBgColor=function(e){var t=e||0;return t>this.colors.length-1?t=this.colors.length-1:t<0&&(t=0),this.colors[t]},e}();t.PerfProfilerHeatmapController=i},305:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,n){var i=this;this.$timeout=t,this.constants=n,this.isLoading=!1,this.setUpdateSummary({cb:function(e,t){return i.renderSummary(e,t)}}),e.$on("$destroy",function(){i.setUpdateSummary({cb:void 0})})}return e.$inject=["$scope","$timeout","constants"],e.prototype.renderSummary=function(e,t){var n=this;this.isLoading=!0,this.deferredRenderPromise&&this.$timeout.cancel(this.deferredRenderPromise),this.deferredRenderPromise=this.$timeout(function(){n.deferredRenderPromise=void 0,n.isLoading=!1;var i=window.perfProfiler.getAllRecords(),s=_.keys(i),r=e||parseInt(s[0]),a=t||parseInt(s[s.length-1]);n.profileSummary={domManipulations:{count:0,totalDuration:0},digests:{count:0,totalDuration:0},xhr:{count:0,totalDuration:0},indexDb:{}};for(var o=r;o<=a&&"break"!==function(e){var t=e;if(t>a)return"break";if(!i[t])return"continue";var s=i[t];n.profileSummary.domManipulations.count+=s.domManipCount,n.profileSummary.domManipulations.totalDuration+=s.domManipTotalTime,n.profileSummary.digests.count+=s.digestCount,n.profileSummary.digests.totalDuration+=s.digestTotalTime,n.profileSummary.xhr.count+=s.xhr.length,_.each(_.keys(s.indexedDbStores),function(e){n.profileSummary.indexDb[e]||(n.profileSummary.indexDb[e]={reads:{count:0,totalDuration:0},writes:{count:0,totalDuration:0}}),s.indexedDbStores[e].forEach(function(t){"read"===t.type?(n.profileSummary.indexDb[e].reads.totalDuration+=t.duration,n.profileSummary.indexDb[e].reads.count++):(n.profileSummary.indexDb[e].writes.totalDuration+=t.duration,n.profileSummary.indexDb[e].writes.count++)})})}(o);o+=n.constants.DevDebugPanel.perfProfiler.timeSlotDuration);},this.constants.DevDebugPanel.perfProfiler.deferRenderMsec)},e}();t.PerfProfilerSummaryController=i},306:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t,n){var i=this;this.$timeout=t,this.constants=n,this.isLoading=!1,this.timelineItems=[],this.MAX_URL_LENGTH=50,this.DIGEST_MAX_URL_LENGTH=35,this.setUpdateTimeline({cb:function(e,t){return i.renderTimeline(e,t)}}),e.$on("$destroy",function(){i.setUpdateTimeline({cb:void 0})})}return e.$inject=["$scope","$timeout","constants"],e.prototype.renderTimeline=function(e,t){var n=this;this.isLoading=!0,this.deferredRenderPromise&&this.$timeout.cancel(this.deferredRenderPromise),this.deferredRenderPromise=this.$timeout(function(){n.deferredRenderPromise=void 0,n.isLoading=!1;var i=window.perfProfiler.getAllRecords(),s=_.keys(i),r=e||parseInt(s[0]),a=t||parseInt(s[s.length-1]);n.timelineItems=[];for(var o=r;o<=a;o+=n.constants.DevDebugPanel.perfProfiler.timeSlotDuration){var l=o;if(l>a)break;if(i[l]){var c=i[l],h={timeSlot:(l/1e3).toFixed(1),raf:i[l].raf,events:[]};h.events=h.events.concat(n.digestDataToTimelineEvents(c));var d=n.domDataToTimelineEvent(c);d&&h.events.push(d),h.events=h.events.concat(n.xhrDataToTimelineEvents(c)),h.events=h.events.concat(n.indexDBDataToTimelineEvents(c)),h.events.length>0&&(h.events=_.sortBy(h.events,["timeStamp"]),n.timelineItems.push(h))}}},this.constants.DevDebugPanel.perfProfiler.deferRenderMsec)},e.prototype.xhrDataToTimelineEvents=function(e){var t=this;return e.xhr.map(function(e){return{timeStamp:e.timeStamp-100*Math.floor(e.timeStamp/100),type:"xhr",description:"XHR - "+(e.url.length>t.MAX_URL_LENGTH?e.url.substring(0,t.MAX_URL_LENGTH)+"...":e.url),tooltip:e.url}})},e.prototype.domDataToTimelineEvent=function(e){var t=_.keys(e.domManips);if(t.length>0){var n="";return t.forEach(function(t){var i=e.domManips[t];n+=t+"("+i.count+"); "}),{timeStamp:99,type:"dom",description:"DOM - "+n.trim()}}return null},e.prototype.digestDataToTimelineEvents=function(e){var t=this;return e.digestTriggers.map(function(e){return{timeStamp:e.timeStamp-100*Math.floor(e.timeStamp/100),type:"digest",description:"Digest - "+e.type+" ("+e.duration+"ms)"+(e.url?" - "+(e.url.length>t.DIGEST_MAX_URL_LENGTH?e.url.substring(0,t.DIGEST_MAX_URL_LENGTH)+"...":e.url):""),tooltip:e.url}})},e.prototype.indexDBDataToTimelineEvents=function(e){var t=[];return _.keys(e.indexedDbStores).forEach(function(n){var i=e.indexedDbStores[n].map(function(e){return{timeStamp:e.timeStamp-100*Math.floor(e.timeStamp/100),type:"indexdb",description:"IndexDB - "+n+" - "+e.type+" ("+e.duration+"ms)"}});t=t.concat(i)}),t},e}();t.PerfProfilerTimelineController=i}},[2157]);
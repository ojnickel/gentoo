webpackJsonp([13],{2563:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),i(2564),i(2566),i(2569),i(2571),i(2573),i(2575),i(2576),i(2577),i(2580),i(2582),i(2584)},2564:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=teamspace.services,s=n.BlockingModuleName,o=n.BlockingSubModuleName,a=n.BlockingUICategory,c=i(10),r=i(2565),l=1e3,d=["div.popover","div.ts-confirm-modal","div.ts-modal-dialog","div.ts-modal-dialog-container","div.format-toolbar-container","div.ts-compose-box .ts-text-editor .ts-text-watermark","div#cke_pastebin",".cke_widget_wrapper",".cke_widget_drag_handler_container",".cke_image_resizer"].join(", "),u=function(){function e(e,t,i,n,s,o,a,r,d,u,p,k,g,h,v,m,w,S){var C=this;this.$scope=e,this.$timeout=t,this.$interval=i,this.$element=n,this.$window=s,this.$document=o,this.$translate=a,this.constants=r,this.eventingService=d,this.resources=u,this.wikiUtils=p,this.analyticsService=g,this.appStateService=h,this.channelService=v,this.tenantSwitchService=m,this.blockingActivitiesRegisterService=w,this.settingsService=S,this.isNewSection=!1,this.shouldSendTitleUpdates=!1,this.strictlyPreventSaveWhileBodyIsFocused=!1,this.skipOnWindowBlurOnce=!1,this.hasNoNetworkErrorShown=!1,this.updateContentAsync=_.debounce(function(){return C.updateContentDebounced()},l,{leading:!1,trailing:!0}),this.shouldShowToolbar=!1,this.isSavingOrCanceling=!1,this.isNewPage=!1,this.isEditorDestroyed=!1,this.pluginsByFeatureFlag={wikiResizeImages:["dialog","image2"]},this.enableResizeablePastedTables=!0,this.onPasteEvent=function(e){var t=C.peekWikiContent(),i=t?t.length:0,n=e.clipboardData||C.$window.clipboardData,s=n.getData("text"),o=s?s.length:0,a=C.$window.getSelection(),r=a?a.toString():"";if(i+o-(r?r.length:0)>C.constants.wiki.sections.maxLength){e.preventDefault(),e.stopPropagation();var l=new c.WikiError(c.WikiErrorCode.section_max_content_length_exceeded,"[wikiEditor]: maximum section content length would be exceeded on paste");return C.wikiUtils.showErrorDialog(l),!1}var d=n.types?n.types.length>0&&_.includes(n.types,"Files"):n.files&&n.files.length>0;return!(C.wikiContext.isMeetingNotes()&&C.wikiContext.tabSettings.isPrivateMeetingWiki&&d)||(e.preventDefault(),e.stopPropagation(),!1)},this.onEditableAreaBlur=function(){if(C.logger.debug("[onEditableAreaBlur]: event handler"),!C.isEditorDestroyed&&!C.waitingWhileFocusIsInBody){var e=$("body"),t=C.getWikiContentUpdate(),i=function(){return e.is(document.activeElement)};C.$interval.cancel(C.waitingWhileFocusIsInBody),C.waitingWhileFocusIsInBody=C.$interval(function(){!C.isEditorDestroyed&&i()||C.$interval.cancel(C.waitingWhileFocusIsInBody)},10,C.strictlyPreventSaveWhileBodyIsFocused?0:100,!1),C.waitingWhileFocusIsInBody.finally(function(){!C.isEditorDestroyed&&C.isFocusStillInEditableArea()||(C.logBiEventsOnSaveSection(),C.save(!1,t)),C.waitingWhileFocusIsInBody=null})}},this.onWindowBlur=function(){C.logger.debug("[onWindowBlur]: event handler"),C.skipOnWindowBlurOnce?C.skipOnWindowBlurOnce=!1:C.isEditorDestroyed||C.save()},this.logger=k.newLogger("wiki-editor"),this.contentWithImages=this.imageHandler.applyImageSources(this.wikiContext,this.initialContent),this.postProcessContent=function(e){return C.imageHandler.restoreImageSources(e)},this.isNewSection=!this.titleValue,this.focusableArea=n.closest(this.editableAreaSelector),this.editableArea=this.focusableArea.parent(),this.contentPlaceholder=this.wikiContext.getDefaultSectionPlaceholderContent(a,u),this.titlePlaceholder=this.wikiContext.getDefaultSectionPlaceholderTitle(a,u),this.setupScopeHandlers(),this.setupEventListeners(),this.setupBlockTenantSwitch().then(function(e){C.blockSaveOnTenantSwitch=e}).catch(function(e){return C.logger.error("Wiki: Unable to block tenant switch."+e)})}return e.$inject=["$scope","$timeout","$interval","$element","$window","$document","$translate","constants","eventingService","resources","wikiUtils","loggingService","analyticsService","appStateService","channelService","tenantSwitchService","blockingActivitiesRegisterService","settingsService"],e.prototype.save=function(e,t){var i=this;void 0===e&&(e=!1),!1!==this.appStateService.isOnline?(this.hasNoNetworkErrorShown=!1,this.onSave&&!this.isSavingOrCanceling&&(t=t||this.getWikiContentUpdate(),this.handleFocusOutsideArea(e),this.isSavingOrCanceling=!0,this.$timeout(function(){i.logger.debug("[onSave]: event handler"),i.onSave({title:i.titleValue||i.wikiContext.getDefaultSectionPlaceholderTitle(i.$translate,i.resources),contentUpdate:t}).finally(function(){i.isSavingOrCanceling=!1})},0,!1))):!1===this.hasNoNetworkErrorShown&&(this.wikiUtils.showErrorDialog(new c.WikiError(c.WikiErrorCode.network_offline,"there is no network")),this.hasNoNetworkErrorShown=!0,this.isSavingOrCanceling=!1)},e.prototype.cancel=function(e){var t=this;void 0===e&&(e=!1),this.onCancel&&!this.isSavingOrCanceling&&(this.handleFocusOutsideArea(e),this.isSavingOrCanceling=!0,this.$timeout(function(){t.logger.debug("[onCancel]: event handler"),t.onCancel().finally(function(){t.isSavingOrCanceling=!1})}))},e.prototype.setGetContentUpdateCallback=function(e){this.getWikiContentUpdate=e},e.prototype.setPeekContentCallback=function(e){this.peekWikiContent=e},e.prototype.setSetContentCallback=function(e){this.setWikiContent=e},e.prototype.setCursorToCallback=function(e){this.setCursorTo=e},e.prototype.setFocusEditorWithPreservedSelectionRangeCallback=function(e){this.focusEditorWithPreservedSelectionRange=e},e.prototype.isFocusOnFirstLineContentCallback=function(e){this.isFocusOnFirstLine=e},e.prototype.addNewLineCallback=function(e){this.addNewLine=e},e.prototype.onEditorFocus=function(){var e=this;this.$scope.$evalAsync(function(){return e.shouldShowToolbar=!0})},e.prototype.onEditorReady=function(){var e=this;this.composeBoxArea=this.$element.find(this.constants.wiki.componentSelectors.composeBoxClass).find('[tabindex="0"]'),this.isNewPage||this.$timeout(function(){e.isNewSection?e.wikiUtils.focusEditorTitle():e.focusSection()}),this.onReady&&this.onReady(),this.startListeningToBlurEvents()},e.prototype.onContentChange=function(){this.onChange&&this.onChange(),this.updateContentAsync()},e.prototype.onSectionTitleInputKeyPress=function(e){var t=this.constants.keyCodes;switch(e.which){case t.enter:this.focusSectionContent("beginning"),this.peekWikiContent()&&this.addNewLine&&(this.addNewLine(),this.focusSectionContent("beginning"));break;case t.down:this.focusSectionContent("beginning");break;case t.escape:this.save()}},e.prototype.onSectionContentInputKeyPress=function(e){var t=this.constants.keyCodes;switch(e.which){case t.up:this.isFocusOnFirstLine()&&this.wikiUtils.focusEditorTitle();break;case t.escape:this.save()}},e.prototype.openChatPane=function(e){this.onChat&&this.onChat({event:e})},e.prototype.openContextMenu=function(e){this.onMenu&&this.onMenu({event:e})},e.prototype.setupBlockTenantSwitch=function(){var e=this,t={moduleName:s.Wiki,subModuleName:o.AutoSaving,reason:"Wiki is being edited/saved"},i=this.channelService.getTeamByObjectId(this.wikiContext.teamGuid),n=i&&i.displayName,c=this.channelService.getChannelByObjectId(this.wikiContext.channelGuid),r=c&&c.displayName;return this.wikiUtils.getWikiName(this.wikiContext.channelGuid,this.wikiContext.tabSettings.wikiTabId).then(function(i){var s={category:a.Saving,localizedInfo:e.$translate.instant(e.resources.strings.wiki_tenant_switch_block_message,{teamName:n,channelName:r,wikiName:i})};return e.settingsService.valueAsBoolean(e.constants.settings.names.blockingActivitiesServiceKillSwitch)?e.tenantSwitchService.registerBlockingActivity(t,s):e.blockingActivitiesRegisterService.registerBlockingActivity(t,s)})},e.prototype.updateContentDebounced=function(){this.onDebouncedChange&&this.onDebouncedChange({title:this.titleValue,contentText:this.peekWikiContent()||""})},e.prototype.focusSectionContent=function(e){this.composeBoxArea&&this.composeBoxArea.length&&(this.wikiUtils.focusElementWithoutScrolling(this.composeBoxArea),this.setCursorTo(e))},e.prototype.handleFocusOutsideArea=function(e){e&&this.focusableArea&&this.focusableArea.focus()},e.prototype.isFocusStillInEditableArea=function(){var e=document.activeElement;if(!e)return!1;if(this.editableArea&&this.editableArea.has(e).length)return!0;var t=$(d);return t.has(e).length>0||t.is(e)},e.prototype.onDestroy=function(){this.isEditorDestroyed=!0,this.save(),this.stopListeningToBlurEvents(),this.$element[0]&&this.$element[0].removeEventListener(this.constants.events.jQuery.paste,this.onPasteEvent,!0),this.$element=null,this.editableArea=null,this.focusableArea=null,this.blockSaveOnTenantSwitch&&this.blockSaveOnTenantSwitch.unregister(),this.blockSaveOnTenantSwitch=null},e.prototype.setupScopeHandlers=function(){var e=this;this.$scope.$on("$destroy",function(){return e.onDestroy()}),this.$scope.$watch("wikiEditorCtrl.titleValue",function(){e.shouldSendTitleUpdates?e.onContentChange():e.shouldSendTitleUpdates=!0})},e.prototype.setupEventListeners=function(){var e=this,t=this.constants.events.jQuery,i=this.$element.find(this.constants.wiki.componentSelectors.editorTitleClass);teamspace.common.SafeJQuery.on(this.$scope,i,t.focus,function(){e.$scope.$evalAsync(function(){return e.shouldShowToolbar=!1})}),this.$element[0].addEventListener(t.paste,this.onPasteEvent,!0),this.eventingService.$on(this.$scope,this.constants.events.formatCommandHandler.beforeSystemFileDialogOpened,function(t){return e.skipOnWindowBlurOnce=!0}),this.eventingService.$on(this.$scope,this.constants.events.formatCommandHandler.imagePickerDialogStateChanged,function(t,i){return e.strictlyPreventSaveWhileBodyIsFocused=i})},e.prototype.startListeningToBlurEvents=function(){this.$scope.$on("$locationChangeStart",this.onWindowBlur),this.editableArea.on("blur","*",this.onEditableAreaBlur),this.$document.on("blur",d,this.onEditableAreaBlur),this.$window.addEventListener("blur",this.onWindowBlur),this.$window.addEventListener("beforeunload",this.onWindowBlur)},e.prototype.stopListeningToBlurEvents=function(){this.editableArea.off("blur","*",this.onEditableAreaBlur),this.$document.off("blur",d,this.onEditableAreaBlur),this.$window.removeEventListener("blur",this.onWindowBlur),this.$window.removeEventListener("beforeunload",this.onWindowBlur)},e.prototype.logBiEventsOnSaveSection=function(){var e={action:{gesture:teamspace.components.PanelActionGesture.click,outcome:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.components.PanelActionOutcome.submit.toString(),teamspace.components.PanelActionOutcome,this.logger),scenario:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.components.PanelActionScenario.saveSection.toString(),teamspace.components.PanelActionScenario,this.logger),scenarioType:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.components.PanelActionScenarioType.section.toString(),teamspace.components.PanelActionScenarioType,this.logger)},module:{type:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.components.PanelModuleType.button.toString(),teamspace.components.PanelModuleType,this.logger),name:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.components.PanelModuleName.wikiSectionActionButton.toString(),teamspace.components.PanelModuleName,this.logger),summary:"Save section on changing the focus outside of the editable area"}};this.analyticsService.onPanelAction(this.$scope,e)},e.prototype.focusSection=function(){if(this.wikiUtils.recordedMouseClickEvent){var e=teamspace.accessibility.Helpers.ElementUtils.isFiredByEnterKey(this.wikiUtils.recordedMouseClickEvent),t=document.elementFromPoint(this.wikiUtils.recordedMouseClickEvent.clientX,this.wikiUtils.recordedMouseClickEvent.clientY);t instanceof HTMLInputElement?(t.focus(),e||t.setSelectionRange(this.wikiUtils.recordedSelectionRangeStart,this.wikiUtils.recordedSelectionRangeStart)):e?this.focusSectionContent("end"):0===this.wikiUtils.recordedSelectionRangeStart?this.focusSectionContent("beginning"):this.wikiUtils.recordedSelectionRangeStart>0&&(this.focusSectionContent("end"),this.wikiUtils.applySelectionRangeUnderPoint(this.wikiUtils.recordedMouseClickEvent.clientX,this.wikiUtils.recordedMouseClickEvent.clientY),this.focusEditorWithPreservedSelectionRange()),this.wikiUtils.recordedMouseClickEvent=null,this.wikiUtils.recordedSelectionRangeStart=this.wikiUtils.defaultSelectionRangeStart}else this.focusSectionContent("end")},e}();t.WikiEditorController=u,angular.module("teamspace.wikiEditor",["teamspace.composeBox","pascalprecht.translate","teamspace.busyAnimation","teamspace.constants","teamspace.eventingService","teamspace.settingsService","teamspace.locales","teamspace.wikiUtils","teamspace.composeFormatCommandService","teamspace.loggingService","teamspace.analyticsService","teamspace.tenantSwitchService","teamspace.blockingActivitiesRegisterService"]).directive("wikiEditor",["$compile","constants",function(e,t){return{restrict:"E",controllerAs:"wikiEditorCtrl",controller:u,scope:{},bindToController:{id:"@identifier",editableAreaSelector:"@",onSave:"&",onCancel:"&",onChange:"&",onReady:"&",onDebouncedChange:"&",onChat:"&",onMenu:"&",titleValue:"=",shouldShowToolbar:"=",initialContent:"<",wikiContext:"<",wikiSection:"<",isNewPage:"<",clickToEditEnabled:"<",imageHandler:"<"},template:r}}])},2565:function(e,t){e.exports='<div class="ts-wiki-editor" role="complementary">\n  <div class="ts-wiki-editor-top-bar">\n    <div class="ts-wiki-editor-title" ng-class="{clickToEditOff: !wikiEditorCtrl.clickToEditEnabled}">\n      <input sanitized class="wiki-editor-title-input" ng-model="wikiEditorCtrl.titleValue" simple-keydown="wikiEditorCtrl.onSectionTitleInputKeyPress($event)" placeholder="{{::wikiEditorCtrl.titlePlaceholder}}"/>\n    </div>\n    <div class="ts-wiki-editor-actions ts-wiki-common-actions">\n        <busy-animation size="small" ng-show="wikiEditorCtrl.isSavingOrCanceling"></busy-animation>\n        <button type="button" tabindex="-1" title="{{::$root.resources.strings.wiki_canvas_save_button_title | translate}}" class="ts-sym icons-accept app-icons-fill-hover" ng-if="!wikiEditorCtrl.clickToEditEnabled" ng-click="wikiEditorCtrl.save(true)" ng-disabled="wikiEditorCtrl.isSavingOrCanceling">\n          <ng-include src="\'svg/icons-accept.html\'"></ng-include>\n        </button>\n        <button type="button" tabindex="-1" title="{{::$root.resources.strings.wiki_canvas_discard | translate}}" class="ts-sym icons-close app-icons-fill-hover" ng-if="!wikiEditorCtrl.clickToEditEnabled" ng-click="wikiEditorCtrl.cancel(true)" ng-disabled="wikiEditorCtrl.isSavingOrCanceling" track-outcome="{{::$root.trackConstants.trackOutcome.select}}" track-scenario="{{::$root.trackConstants.trackScenario.discardSection}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.section}}" track-name="{{::$root.trackConstants.trackModuleName.wikiSectionActionButton}}" track-type="{{::$root.trackConstants.trackType.nav}}" track-summary="Select discard option for section">\n          <ng-include src="\'svg/icons-close.html\'"></ng-include>\n        </button>\n        <button type="button" tabindex="-1" title="{{::$root.resources.strings.wiki_canvas_more_options_button_title | translate}}" class="ts-sym icons-more app-icons-fill-hover" ng-click="wikiEditorCtrl.openContextMenu($event)" track-outcome="{{::$root.trackConstants.trackOutcome.inspect}}" track-scenario="{{::$root.trackConstants.trackScenario.openSectionMenu}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.section}}" track-name="{{::$root.trackConstants.trackModuleName.wikiSectionActionButton}}" track-type="{{::$root.trackConstants.trackType.menuItem}}" track-summary="Open section menu on page" data-tid="wiki-editor-more-options">\n          <ng-include src="\'svg/icons-more.html\'"></ng-include>\n        </button>\n        <button type="button" tabindex="-1" title="{{(wikiEditorCtrl.wikiSection.conversationPane ? $root.resources.strings.wiki_section_hide_conversation_button_title : $root.resources.strings.wiki_section_show_conversation_button_title) | translate}}" class="ts-sym app-icons-fill-hover icons-chat action-tab-btn ts-wiki-editor-toggle-conversation-button" ng-click="wikiEditorCtrl.openChatPane($event)" ng-if="!wikiEditorCtrl.wikiContext.tabSettings.isMyWiki && !wikiEditorCtrl.wikiContext.model.canvas.isMeetingNotes" track-outcome="{{::$root.trackConstants.trackOutcome.nav}}" track-scenario="{{::$root.trackConstants.trackScenario.toggleConversation}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.conversation}}" track-name="{{::$root.trackConstants.trackModuleName.wikiConversationButton}}" track-type="{{::$root.trackConstants.trackType.nav}}" track-summary="Toggle conversation for section button">\n          <ng-include src="\'svg/icons-chat.html\'"></ng-include>\n        </button>\n      </div>\n  </div>\n\n  <hr class="ts-section-title-content-seprator">\n  <compose-box class="ts-wiki-editor-compose-box" provide-get-content-update-to="wikiEditorCtrl.setGetContentUpdateCallback(callback)" provide-peek-content-to="wikiEditorCtrl.setPeekContentCallback(callback)" provide-set-content-to="wikiEditorCtrl.setSetContentCallback(callback)" provide-set-cursor-to="wikiEditorCtrl.setCursorToCallback(callback)" provide-focus-editor-with-preserved-selection-range="wikiEditorCtrl.setFocusEditorWithPreservedSelectionRangeCallback(callback)" provide-get-is-focus-on-first-line="wikiEditorCtrl.isFocusOnFirstLineContentCallback(callback)" provide-add-new-line="wikiEditorCtrl.addNewLineCallback(callback)" on-editor-focus-callback="wikiEditorCtrl.onEditorFocus()" on-editor-ready-callback="wikiEditorCtrl.onEditorReady()" on-content-change-callback="wikiEditorCtrl.onContentChange()" format-command-source-id="{{::wikiEditorCtrl.constants.wikiApp.formatCommandSourceId}}" content-placeholder="{{::wikiEditorCtrl.contentPlaceholder}}" initial-content="wikiEditorCtrl.contentWithImages" post-process-content="wikiEditorCtrl.postProcessContent" team-id="wikiEditorCtrl.wikiContext.teamGuid" channel-id="wikiEditorCtrl.wikiContext.channelGuid" simple-keydown="wikiEditorCtrl.onSectionContentInputKeyPress($event)" cke-plugins-by-feature-flag="wikiEditorCtrl.pluginsByFeatureFlag" enable-resizeable-pasted-tables="wikiEditorCtrl.enableResizeablePastedTables">\n  </compose-box>\n</div>'},2566:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=teamspace.services,s=i(2567),o=i(2568),a=i(10),c=function(){function e(e,t,i,n,s,o,a,c,r,l,d,u,p,k,g,h,v,m,w,S,C,b){this.$scope=e,this.$q=t,this.$timeout=i,this.$translate=n,this.$element=s,this.eventingService=o,this.utilityService=c,this.peopleService=r,this.settingsService=l,this.tooltipCssApplicators=d,this.tooltipService=u,this.wikiLocalStorageService=p,this.wikiService=k,this.wikiOperationsScheduler=g,this.wikiUtils=h,this.resources=v,this.constants=m,this.analyticsService=w,this.channelService=S,this.$window=C,this.wikiImageHandlerFactory=b,this.userDisplayName="",this.userDisplayNameForCard="",this.userUpn="",this.userMri={},this.editorReady=!1,this.logger=a.newLogger("wiki-section"),this.init()}return e.$inject=["$scope","$q","$timeout","$translate","$element","eventingService","loggingService","utilityService","peopleService","settingsService","tooltipCssApplicators","tooltipService","wikiLocalStorageService","wikiService","wikiOperationsScheduler","wikiUtils","resources","constants","analyticsService","channelService","$window","wikiImageHandlerFactory"],e.prototype.toggleChatPane=function(e){this.eventingService.$emit(this.constants.events.canvas.conversationChange,{context:this.wikiContext,section:this.section})},e.prototype.copyLinkToSection=function(e){var t=this;this.hideMoreOptionsMenu(),this.wikiService.copyLinkToSection(this.wikiContext,this.section).then(function(){var i=t.$element.find(".icons-more");t.tooltipService.showLinkCopiedTooltip(e,t.$scope,t.$element,i),t.logger.debug("The copy link dialog has been opened."),t.$timeout(function(){t.$timeout(function(){i.focus()},0)},t.constants.tooltip.LINKCOPIED_POPOVER_TIMEOUT)}).catch(function(e){a.WikiError.log(t.logger,"copyLinkToSection",e),a.WikiError.is(e)&&t.wikiUtils.showErrorDialog(e)})},e.prototype.constructAriaLabelForSection=function(e,t){var i=t||this.$translate.instant(this.defaultTitleKey);if(this.isFirst)e.target.setAttribute("aria-label",this.$translate.instant(this.resources.strings.aria_wiki_content_section_first,{sectionTitle:i}));else{if(this.isLast)return void e.target.setAttribute("aria-label",this.$translate.instant(this.resources.strings.aria_wiki_content_section_last,{sectionTitle:i}));e.target.setAttribute("aria-label",this.$translate.instant(this.resources.strings.aria_wiki_content_section,{sectionTitle:i}))}},e.prototype.openContextMenu=function(e){var t=this,i={template:o,trigger:"manual",container:"body",scope:this.$scope,autoClose:!0,placement:"auto bottom"},s=this.utilityService.generateUUID(),a={sourceElement:$(e.target),tooltipType:n.TooltipType.Popover,options:i,tooltipId:s,cssApplicator:function(){return t.tooltipCssApplicators.contextMenu(e)}};e.preventDefault(),e.stopPropagation(),this.tooltipService.toggleTooltip(a)},e.prototype.onDebouncedContentChange=function(e,t){this.section&&(this.page&&(this.page.isNewPage=!1),this.wikiLocalStorageService.updateDraftSection({id:this.section.id,pageId:this.section.pageId,canvasId:this.section.canvasId,channelGuid:this.canvas.channelGuid,title:e,content:t}))},e.prototype.handleMouseEvent=function(e){this.logger.debug("[handleMouseEvent]: event handler"),e&&this.clickToEditEnabled&&(this.section.editing||2===e.button||e.type===this.constants.events.jQuery.click&&this.$window.getSelection()&&(this.$window.getSelection().toString().length||"Range"===this.$window.getSelection().type)||e.target instanceof HTMLAnchorElement||this.isTargetAncestorIsAnchorTagInWikiViewer(e)||(this.wikiUtils.recordUserClickAndSelection(e),this.addToProcessAndFocusSection()))},e.prototype.isTargetAncestorIsAnchorTagInWikiViewer=function(e){var t=(e=e).originalEvent&&e.originalEvent.composedPath&&e.originalEvent.composedPath();if(!t||!t.length)return!1;for(var i=0;i<t.length;i++){var n=t[i];if("WIKI-VIEWER"==n.nodeName)return!1;if("A"==n.nodeName)return!0}return!1},e.prototype.addToProcessAndFocusSection=function(){var e=this;this.editorReady=!1,this.wikiOperationsScheduler.addAndProcess({name:"focus section",queueId:this.section.itemId,action:function(){return e.wikiService.focusSection(e.wikiContext,e.section).catch(function(t){a.WikiError.log(e.logger,"handleMouseEvent",t),e.wikiUtils.showErrorDialog(t)})}})},e.prototype.focusSectionWhenClickToEditDisable=function(){this.section.editing||this.addToProcessAndFocusSection()},e.prototype.onContentChange=function(){var e=this,t=this.section&&this.section.editing&&this.section.locked;return this.section&&this.section.ready&&!t?this.wikiOperationsScheduler.addAndProcess({name:"lock section",queueId:this.section.itemId,action:function(){return e.wikiService.lockSection(e.wikiContext,e.section).then(function(){return e.logBiEventsOnContentChange()}).catch(function(t){a.WikiError.log(e.logger,"lockSection",t),e.wikiUtils.showErrorDialog(t)})}}):this.$q.resolve()},e.prototype.unlockSection=function(){var e=this;this.logger.debug("[unlockSection]: event handler"),this.hideMoreOptionsMenu();var t=this.$q.defer();return this.wikiUtils.showConfirmationDialog({titleString:this.resources.strings.wiki_unlock_section_confirmation_title,bodyString:this.resources.strings.wiki_unlock_section_confirmation_body,bodyOptions:{currentAuthor:this.userDisplayNameForCard},confirmButtonLabel:this.resources.strings.wiki_unlock_section_confirmation_ok_button,confirmCallback:function(){t.resolve(e.wikiOperationsScheduler.addAndProcess({name:"unlock section",queueId:e.section.itemId,action:function(){return e.wikiService.unlockSection(e.wikiContext,e.section)}}))},cancelCallback:function(){t.resolve()}}),t.promise},e.prototype.onEditorReady=function(){this.editorReady=!0},e.prototype.deleteSection=function(){var e=this;this.hideMoreOptionsMenu();this.wikiUtils.showConfirmationDialog({titleString:this.resources.strings.wiki_delete_section_confirmation_title,bodyString:this.resources.strings.wiki_delete_section_confirmation_body,confirmButtonLabel:this.resources.strings.wiki_delete_section_confirmation_ok_button,confirmCallback:function(){return e.wikiService.deleteSection(e.wikiContext,e.section).then(function(){var t={id:e.section.id,pageId:e.section.pageId,canvasId:e.section.canvasId,channelGuid:e.canvas.channelGuid};e.wikiLocalStorageService.removeDraftSection(t),e.section.conversationPane&&e.eventingService.$emit(e.constants.events.canvas.conversationChange,{context:e.wikiContext,section:e.section}),e.canvas.selectedPage.hasSections()?e.$timeout(function(){return e.wikiUtils.moveFocusToFirstSectionOfCurrentPage()}):e.onNewSection&&e.onNewSection({toIndex:0})}).catch(function(t){t&&t.errorCode===a.WikiErrorCode.section_delete&&e.wikiUtils.showErrorDialog(t),a.WikiError.log(e.logger,"onDeleteSelectedSection",t)})},cancelCallback:function(){return e.$timeout(function(){return e.wikiUtils.moveFocusToSectionWithId(e.section.id)})}})},e.prototype.cancel=function(){var e=this;return this.logger.debug("[cancel]: event handler"),this.hideMoreOptionsMenu(),this.section.editing?this.wikiOperationsScheduler.addAndProcess({name:"cancel save section",queueId:this.section.itemId,action:function(){return e.wikiService.cancelSaveSection(e.wikiContext,e.section).then(function(){e.logger.debug('Removing draft section "'+e.section.title+'" with id '+e.section.id+" from local storage");var t={id:e.section.id,pageId:e.section.pageId,canvasId:e.section.canvasId,channelGuid:e.canvas.channelGuid};e.wikiLocalStorageService.removeDraftSection(t)})}}):this.$q.resolve()},e.prototype.saveContent=function(e,t){var i=this;this.logger.debug("[saveContent]: event handler");return this.wikiOperationsScheduler.addAndProcess({name:this.constants.events.meetingNotes.saveSection,queueId:this.section.itemId,action:function(){var n={title:e,contentUpdate:t};return i.wikiService.saveSection(i.wikiContext,i.section,i.page,n).then(function(){i.logger.debug("[saveContent]: Removing draft section '"+i.section.title+"' with id "+i.section.id+" from local storage");var e={id:i.section.id,pageId:i.section.pageId,canvasId:i.section.canvasId,channelGuid:i.canvas.channelGuid};i.wikiLocalStorageService.removeDraftSection(e)}).catch(function(e){if(a.WikiError.is(e)){if(e.errorCode===a.WikiErrorCode.network_offline)return void i.wikiUtils.showErrorDialog(e);if(e.errorCode===a.WikiErrorCode.section_not_ready)i.wikiUtils.showErrorDialog(e);else{var t=i.$translate.instant(e.getString("error_explanation")),n=i.$translate.instant(i.resources.strings.wiki_save_error_discard,{errorExplanation:t});i.wikiUtils.showConfirmationDialog({titleString:i.$translate.instant(e.getString("error")),bodyString:n,confirmButtonLabel:i.$translate.instant(i.resources.strings.modal_dialog_close_button),closeButtonText:i.$translate.instant(i.resources.strings.wiki_version_conflict_save_error_discard_button),cancelCallback:function(){return i.wikiService.cancelSaveSection(i.wikiContext,i.section,!0)},confirmCallback:function(){return i.wikiService.openEditor(i.wikiContext,i.section)},closeByDocument:!1})}}return a.WikiError.log(i.logger,"saveContent",e),i.$q.reject(e)})}})},e.prototype.moveUp=function(){var e=this;this.hideMoreOptionsMenu(),this.isFirst||this.wikiService.moveSection(this.wikiContext,this.section,this.sectionIndex-1,!1,0).then(function(){e.$element.find(".icons-more").focus()})},e.prototype.moveDown=function(){var e=this;this.hideMoreOptionsMenu(),this.isLast||this.wikiService.moveSection(this.wikiContext,this.section,this.sectionIndex+1,!1,1).then(function(){e.$element.find(".icons-more").focus()})},e.prototype.hideMoreOptionsMenu=function(){this.tooltipService.clearAllTooltips()},e.prototype.init=function(){var e=this;!isNaN(this.sectionIndex)&&this.section?(this.clickToEditEnabled=this.settingsService.valueAsBoolean(this.constants.settings.names.wikiClickToEditSectionEnabled),this.canPostToChannel=this.channelService.canPostToCurrentChannel(),this.handleUserRefresh(),this.defaultTitleKey=this.wikiUtils.getDefaultSectionTitleKey(this.wikiContext),this.section.imageHandler||(this.section.imageHandler=this.wikiImageHandlerFactory.createHandler(this.wikiContext,this.section)),this.$scope.$on("$destroy",function(){return e.onDestroy()})):this.logger.error("[init] failed; neither section nor sectionIndex can be undefined")},e.prototype.handleUserRefresh=function(){var e=this,t=function(){e.section.user&&e.section.locked?e.peopleService.getPeopleProfile(e.section.user,"wiki-tab").then(function(t){var i=t.displayName.split(" ");e.userDisplayName=i[0]+" "+(i[1]?i[1].charAt(0)+".":""),e.userDisplayNameForCard=t.displayName,e.userUpn=t.userPrincipalName,e.userMri={mri:t.mri}}):(e.userDisplayName="",e.userDisplayNameForCard="",e.userUpn="",e.userMri={})};this.$scope.$watchGroup(["wikiSectionCtrl.section.user","wikiSectionCtrl.section.locked"],function(e,i){e[0]==i[0]&&e[1]==i[1]||t()}),t()},e.prototype.logBiEventsOnContentChange=function(){var e={action:{gesture:teamspace.components.PanelActionGesture.click,outcome:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.components.PanelActionOutcome.select.toString(),teamspace.components.PanelActionOutcome,this.logger),scenario:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.components.PanelActionScenario.editSection.toString(),teamspace.components.PanelActionScenario,this.logger),scenarioType:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.components.PanelActionScenarioType.section.toString(),teamspace.components.PanelActionScenarioType,this.logger)},module:{type:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.components.PanelModuleType.button.toString(),teamspace.components.PanelModuleType,this.logger),name:teamspace.shared.AttributeHelper.tryGetEnum(teamspace.components.PanelModuleName.wikiSectionActionButton.toString(),teamspace.components.PanelModuleName,this.logger),summary:"Edit section"}};this.analyticsService.onPanelAction(this.$scope,e)},e.prototype.onDestroy=function(){this.section.imageHandler.releaseCache()},e}();t.WikiSectionController=c,angular.module("teamspace.wikiSection",["ngSanitize","teamspace.loggingService","teamspace.utilityService","teamspace.peopleService","teamspace.settingsService","teamspace.tooltipCssApplicators","teamspace.tooltipService","teamspace.wikiEditor","teamspace.wikiViewer","teamspace.wikiLocalStorageService","teamspace.wikiService","teamspace.wikiUtils","teamspace.wikiOperationsScheduler","teamspace.constants","teamspace.compile","teamspace.wikiImageHandlerFactory"]).directive("wikiSection",function(){return{restrict:"E",bindToController:{wikiContext:"<",canvas:"<",page:"<",section:"<",sectionIndex:"<",isFirst:"<",isLast:"<",onNewSection:"&"},controllerAs:"wikiSectionCtrl",controller:c,template:s}})},2567:function(e,t){e.exports='\x3c!-- DO NOT remove id="section-{{wikiSection.id}}"; it is used in many places (key-nav, automation, autosave mechanism, etc)\n     search carefully for all occurrences if you want to change it --\x3e\n<div id="section-{{wikiSection.id}}" tabindex="{{$index === 0 ? 0 : -1}}" class="ts-wiki-section" ng-class="{\'ts-wiki-section-editing\': wikiSection.editing && wikiSectionCtrl.editorReady, \'ts-wiki-section-locked\': wikiSection.locked}" ng-attr-calling-screen-focus="{{(wikiSectionCtrl.isFirst) ? \'first-section\' : undefined}}" simple-focus="wikiSectionCtrl.constructAriaLabelForSection($event, wikiSection.title)">\n  <div class="wiki-canvas-inside-section" acc-role="canvas-inside-section">\n    <wiki-editor ng-if="wikiSection.editing" ng-show="wikiSectionCtrl.editorReady" class="ts-wiki-section-edit" ng-class="{\'has-messages\': wikiSection.conversationId, \'chat-active\': wikiSection.conversationPane}" title-value="wikiSection.title" initial-content="wikiSection.content" on-save="wikiSectionCtrl.saveContent(title, contentUpdate)" on-cancel="wikiSectionCtrl.cancel()" on-change="wikiSectionCtrl.onContentChange()" on-ready="wikiSectionCtrl.onEditorReady()" on-debounced-change="wikiSectionCtrl.onDebouncedContentChange(title, contentText)" on-chat="wikiSectionCtrl.toggleChatPane(event)" on-menu="wikiSectionCtrl.openContextMenu(event)" wiki-context="wikiSectionCtrl.wikiContext" wiki-section="wikiSectionCtrl.section" is-new-page="wikiSectionCtrl.page.isNewPage" click-to-edit-enabled="wikiSectionCtrl.clickToEditEnabled" should-show-toolbar="wikiSectionCtrl.canvas.shouldShowToolbar" editable-area-selector="#section-{{::wikiSectionCtrl.section.id}}" identifier="{{::wikiSectionCtrl.section.id}}" image-handler="wikiSectionCtrl.section.imageHandler">\n    </wiki-editor>\n    <div ng-if="!wikiSection.editing || !wikiSectionCtrl.editorReady" class="ts-wiki-section-view">\n      <wiki-viewer identifier="{{::wikiSection.id}}" content-title="wikiSection.title" default-title-loc-key="{{::wikiSectionCtrl.defaultTitleKey}}" title-aria-loc-key="{{::wikiSectionCtrl.resources.strings.aria_wiki_section_title}}" content-body="wikiSection.content" on-title-click="wikiSectionCtrl.handleMouseEvent(event)" on-content-click="wikiSectionCtrl.handleMouseEvent(event)" should-show-default-cursor="wikiSection.locked" is-lock-status-visible="wikiSection.locked && !wikiSection.editing" wiki-context="wikiSectionCtrl.wikiContext" image-handler="wikiSectionCtrl.section.imageHandler">\n      </wiki-viewer>\n\n    </div>\n  </div>\n</div>\n'},2568:function(e,t){e.exports='<div class="popover wiki-section-more-actions app-default-menu">\n  <ul acc-role="dialog menu">\n      <li ng-if="!wikiSectionCtrl.wikiContext.tabSettings.isMyWiki && !wikiSectionCtrl.wikiContext.tabSettings.isPrivateMeetingWiki" acc-role="menu-item focus-default">\n      <button class="ts-sym has-icon" ng-click="wikiSectionCtrl.copyLinkToSection($event)" track-outcome="{{::$root.trackConstants.trackOutcome.select}}" track-scenario="{{::$root.trackConstants.trackScenario.selectSectionGetLink}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.section}}" track-name="{{::$root.trackConstants.trackModuleName.wikiSectionActionButton}}" track-type="{{::$root.trackConstants.trackType.button}}" track-summary="Select get section link on page">\n        <div>\x3c!-- This div is required by Firefox for flexbox --\x3e\n          <ng-include class="icon" src="\'svg/icons-link.html\'"></ng-include>\n          <span translate-once="{{::$root.resources.strings.wiki_canvas_section_copy_link}}"></span>\n        </div>\n      </button>\n    </li>\n    <li acc-role="menu-item focus-default">\n      <button class="ts-sym has-icon" ng-disabled="{{!wikiSectionCtrl.section.ready || wikiSectionCtrl.section.locked}}" ng-click="wikiSectionCtrl.moveUp()">\n        <div>\x3c!-- This div is required by Firefox for flexbox --\x3e\n          <ng-include class="icon" src="\'svg/icons-arrow-up.html\'"></ng-include>\n          <span translate-once="{{::$root.resources.strings.wiki_canvas_section_move_up}}"></span>\n        </div>\n      </button>\n    </li>\n    <li acc-role="menu-item">\n      <button class="ts-sym has-icon" ng-disabled="{{!wikiSectionCtrl.section.ready || wikiSectionCtrl.section.locked}}" ng-click="wikiSectionCtrl.moveDown()">\n        <div>\x3c!-- This div is required by Firefox for flexbox --\x3e\n          <ng-include class="icon" src="\'svg/icons-arrow-down.html\'"></ng-include>\n          <span translate-once="{{::$root.resources.strings.wiki_canvas_section_move_down}}"></span>\n        </div>\n      </button>\n    </li>\n    <li ng-if="false" acc-role="menu-item">\n      <button class="ts-sym has-icon" ng-click="wikiSectionCtrl.duplicateSection($event)"> \x3c!-- TODO: torycl - implement closing of the tooltip in the controller --\x3e\n        <div>\x3c!-- This div is required by Firefox for flexbox --\x3e\n          <ng-include class="icon" src="\'svg/icons-copy.html\'"></ng-include>\n          <span translate-once="{{::$root.resources.strings.wiki_canvas_section_duplicate}}"></span>\n        </div>\n      </button>\n    </li>\n\n    <li acc-role="menu-item" ng-if="wikiSectionCtrl.section.editing && wikiSectionCtrl.clickToEditEnabled">\n      <button class="ts-sym has-icon" ng-click="wikiSectionCtrl.cancel()" data-tid="canvas-section-discard-button" track-outcome="{{::$root.trackConstants.trackOutcome.select}}" track-scenario="{{::$root.trackConstants.trackScenario.discardSection}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.section}}" track-name="{{::$root.trackConstants.trackModuleName.wikiSectionActionButton}}" track-type="{{::$root.trackConstants.trackType.nav}}" track-summary="Select discard option for section">\n        <div>\x3c!-- This div is required by Firefox for flexbox --\x3e\n          <ng-include class="icon" src="\'svg/icons-close.html\'"></ng-include>\n          <span translate-once="{{::$root.resources.strings.wiki_canvas_discard}}"></span>\n        </div>\n      </button>\n    </li>\n    <li acc-role="menu-item">\n      <button class="ts-sym has-icon" ng-disabled="{{!wikiSectionCtrl.section.ready || wikiSectionCtrl.section.locked}}" ng-click="wikiSectionCtrl.deleteSection()" data-tid="canvas-delete-link-button" track-outcome="{{::$root.trackConstants.trackOutcome.select}}" track-scenario="{{::$root.trackConstants.trackScenario.selectSectionDelete}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.section}}" track-name="{{::$root.trackConstants.trackModuleName.wikiSectionActionButton}}" track-type="{{::$root.trackConstants.trackType.button}}" track-summary="Select delete section on page">\n        <div>\x3c!-- This div is required by Firefox for flexbox --\x3e\n          <ng-include class="icon" src="\'svg/icons-delete.html\'"></ng-include>\n          <span translate-once="{{::$root.resources.strings.wiki_canvas_section_delete}}"></span>\n        </div>\n      </button>\n    </li>\n    <li acc-role="menu-item" ng-if="wikiSectionCtrl.section.locked && !wikiSectionCtrl.section.editing">\n      <button class="ts-sym has-icon" title="{{::$root.resources.strings.wiki_section_unlock_section_button_title | translate}}" data-tid="lock-section-button-{{::wikiSectionCtrl.section.id}}" ng-click="wikiSectionCtrl.unlockSection()">\n        <div>\x3c!-- This div is required by Firefox for flexbox --\x3e\n          <ng-include class="icon" src="\'svg/icons-lock.html\'"></ng-include>\n          <span translate-once="{{::$root.resources.strings.wiki_unlock|translate}}"></span>\n        </div>\n      </button>\n    </li>\n  </ul>\n</div>\n'},2569:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=teamspace.services,s=i(2570),o=i(10),a=function(){function e(e,t,i,s,o,a,c,r,l,d,u,p){var k=this;this.$q=t,this.$translate=s,this.resources=o,this.wikiService=a,this.wikiUtils=c,this.wikiOperationsScheduler=r,this.showConversation=!0,this.isStartingConversation=!1,this.errorMessage="",this.disableStartConversation=!1,this.canPostConversation=!0,this.messageType=p.messages.types.newConversation,this.logger=d.newLogger("wiki-tab"),this.canPostConversation=u.canPostToCurrentChannel(),l.$on(e,p.events.canvas.conversationChange,function(e,t){if(void 0===t.showTabChatPane&&(t.showTabChatPane=t.section.conversationId!=k.replyChainId||!k.showTabChatPane,k.conversationPaneState.expanded=t.showTabChatPane),t.chatPaneTitle||(t.chatPaneTitle=t.section?t.section.title:""),k.wikiContext=t.context,k.wikiSection=t.section,k.replyChain={conversationId:k.wikiContext.channelGuid,replyChainId:t.section?t.section.conversationId:null,replyChainIdType:n.ReplyChainIdType.ParentMessageId,enableNewMessage:!0,disableMessageExpander:!0,doNotFocusEditorOnInit:!1,host:teamspace.components.MessagePaneHost.DocumentFrame},k.canvas.setSectionConversation(t.section),k.replyChainId!=k.replyChain.replyChainId)return k.showConversation=!1,void i(function(){k.refreshWikiConversationPane(t)});k.refreshWikiConversationPane(t)})}return e.$inject=["$scope","$q","$timeout","$translate","resources","wikiService","wikiUtils","wikiOperationsScheduler","eventingService","loggingService","channelService","constants"],e.prototype.initiateConversation=function(e,t){return this.startNewConversation(e),this.disableStartConversation=!0,this.$q.resolve()},e.prototype.startNewConversation=function(e){var t=this;this.isStartingConversation||(this.isStartingConversation=!0,this.errorMessage="",this.wikiOperationsScheduler.addAndProcess({name:"start conversation for section",queueId:this.wikiSection.itemId,action:function(){return t.wikiService.startSectionConversation(t.wikiContext,t.wikiSection,e)}}).then(function(e){t.replyChain.replyChainId=e,t.replyChainId=e}).catch(function(e){var i=new o.WikiError(o.WikiErrorCode.start_conversation,e);o.WikiError.log(t.logger,"startNewConversation",i),o.WikiError.is(i)?(t.errorMessage=t.$translate.instant(i.getString("error")),t.wikiUtils.showErrorDialog(i)):t.errorMessage=t.$translate.instant(t.resources.strings.wiki_start_conversation_error)}).finally(function(){t.isStartingConversation=!1,t.disableStartConversation=!1}))},e.prototype.closeConversationPane=function(){this.showTabChatPane=!1,this.conversationPaneState.expanded=!1,this.wikiUtils.moveFocusToFirstSectionOfCurrentPage(),this.canvas.setSectionConversation(null)},e.prototype.refreshWikiConversationPane=function(e){e.showTabChatPane?(this.replyChainId=this.replyChain.replyChainId,this.showTabChatPane=e.showTabChatPane,this.showConversation=this.showTabChatPane,this.chatPaneTitle=e.chatPaneTitle,this.disableStartConversation=!1,this.errorMessage=null):this.closeConversationPane()},e}();t.WikiConversationPaneController=a,angular.module("teamspace.wikiConversationPane",["pascalprecht.translate","teamspace.loggingService","teamspace.eventingService","teamspace.constants","teamspace.wikiService","teamspace.wikiUtils","teamspace.channelService","teamspace.startConversation"]).directive("wikiConversationPane",function(){return{restrict:"E",bindToController:{canvas:"<",conversationPaneState:"="},controllerAs:"wikiConvPaneCtrl",controller:a,template:s}})},2570:function(e,t){e.exports='<div class="right-rail-pane ts-canvas-message-pane" ng-if="wikiConvPaneCtrl.showTabChatPane">\n  <div class="conversation-title-bar">\n    <h1 class="conversation-title">{{::$root.resources.strings.wiki_conversation_chat_pane_title | translate}}</h1>\n    <button class="ts-sym app-icons-fill-hover conversation-close" aria-label="{{::$root.resources.strings.wiki_conversation_chat_pane_close_button_aria_label|translate:{sectionName:wikiConvPaneCtrl.chatPaneTitle} }}" title="{{::$root.resources.strings.wiki_conversation_chat_pane_close_button_tooltip | translate}}" ng-click="wikiConvPaneCtrl.closeConversationPane()" acc-role="tab-handler-close-conversation-pane" tabindex="-1" data-tid="close-conversation-button-{{::wikiConvPaneCtrl.replyChainId}}" track-outcome="{{::$root.trackConstants.trackOutcome.nav}}" track-scenario="{{::$root.trackConstants.trackScenario.closeConversation}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.conversation}}" track-name="{{::$root.trackConstants.trackModuleName.wikiConversationButton}}" track-type="{{::$root.trackConstants.trackType.nav}}" track-summary="Close conversation button selected">\n      <ng-include class="icon icons-close" src="\'svg/icons-close.html\'"></ng-include>\n    </button>\n  </div>\n  <div class="tab-no-replychain" ng-if="!wikiConvPaneCtrl.replyChain.replyChainId">\n    <div class="ts-wiki-start-conversation">\n\n      <div class="busy" ng-if="wikiConvPaneCtrl.disableStartConversation">\n        <busy-animation size="medium" context="Start conversation for extension tab">\n        </busy-animation>\n      </div>\n\n      <div class="error-container" ng-if="wikiConvPaneCtrl.errorMessage && !wikiConvPaneCtrl.disableStartConversation" ng-bind="wikiConvPaneCtrl.errorMessage">\n      </div>\n      <div class="message-expander" ng-if="!wikiConvPaneCtrl.disableMessageExpander">\n\n        <div class="ts-wiki-add-message" id="add-new-message" data-tid="channelNewMessageContainer" ng-disabled="wikiConvPaneCtrl.disableStartConversation">\n          <new-message send-message="wikiConvPaneCtrl.initiateConversation(messageData, scenario)" message-type="::wikiConvPaneCtrl.messageType" hide-people-picker="false" conversation-id="::wikiConvPaneCtrl.wikiContext.channelGuid" disable-compose="!wikiConvPaneCtrl.canPostConversation">\n\n          </new-message>\n        </div>\n      </div>\n\n    </div>\n  </div>\n  <context-message-pane context="wikiConvPaneCtrl.replyChain" ng-if="wikiConvPaneCtrl.showConversation && wikiConvPaneCtrl.replyChain.replyChainId">\n  </context-message-pane>\n</div>\n'},2571:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(2572),s=function(){function e(e,t,i,n){this.$element=e,this.$timeout=i,this.wikiSidebarToggleClass=".wiki-sidebar-toggle-button",this.collapseButtonLbl=t.instant(n.strings.wiki_page_list_menu_collapse_title_placeholder),this.expandButtonLbl=t.instant(n.strings.wiki_page_list_menu_expand_title_placeholder)}return e.$inject=["$element","$translate","$timeout","resources"],e.prototype.toggleSidebar=function(){var e=this;this.sidebarState.expanded=!this.sidebarState.expanded,this.sidebarState.expandedByUser=!0===this.sidebarState.expanded?1:2,this.$timeout(function(){e.$element.find(e.wikiSidebarToggleClass).focus()})},e}();t.WikiSidebarToggleController=s,angular.module("teamspace.wikiSidebarToggle",["pascalprecht.translate","teamspace.locales"]).directive("wikiSidebarToggle",function(){return{restrict:"E",scope:{},bindToController:{sidebarState:"=",canvas:"<"},controllerAs:"wikiSidebarToggleCtrl",controller:s,template:n}})},2572:function(e,t){e.exports='<button type="button" title="{{wikiSidebarToggleCtrl.sidebarState.expanded ? wikiSidebarToggleCtrl.collapseButtonLbl : wikiSidebarToggleCtrl.expandButtonLbl }}" aria-expanded="{{wikiSidebarToggleCtrl.sidebarState.expanded}}" class="ts-sym app-icons-fill-hover inset-border inset-border-round inset-border-themed wiki-sidebar-toggle-button" ng-class="{\'sidebar-expanded\': wikiSidebarToggleCtrl.sidebarState.expanded, \'ts-wiki-toolbar-separator-right\': wikiSidebarToggleCtrl.canvas.shouldShowEditorToolbar}" ng-click="wikiSidebarToggleCtrl.toggleSidebar()">\n  <ng-include class="icon" src="\'svg/icons-menu-light.html\'">\n  </ng-include>\n</button>\n'},2573:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(2574),s=function(){function e(e,t,i,n,s,o,a,c){var r=this;this.$scope=e,this.$element=t,this.$translate=i,this.constants=n,this.htmlSanitizer=s,this.semanticObjectService=o,this.wikiViewerSemanticProcessors=a,this.wikiImageHandlerFactory=c,this.semanticInfo={},this.onTitleClick=function(e){r.onTitleClickCallback({event:e})},this.onContentClick=function(e){r.onContentClickCallback({event:e})},this.onContentChanged(),e.$watch("wikiViewerCtrl.title",function(){return r.onTitleChanged()}),e.$watch("wikiViewerCtrl.content",function(){return r.onContentChanged()}),this.setupEventHandlers()}return e.$inject=["$scope","$element","$translate","constants","htmlSanitizer","semanticObjectService","wikiViewerSemanticProcessors","wikiImageHandlerFactory"],e.prototype.setAriaLabelledbyForSectionContent=function(e){var t=this.constants.wiki.ids,i=this.isLockStatusVisible?t.lockSectionMessage.replace("{{sectionId}}",this.id):t.wikiSectionContentSupportText,n=t.wikiViewerContent.replace("{{sectionId}}",this.id);e.target.setAttribute("aria-labelledby",i+" "+n)},e.prototype.setAriaLabelledbyForSectionTitle=function(e){var t=this.constants.wiki.ids,i=t.wikiSectionTitleReadMode+"-"+this.id,n=this.isLockStatusVisible?t.lockSectionMessage.replace("{{sectionId}}",this.id):t.wikiSectionTitleSupporText;e.target.setAttribute("aria-labelledby",i+" "+n)},e.prototype.onTitleChanged=function(){this.titleToRender=this.title&&this.title.length?this.title:this.$translate.instant(this.defaultTitleLocKey),this.titleAriaString=this.$translate.instant(this.titleAriaLocKey,{title:this.titleToRender})},e.prototype.onContentChanged=function(){if(this.content&&this.content.length){this.imageHandler||(this.imageHandler=this.wikiImageHandlerFactory.createPlainHandler());var e=this.htmlSanitizer.sanitizeHtml(this.content),t=this.imageHandler.loadForViewer({ctx:this.wikiContext,sanitizedContent:e,viewer:this.$element}),i=this.parseSemanticContent(t);this.wikiViewerSemanticProcessors.process(i,this.semanticInfo),this.contentToRender=this.prepareContentForRendering(i).replace(/tabindex="0"/gi,'tabindex="-1"')}else this.contentToRender=""},e.prototype.parseSemanticContent=function(e){return this.semanticObjectService.extractSemanticObjects(e,!0,!0)},e.prototype.prepareContentForRendering=function(e){return this.adaptCallToSemanticObjectAdapter(e.html[0],e[this.constants.semanticObjectSchemas.mention],e[this.constants.semanticObjectSchemas.hyperlink])},e.prototype.adaptCallToSemanticObjectAdapter=function(e,t,i){var n=this.createFakeSkypeMessage(e,t,i),s=this.semanticObjectService.processMessageProperties(n);return this.semanticObjectService.populateSemanticObjectContent(n.renderContent,s.mentions,null,!1,s.cards)},e.prototype.createFakeSkypeMessage=function(e,t,i){var n=new SkypeX.Services.SkypeMessageLocal;return n.renderContent=e,n.properties||(n.properties={}),n.properties[this.constants.skypeMessagePropertyName.mentions.name]=this.adaptMentions(t),n.properties[this.constants.skypeMessagePropertyName.links.name]=i,n},e.prototype.adaptMentions=function(e){var t=this;return _.map(e,function(e){return{"@type":t.constants.semanticObjectSchemas.mention,itemid:e.itemid,mri:e.userObjectId,mentionType:e.userType,displayName:e.userDisplayName}})},e.prototype.setupEventHandlers=function(){var e=this;this.onTitleClickCallback&&this.$element.find(this.constants.wiki.componentSelectors.viewerTitleClass).on("click",this.onTitleClick),this.onContentClickCallback&&this.$element.find(this.constants.wiki.componentSelectors.viewerContentClass).on("click",this.onContentClick),this.$scope.$on("$destroy",function(){return e.onDestroy()})},e.prototype.removeEventHandlers=function(){this.onTitleClickCallback&&this.$element.find(this.constants.wiki.componentSelectors.viewerTitleClass).off("click",this.onTitleClick),this.onContentClickCallback&&this.$element.find(this.constants.wiki.componentSelectors.viewerContentClass).off("click",this.onContentClick)},e.prototype.onDestroy=function(){this.removeEventHandlers()},e}();t.WikiViewerController=s,angular.module("teamspace.wikiViewer",["pascalprecht.translate","teamspace.compile","teamspace.constants","teamspace.htmlSanitizer","teamspace.semanticObjectService","teamspace.wikiImageHandlerFactory"]).directive("wikiViewer",function(){return{restrict:"E",bindToController:{id:"@identifier",title:"<contentTitle",defaultTitleLocKey:"@",titleAriaLocKey:"@",content:"<contentBody",isLockStatusVisible:"<isLockStatusVisible",onTitleClickCallback:"&?onTitleClick",onContentClickCallback:"&?onContentClick",shouldShowDefaultCursor:"<",wikiContext:"<",imageHandler:"<"},controllerAs:"wikiViewerCtrl",controller:s,template:n}})},2574:function(e,t){e.exports='<div class="ts-wiki-viewer" ng-class="{\'ts-wiki-viewer-section-locked\': wikiSection.locked}">\n  <div class="ts-wiki-viewer-top-bar">\n    <div class="ts-wiki-viewer-title-and-status">\n      <div class="ts-wiki-viewer-title" ng-class="::{\'default-cursor\' : wikiViewerCtrl.shouldShowDefaultCursor}" acc-role="canvas-inside-section" tabindex="-1" data-clickable-element aria-label="{{wikiViewerCtrl.titleAriaString}}" simple-focus="wikiViewerCtrl.setAriaLabelledbyForSectionTitle($event)" data-tid="wiki-viewer-title-{{::wikiViewerCtrl.id}}" id="wiki-viewer-title-{{::wikiViewerCtrl.id}}">\n          <h1 ng-bind="wikiViewerCtrl.titleToRender" title="{{wikiViewerCtrl.titleToRender}}" data-tid="wiki-viewer-title"></h1>\n      </div>\n      <div ng-if="wikiSection.locked && !wikiSection.editing" class="ts-wiki-section-status">\n        <div class="status ts-wiki-viewer-locked">\n          <span data-tid="lock-section-message-{{::wikiSection.id}}" id="lock-section-message-{{::wikiSection.id}}" class="ts-wiki-viewer-locked-message">\n            <span class="ts-wiki-viewer-locked-user-name" person-card data-itemprops="{{wikiSectionCtrl.userMri}}">{{wikiSectionCtrl.userDisplayName}}</span>\n            {{::$root.resources.strings.wiki_is_editing|translate}}\n          </span>\n          <ng-include class="ts-wiki-icon" src="\'svg/icons-lock.html\'"></ng-include>\n        </div>\n      </div>\n    </div>\n    <div class="ts-wiki-viewer-action-buttons-and-action-marker" ng-class="{\'has-messages\': wikiSection.conversationId}">\n      <div class="ts-wiki-section-actions ts-wiki-common-actions" data-tid="canvas-section-actions-{{::wikiSection.id}}" ng-class="{\'has-messages\': wikiSection.conversationId, \'chat-active\': wikiSection.conversationPane}">\n        <div class="actions">\n          <button type="button" tabindex="-1" title="{{::$root.resources.strings.wiki_section_edit_section_button_title | translate}}" class="ts-sym app-icons-fill-hover icons-edit hide-in-read-mode" data-tid="edit-section-button-{{::wikiSection.id}}" ng-if="!wikiSection.locked && !wikiSectionCtrl.clickToEditEnabled" ng-click="wikiSectionCtrl.focusSectionWhenClickToEditDisable()" track-outcome="{{::$root.trackConstants.trackOutcome.select}}" track-scenario="{{::$root.trackConstants.trackScenario.focusSection}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.section}}" track-name="{{::$root.trackConstants.trackModuleName.wikiSectionActionButton}}" track-type="{{::$root.trackConstants.trackType.button}}" track-summary="Edit section">\n            <ng-include class="ts-wiki-icon" src="\'svg/icons-edit.html\'"></ng-include>\n          </button>\n          <button type="button" tabindex="-1" title="{{::$root.resources.strings.wiki_canvas_more_options_button_title | translate}}" class="ts-sym icons-more app-icons-fill-hover hide-in-read-mode" data-tid="canvas-section-context-menu-button-{{::wikiSection.id}}" ng-click="wikiSectionCtrl.openContextMenu($event)" track-outcome="{{::$root.trackConstants.trackOutcome.inspect}}" track-scenario="{{::$root.trackConstants.trackScenario.openSectionMenu}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.section}}" track-name="{{::$root.trackConstants.trackModuleName.wikiSectionActionButton}}" track-type="{{::$root.trackConstants.trackType.menuItem}}" track-summary="Open section menu on page">\n            <ng-include class="ts-wiki-icon" src="\'svg/icons-more.html\'"></ng-include>\n          </button>\n          <button type="button" tabindex="-1" data-tid="toggle-section-conversation-button-{{::wikiSection.id}}" title="{{(wikiSectionCtrl.section.conversationPane ? $root.resources.strings.wiki_section_hide_conversation_button_title : $root.resources.strings.wiki_section_show_conversation_button_title) | translate}}" class="ts-sym app-icons-fill-hover action-tab-btn icons-chat ts-wiki-section-toggle-conversation-button" ng-class="{\'has-messages\': wikiSection.conversationId, \'chat-active\': wikiSection.conversationPane}" ng-if="!wikiSectionCtrl.wikiContext.tabSettings.isMyWiki && !wikiSectionCtrl.canvas.isMeetingNotes && wikiSectionCtrl.canPostToChannel" ng-click="wikiSectionCtrl.toggleChatPane($event)" track-outcome="{{::$root.trackConstants.trackOutcome.nav}}" track-scenario="{{::$root.trackConstants.trackScenario.toggleConversation}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.conversation}}" track-name="{{::$root.trackConstants.trackModuleName.wikiConversationButton}}" track-type="{{::$root.trackConstants.trackType.nav}}" track-summary="Toggle conversation for section button">\n            <ng-include class="ts-wiki-icon" src="\'svg/icons-chat.html\'"></ng-include>\n          </button>\n        </div>\n      </div>\n      <div class="ts-wiki-viewer-action-marker">\n        <action-marker message-vm="wikiViewerCtrl.semanticInfo[wikiViewerCtrl.constants.semanticObjectSchemas.mention]"></action-marker>\n      </div>\n    </div>\n  </div>\n  <hr class="ts-section-title-content-seprator">\n  <div class="ts-wiki-viewer-content-and-marker">\n    <div class="ts-wiki-viewer-content html" ng-class="::{\'default-cursor\' : wikiViewerCtrl.shouldShowDefaultCursor}" tabindex="-1" acc-role="canvas-inside-section" data-clickable-element simple-focus="wikiViewerCtrl.setAriaLabelledbyForSectionContent($event)" compile="wikiViewerCtrl.contentToRender" id="wiki-viewer-content-{{::wikiViewerCtrl.id}}" aria-labelledby="wiki-viewer-content-{{::wikiViewerCtrl.id}}" data-tid="wiki-viewer-content-{{::wikiViewerCtrl.id}}">\n    </div>\n  </div>\n  <div class="acc-hidden-element">\n    <span id="wiki-section-content-support-text" aria-label="{{::$root.resources.strings.aria_wiki_section_content_additional_info | translate}}"></span>\n    <span id="wiki-section-title-support-text" aria-label="{{::$root.resources.strings.aria_wiki_section_title_additional_info | translate}}"></span>\n  </div>\n</div>'},2575:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(279),s=function(){function e(e,t,i,n,s,o,a,c,r,l,d,u){this.constants=e,this.sxConfig=t,this.conversationsService=i,this.messageTranslationService=n,this.$translate=s,this.resources=o,this.utilityService=a,this.messageProcessingService=c,this.settingsService=r,this.peopleService=l,this.$timeout=d,this.accessibilityService=u}return Object.defineProperty(e.prototype,"contentType",{get:function(){return this.constants.semanticObjectSchemas.mention},enumerable:!0,configurable:!0}),e.prototype.process=function(e,t){return t||(t=this.createFakeMessageVm()),this.passMentionsToFakeMessageVm(e,t),t},e.prototype.createFakeMessageVm=function(){return new n.MessageViewModel({mentions:[],dateTimeSent:"",dateTimeReceived:"",isLiked:!1,userHasStarred:!1,isFromAgent:!1,isHidden:!1,isActionableExtensionReply:!1,objectId:"",skypeMessage:{}},this.messageTranslationService,this.$translate,this.resources,this.utilityService,this.messageProcessingService,this.settingsService,this.peopleService,this.$timeout,this.accessibilityService)},e.prototype.passMentionsToFakeMessageVm=function(e,t){var i=this;if(t.mentions=e,e.length&&t.message&&t.message.skypeMessage){var n=this.containsTeamMention(e);t.message.skypeMessage.containsTeamMention=!!n,t.message.skypeMessage.teamMentionDisplayName=n,t.message.skypeMessage.containsSelfMention=this.containsSelfMention(e);var s={};_.each(e,function(e){if(e.userType===i.constants.atMentions.type.channel&&!s[e.userObjectId]){s[e.userObjectId]=!0;var n=i.conversationsService.getConversation(e.userObjectId);t.updateFavoriteChannelMentions(n)}})}},e.prototype.containsTeamMention=function(e){var t,i=this;return _.some(e,function(e){if(e.userType===i.constants.atMentions.type.team)return t=e.userDisplayName,!0}),t},e.prototype.containsSelfMention=function(e){var t=this,i=this.sxConfig.getCurrentSkypeMri();return-1!==_.findIndex(e,function(e){return e.userType===t.constants.atMentions.type.person&&i==e.userObjectId})},e}();t.AtMentionProcessor=s,angular.module("teamspace.wikiViewer").factory("wikiViewerAtMentionProcessor",["constants","sxConfig","conversationsService","messageTranslationService","$translate","resources","utilityService","messageProcessingService","settingsService","peopleService","$timeout","accessibilityService",function(e,t,i,n,o,a,c,r,l,d,u,p){return new s(e,t,i,n,o,a,c,r,l,d,u,p)}])},2576:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e){this.semanticProcessors={},this.semanticProcessors[e.contentType]=e}return e.prototype.process=function(e,t){for(var i in e)this.semanticProcessors[i]&&(t[i]=this.semanticProcessors[i].process(e[i],t[i]))},e}();t.SemanticProcessors=n,angular.module("teamspace.wikiViewer").factory("wikiViewerSemanticProcessors",["wikiViewerAtMentionProcessor",function(e){return new n(e)}])},2577:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=teamspace.services,s=i(2578),o=i(2579),a=i(10),c=function(){function e(e,t,i,n,s,o,a,c,r,l,d,u,p,k,g){this.$scope=e,this.$element=t,this.$translate=i,this.$timeout=n,this.eventingService=s,this.wikiService=o,this.wikiUtils=a,this.utilityService=r,this.accessibilityService=l,this.tooltipService=d,this.tooltipCssApplicators=u,this.resources=p,this.constants=k,this.localizationService=g,this.moreMenuOptions={index:null,isFirst:!1,isLast:!1,page:null,section:null},this.sectionIsLocked=!1,this.lockedSectionOptionsDisabled=!1,this.preventDuplicateCreateNewPage=!1,this.logger=c.newLogger("wiki-page-list"),this.wikiContext&&this.canvas?(this.toolTipId=r.generateUUID(),this.sectionTitlePlaceholder=this.wikiContext.getDefaultSectionPlaceholderTitle(i,p),this.pageTitlePlaceholder=i.instant(p.strings.wiki_page_title_placeholder),this.ariaPageListPageAdditionalInfo=i.instant(p.strings.aria_wiki_page_list_page_additional_info),s.$once(e,k.events.wiki.scrollToPage,this.scrollToPage.bind(this))):this.logger.error("[loadWikiPageList]: failed; all directive params must be passed")}return e.$inject=["$scope","$element","$translate","$timeout","eventingService","wikiService","wikiUtils","loggingService","utilityService","accessibilityService","tooltipService","tooltipCssApplicators","resources","constants","localizationService"],e.prototype.scrollToPage=function(){if(this.canvas.selectedPage&&this.canvas.selectedPage.id){var e=this.$element.find(this.constants.wiki.componentSelectors.pageListPage.replace("{{pageId}}",this.canvas.selectedPage.id.toString())).get(0);e&&this.utilityService.scrollElementIntoView(e,this.constants.utilities.scroll.top,!0)}},e.prototype.pageSortingStart=function(){this.$element.find("#sections").hide()},e.prototype.pageSortingStop=function(){this.$element.find("#sections").show()},e.prototype.onPageSort=function(e,t,i){this.wikiService.movePage(this.wikiContext,e,i,!0)},e.prototype.onSectionSort=function(e,t,i){this.wikiService.moveSection(this.wikiContext,e,i,!0)},e.prototype.constructAriaLabelForPageListPage=function(e,t){var i=t.title||this.pageTitlePlaceholder;e.target.setAttribute("aria-label",this.$translate.instant(this.resources.strings.aria_wiki_page_list_page,{pageTitle:i})+" "+this.ariaPageListPageAdditionalInfo)},e.prototype.selectPageAndSection=function(e,t){var i=this;if((!this.canvas.selectedPage||this.canvas.selectedPage.id!==e.id||t)&&(!t||!this.canvas.selectedSection||this.canvas.selectedSection.id!==t.id)){var n=this.canvas.selectedPage.id!==e.id;this.canvas.selectedPage=e,this.canvas.selectedSection=t||null,this.raiseUpdateSelectedPageAndSectionEvent(n),!t&&this.accessibilityService.isInKeyboardNavigationMode()&&this.$timeout(function(){return i.wikiUtils.moveFocusToPageListPageWithId(e.id)})}},e.prototype.createNewPage=function(){var e=this;this.preventDuplicateCreateNewPage||(this.preventDuplicateCreateNewPage=!0,this.eventingService.$emit(this.constants.events.wiki.createNewPage),this.$timeout(function(){e.preventDuplicateCreateNewPage=!1},1e3))},e.prototype.showMoreOptionsMenu=function(e,t){var i=this;e.preventDefault(),this.moreMenuOptions=t;var s={template:o,trigger:"manual",container:"body",scope:this.$scope,autoClose:!0,placement:"auto bottom-right"},a={sourceElement:$(e.target),tooltipType:n.TooltipType.Popover,options:s,tooltipId:this.toolTipId,cssApplicator:function(){i.tooltipCssApplicators.contextMenu(e)}};this.tooltipService.toggleTooltip(a),this.moreMenuOptions.section?(this.sectionIsLocked=this.lockedSectionOptionsDisabled=this.moreMenuOptions.section.locked,this.trackGetLinkScenario=teamspace.components.PanelActionScenario.selectSectionGetLink,this.trackItemName=teamspace.components.PanelModuleName.wikiSectionActionButton,this.trackGetLinkSummary="Select get section link in nav",this.trackDeleteItemScenario=teamspace.components.PanelActionScenario.selectSectionDelete,this.trackDeleteItemSummary="Select section delete"):this.moreMenuOptions.page&&(this.sectionIsLocked=!!_.find(this.moreMenuOptions.page.sections,"locked"),this.lockedSectionOptionsDisabled=!1,this.trackGetLinkScenario=teamspace.components.PanelActionScenario.selectPageGetLink,this.trackItemName=teamspace.components.PanelModuleName.wikiPageActionButton,this.trackGetLinkSummary="Select get page link in nav",this.trackDeleteItemScenario=teamspace.components.PanelActionScenario.selectPageDelete,this.trackDeleteItemSummary="Select page delete")},e.prototype.deleteSelectedItem=function(){this.hideMoreOptionsMenu(),this.moreMenuOptions.page?this.eventingService.$emit(this.moreMenuOptions.section?this.constants.events.wiki.deleteSelectedSection:this.constants.events.wiki.deleteSelectedPage,{selectedPage:this.moreMenuOptions.page,selectedSection:this.moreMenuOptions.section}):this.logger.error("[deleteSelectedItem]: failed; moreMenuOptions.page cannot be null")},e.prototype.moveUpSelectedItem=function(){this.accessibilityService.isInKeyboardNavigationMode()||this.hideMoreOptionsMenu(),_.isNumber(this.moreMenuOptions.index)&&!this.moreMenuOptions.isFirst&&this.moveSelectedItemToIndex(this.moreMenuOptions.index-1,0)},e.prototype.moveDownSelectedItem=function(){this.accessibilityService.isInKeyboardNavigationMode()||this.hideMoreOptionsMenu(),_.isNumber(this.moreMenuOptions.index)&&!this.moreMenuOptions.isLast&&this.moveSelectedItemToIndex(this.moreMenuOptions.index+1,1)},e.prototype.copyLink=function(e){var t=this;this.hideMoreOptionsMenu(),this.moreMenuOptions.section?this.wikiService.copyLinkToSection(this.wikiContext,this.moreMenuOptions.section).then(function(){var i=t.$element.find("#wiki-page-list-section-"+t.moreMenuOptions.section.id),n=i.find(".icons-more");t.tooltipService.showLinkCopiedTooltip(e,t.$scope,i,n),t.logger.debug("The copy link dialog has been opened.")}).catch(function(e){a.WikiError.log(t.logger,"copyLinkToSection",e),a.WikiError.is(e)&&t.wikiUtils.showErrorDialog(e)}):this.moreMenuOptions.page&&this.wikiService.copyLinkToPage(this.wikiContext,this.moreMenuOptions.page).then(function(){var i=t.$element.find("#wiki-page-list-page-"+t.moreMenuOptions.page.id),n=i.find(".icons-more");t.tooltipService.showLinkCopiedTooltip(e,t.$scope,i,n),t.logger.debug("The copy link dialog has been opened.")}).catch(function(e){a.WikiError.log(t.logger,"copyLinkToPage",e),a.WikiError.is(e)&&t.wikiUtils.showErrorDialog(e)})},e.prototype.getCreationDate=function(e){if(!e.metadata||!e.metadata.creationTime)return"";var t=new Date(e.metadata.creationTime),i=this.localizationService.getLocale();return i&&i.contains("-")||(i="en-US"),(new Date).getUTCFullYear()===t.getUTCFullYear()?t.toLocaleDateString(i,{day:"numeric",month:"numeric"}):t.toLocaleDateString(i,{day:"numeric",month:"numeric",year:"numeric"})},e.prototype.moveSelectedItemToIndex=function(e,t){var i=this;this.moreMenuOptions.page?this.moreMenuOptions.section?this.wikiService.moveSection(this.wikiContext,this.moreMenuOptions.section,e,!1,t).then(function(){i.moreMenuOptions.index=e}):this.wikiService.movePage(this.wikiContext,this.moreMenuOptions.page,e,!1,t).then(function(){i.moreMenuOptions.index=e}):this.logger.error("[moveSelectedItemToIndex]: failed to move item to index ${toIndex}; moreMenuOptions.page is null")},e.prototype.raiseUpdateSelectedPageAndSectionEvent=function(e){void 0===e&&(e=!1),e&&this.wikiService.notifySelectedPageChanged(this.wikiContext),this.eventingService.$emit(this.constants.events.wiki.updateSelectedPageAndSection,{selectedPage:this.canvas.selectedPage,selectedSection:this.canvas.selectedSection})},e.prototype.hideMoreOptionsMenu=function(){this.tooltipService.clearAllTooltips()},e}();t.WikiPageListController=c,angular.module("teamspace.wikiPageList",["teamspace.eventingService","angular-sortable-view","teamspace.wikiService","teamspace.wikiUtils","teamspace.locales","teamspace.loggingService","teamspace.utilityService","teamspace.tooltipService","teamspace.accessibilityService","teamspace.tooltipCssApplicators","pascalprecht.translate","teamspace.constants","teamspace.localizationService"]).directive("wikiPageList",function(){return{restrict:"E",controllerAs:"wikiPageListCtrl",controller:c,scope:{},bindToController:{wikiContext:"<",canvas:"<"},template:s}})},2578:function(e,t){e.exports='<div class="ts-wiki-page-list">\n  <div class="ts-wiki-page-list-content-wrapper">\n    <div class="wiki-page-list-scrollbar" simple-scrollbar customscrolleventonroot="{{::wikiPageListCtrl.constants.events.wiki.scrollToPage}}">\n      <div class="wiki-page-list-content">\n        <div class="wiki-page-list-scrollbar-child">\n          \x3c!-- the list of pages --\x3e\n          <ul class="page-list wiki-page-list-pg-section" acc-role="tree" sv-root sv-on-sort="wikiPageListCtrl.onPageSort($item, $indexFrom, $indexTo)" sv-on-start="wikiPageListCtrl.pageSortingStart()" sv-on-stop="wikiPageListCtrl.pageSortingStop()" sv-part="wikiPageListCtrl.canvas.pages" sv-grid="false" id="pages">\n\n              <li sv-placeholder class="page-sort-placeholder"></li>\n\n            <li ng-repeat="page in wikiPageListCtrl.canvas.pages track by page.id" sv-element="{containment: \'.wiki-page-list-scrollbar\', revert: 0, delay: 100}">\n              <div class="page-actions wiki-page-list-actions" id="wiki-page-list-page-{{::page.id}}" ng-class="{\'highlight-selected\': wikiPageListCtrl.canvas.selectedPage.id === page.id}" tabindex="{{$index === 0 ? 0 : -1}}" acc-role="tree-node" aria-level="1" sv-handle data-canvas-tree-node="true" aria-selected="{{wikiPageListCtrl.canvas.selectedPage.id === page.id}}" aria-expanded="{{wikiPageListCtrl.canvas.selectedPage.id === page.id}}" simple-focus="wikiPageListCtrl.constructAriaLabelForSidebarPage($event, page)">\n                <button class="ts-sym select-page wiki-page-list-select" tabindex="-1" data-tid="page-list-page-menu-item-{{::page.id}}" title="{{page.title || wikiPageListCtrl.pageTitlePlaceholder}}" ng-click="wikiPageListCtrl.selectPageAndSection(page)" ng-bind="page.title || wikiPageListCtrl.pageTitlePlaceholder" track-outcome="{{::$root.trackConstants.trackOutcome.nav}}" track-scenario="{{::$root.trackConstants.trackScenario.selectPage}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.nav}}" track-name="{{::$root.trackConstants.trackModuleName.wikiPageNavButton}}" track-type="{{::$root.trackConstants.trackType.nav}}" track-summary="Select page in nav"></button>\n                <div ng-if="::wikiSidebarCtrl.wikiContext.isMeetingNotes()" class="ts-sym wiki-meeting-notes-date" tabindex="-1" data-tid="sidebar-page-menu-item-{{::page.id}}" role="button" ng-click="wikiSidebarCtrl.selectPageAndSection(page)" ng-bind="wikiSidebarCtrl.getCreationDate(page)">\n                </div>\n                <button type="button" tabindex="-1" title="{{::$root.resources.strings.wiki_canvas_more_options_button_title | translate}}" data-tid="page-list-page-more-option-button-{{::page.id}}" class="ts-sym icons-more app-icons-fill-hover" ng-click="wikiPageListCtrl.showMoreOptionsMenu($event, { index: $index, isFirst: $first, isLast: $last, page: page })" space-action track-outcome="{{::$root.trackConstants.trackOutcome.inspect}}" track-scenario="{{::$root.trackConstants.trackScenario.openPageMenu}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.nav}}" track-name="{{::$root.trackConstants.trackModuleName.wikiMenuButton}}" track-type="{{::$root.trackConstants.trackType.menuItem}}" track-summary="Open page menu in nav">\n                  <ng-include src="\'svg/icons-more.html\'"></ng-include>\n                </button>\n              </div>\n\n              \x3c!-- the list of sections for each page --\x3e\n              <ul ng-if="wikiPageListCtrl.canvas.selectedPage.id === page.id" class="section-list wiki-page-list-pg-section" id="sections" sv-root sv-on-sort="wikiPageListCtrl.onSectionSort($item, $indexFrom, $indexTo)" sv-part="page.sections">\n                <li ng-repeat="section in page.sections track by section.id" sv-element="{ containment: \'#sections\', revert: 0, delay: 100}">\n                  <div class="section-actions wiki-page-list-actions" id="wiki-page-list-section-{{::section.id}}" acc-role="tree-node" aria-level="2" aria-label="{{section.title || wikiPageListCtrl.sectionTitlePlaceholder}} {{::$root.resources.strings.aria_wiki_section|translate}} {{::$root.resources.strings.aria_wiki_page_list_section_additional_info|translate}}">\n                    <button class="ts-sym select-section wiki-page-list-select" tabindex="-1" data-tid="page-list-section-menu-item-{{section.id}}" title="{{section.title || wikiPageListCtrl.sectionTitlePlaceholder}}" ng-click="wikiPageListCtrl.selectPageAndSection(page, section)" ng-bind-html="$root.resources.strings.wiki_section_title_with_number|translate:{index:$index+1, sectionTitle: section.title || wikiPageListCtrl.sectionTitlePlaceholder}" track-outcome="{{::$root.trackConstants.trackOutcome.nav}}" track-scenario="{{::$root.trackConstants.trackScenario.selectSection}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.nav}}" track-name="{{::$root.trackConstants.trackModuleName.wikiSectionNavButton}}" track-type="{{::$root.trackConstants.trackType.nav}}" track-summary="Select section in nav"></button>\n                    <button type="button" tabindex="-1" data-tid="page-list-section-more-option-button-{{section.id}}" title="{{::$root.resources.strings.wiki_canvas_more_options_button_title | translate}}" class="ts-sym icons-more app-icons-fill-hover" ng-click="wikiPageListCtrl.showMoreOptionsMenu($event, { index: $index, isFirst: $first, isLast: $last, page: page, section: section })" space-action track-outcome="{{::$root.trackConstants.trackOutcome.inspect}}" track-scenario="{{::$root.trackConstants.trackScenario.openSectionMenu}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.nav}}" track-name="{{::$root.trackConstants.trackModuleName.wikiMenuButton}}" track-type="{{::$root.trackConstants.trackType.menuItem}}" track-summary="Open section menu in nav">\n                      <ng-include src="\'svg/icons-more.html\'"></ng-include>\n                    </button>\n                  </div>\n                </li>\n              </ul>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n  \x3c!-- footer --\x3e\n  <div class="page-list-footer">\n    \x3c!-- new page button --\x3e\n    <button type="button" title="{{::$root.resources.strings.wiki_page_list_new_page_button | translate}}" data-tid="wiki-page-list-add-page" class="ts-sym ts-svg-text-below icons-canvas-addpage page-list-new-page focus-round-border" ng-click="wikiPageListCtrl.createNewPage()" ng-if="::!wikiSidebarCtrl.wikiContext.isMeetingNotes()" track-outcome="{{::$root.trackConstants.trackOutcome.select}}" track-scenario="{{::$root.trackConstants.trackScenario.createNewPage}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.nav}}" track-name="{{::$root.trackConstants.trackModuleName.wikiCreatePageButton}}" track-type="{{::$root.trackConstants.trackType.button}}" track-summary="Create a new page">\n      <ng-include src="\'svg/icons-canvas-addpage.html\'"></ng-include>\n      <label aria-hidden="true" translate-once="{{::$root.resources.strings.wiki_page_list_new_page_button}}"></label>\n    </button>\n  </div>\n</div>\n'},2579:function(e,t){e.exports='<div class="popover wiki-section-more-actions app-default-menu">\n  <ul acc-role="dialog menu">\n    <li ng-if="!wikiPageListCtrl.wikiContext.tabSettings.isMyWiki" acc-role="menu-item focus-default">\n      <button class="ts-sym has-icon" data-tid="canvas-copy-link" ng-click="wikiPageListCtrl.copyLink($event)" track-outcome="{{::$root.trackConstants.trackOutcome.select}}" track-scenario="{{wikiPageListCtrl.trackGetLinkScenario}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.nav}}" track-name="{{wikiPageListCtrl.trackItemName}}" track-type="{{::$root.trackConstants.trackType.button}}" track-summary="{{wikiPageListCtrl.trackGetLinkSummary}}">\n        <div>\x3c!-- This div is required by Firefox for flexbox --\x3e\n          <ng-include class="icon" src="\'svg/icons-link.html\'"></ng-include>\n          <span translate-once="{{::$root.resources.strings.wiki_canvas_section_copy_link}}"></span>\n        </div>\n      </button>\n    </li>\n    <li acc-role="menu-item">\n      <button class="ts-sym has-icon" ng-disabled="wikiPageListCtrl.lockedSectionOptionsDisabled" ng-click="wikiPageListCtrl.moveUpSelectedItem()" data-tid="canvas-move-up-button">\n        <div>\x3c!-- This div is required by Firefox for flexbox --\x3e\n          <ng-include class="icon" src="\'svg/icons-arrow-up.html\'"></ng-include>\n          <span translate-once="{{::$root.resources.strings.wiki_canvas_section_move_up}}"></span>\n        </div>\n      </button>\n    </li>\n    <li acc-role="menu-item">\n      <button class="ts-sym has-icon" ng-disabled="wikiPageListCtrl.lockedSectionOptionsDisabled" ng-click="wikiPageListCtrl.moveDownSelectedItem()">\n        <div>\x3c!-- This div is required by Firefox for flexbox --\x3e\n          <ng-include class="icon" src="\'svg/icons-arrow-down.html\'"></ng-include>\n          <span translate-once="{{::$root.resources.strings.wiki_canvas_section_move_down}}"></span>\n        </div>\n      </button>\n    </li>\n    <li acc-role="menu-item">\n      <button class="ts-sym has-icon" ng-click="wikiPageListCtrl.deleteSelectedItem()" ng-disabled="wikiPageListCtrl.sectionIsLocked" data-tid="canvas-delete-link-button" track-outcome="{{::$root.trackConstants.trackOutcome.select}}" track-scenario="{{wikiPageListCtrl.trackDeleteItemScenario}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.nav}}" track-name="{{wikiPageListCtrl.trackItemName}}" track-type="{{::$root.trackConstants.trackType.button}}" track-summary="{{wikiPageListCtrl.trackDeleteItemSummary}}">\n        <div>\x3c!-- This div is required by Firefox for flexbox --\x3e\n          <ng-include class="icon" src="\'svg/icons-delete.html\'"></ng-include>\n          <span translate-once="{{::$root.resources.strings.wiki_page_list_delete_button}}"></span>\n        </div>\n      </button>\n    </li>\n  </ul>\n</div>\n'},2580:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(2581),s=function(){function e(e,t,i,n,s,o,a){this.$element=e,this.$translate=t,this.$timeout=i,this.wikiUtils=n,this.accessibilityService=s,this.resources=o,this.constants=a,this.ariaWikiListAdditionalInfo=t.instant(o.strings.aria_wiki_wiki_list_item_additional_info),this.wikisListUpdatedCallback&&(this.wikisListUpdatedCallback.callback=this.onWikiListUpdated.bind(this))}return e.$inject=["$element","$translate","$timeout","wikiUtils","accessibilityService","resources","constants"],e.prototype.onWikiSelected=function(e){var t=this;this.selectedWikisItem=e,this.onSelected({wikisItem:e}),!e&&this.accessibilityService.isInKeyboardNavigationMode()&&this.$timeout(function(){return t.wikiUtils.moveFocusToWikiListItemWithId(e.id)})},e.prototype.onWikiListUpdated=function(){var e=this.$element.find(this.constants.simpleScrollbar.componentSelectors.simpleScrollbar);e&&e.length>0&&e.scrollTop(0)},e.prototype.applyAriaLabelForWikiListItem=function(e,t){var i=t.name;e.target.setAttribute("aria-label",this.$translate.instant(this.resources.strings.aria_wiki_wiki_list_item,{wikiTitle:i})+" "+this.ariaWikiListAdditionalInfo)},e}();t.WikisListController=s,angular.module("teamspace.wikisList",["pascalprecht.translate","teamspace.wikiUtils","teamspace.accessibilityService"]).directive("wikisList",function(){return{restrict:"E",controllerAs:"wikisListCtrl",controller:s,scope:{},bindToController:{wikis:"<",selectedWikisItem:"<",onSelected:"&",wikisListUpdatedCallback:"<"},template:n}})},2581:function(e,t){e.exports='<div class="ts-wikis-list">\n  <div class="ts-wikis-list-scrollbar" simple-scrollbar>\n    <div class="ts-wikis-list-content">\n      <div class="ts-wikis-list-content-child">\n        \x3c!--  the list of wikis\n              vs-excess="10": render extra 10 elements outside of the viewport for better scrolling perf\n              vs-scroll-parent=".ts-wikis-list-scrollbar": references the scroll element (with simple-scrollbar directive) --\x3e\n        <ul class="ts-wikis-list" acc-role="list" data-tid="wiki-list" vs-repeat="56" vs-excess="10" vs-repeat-track-by="$index" vs-scroll-parent=".ts-wikis-list-scrollbar">\n          <li ng-repeat="wiki in wikisListCtrl.wikis track by $index" id="wiki-list-item-{{wiki.id}}" class="ts-wikis-list-actions" ng-class="{\'highlight-selected\': wikisListCtrl.selectedWikisItem.id === wiki.id}" tabindex="{{$index === 0 ? 0 : -1}}" acc-role="list-item" aria-selected="{{wikisListCtrl.selectedWikisItem.id === wiki.id}}" simple-focus="wikisListCtrl.applyAriaLabelForWikiListItem($event, wiki)">\n            <button class="ts-sym ts-wikis-list-select" tabindex="-1" data-tid="wiki-list-wiki-menu-item-{{wiki.id}}" title="{{wiki.teamName}} > {{wiki.channelName}} > {{wiki.name}}" ng-click="wikisListCtrl.onWikiSelected(wiki)">\n              <div class="ts-wikis-list-icon">\n                <profile-picture css-class="team-icon" display-name="wiki.teamName" team-id="wiki.teamGroupId" retain-in-cache="true" source="wikis-list"></profile-picture>\n              </div>\n              <div class="ts-wikis-list-title">\n                <span class="ts-wikis-list-team-title">\n                  \x3c!-- #239966 <span ng-bind="wiki.teamName"></span> &gt; --\x3e\n                  <span ng-bind="wiki.channelName"></span>\n                </span>\n                <span class="ts-wikis-list-wiki-title" ng-bind="wiki.name"></span>\n              </div>\n              <div class="ts-wikis-list-chevron">\n                <ng-include class="icon" src="\'svg/icons-chevron-right.html\'"></ng-include>\n              </div>\n            </button>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</div>\n'},2582:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(2583),s=function(){function e(e,t,i,n){var s=this;this.constants=e,i.$on(t,e.events.textEditor.selectionChanged,function(e,t){s.textEditorSelected=t?_.merge({},s.textEditorSelected,t):{}}),this.wikiInsertHyperlinkEnabled=n.valueAsBoolean(e.settings.names.wikiInsertHyperlinkEnabled),this.wikiInsertImagesEnabled=!this.wikiContext.tabSettings.isMyWiki&&!this.wikiContext.tabSettings.isPrivateMeetingWiki}return e.$inject=["constants","$scope","eventingService","settingsService"],e}();t.WikiHeaderController=s,angular.module("teamspace.wikiHeader",["teamspace.constants","teamspace.eventingService","teamspace.settingsService"]).directive("wikiHeader",function(){return{restrict:"E",controllerAs:"wikiHeaderCtrl",controller:s,bindToController:{canvas:"<",wikiContext:"<"},template:n}})},2583:function(e,t){e.exports='<div class="ts-wiki-header" ng-if="wikiHeaderCtrl.canvas.isInCalling || wikiHeaderCtrl.canvas.shouldShowEditorToolbar">\n  \x3c!-- format toolbar --\x3e\n  <div class="ts-wiki-page-format-toolbar" role="complementary">\n    <compose-format-toolbar format-command-source-id="{{::wikiHeaderCtrl.constants.wikiApp.formatCommandSourceId}}" disable-redbang="true" enable-images="wikiHeaderCtrl.wikiInsertImagesEnabled" text-editor-selected="wikiHeaderCtrl.textEditorSelected" disable-insert-hyperlink="!wikiHeaderCtrl.wikiInsertHyperlinkEnabled" make-first-button-tabbable="true" check-margin-for-overflow="true" toolbar-bounding-class="ts-wiki-header">\n    </compose-format-toolbar>\n  </div>\n</div>\n'},2584:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(2585),s=i(10),o=i(56),a=function(){function e(e,t,i,n,s,a,c,r,l,d,u,p,k,g,h,v,m){var w=this;this.$scope=e,this.$element=t,this.$translate=i,this.$timeout=n,this.$q=s,this.wikiService=a,this.wikiUtils=c,this.eventingService=r,this.resources=d,this.utilityService=u,this.constants=k,this.accessibilityService=g,this.timeService=h,this.wikiOperationsScheduler=v,this.wikiLocalStateService=m,this.preventDuplicateSectionAdd=!1,this.pageStatus=o.WikiLoadStatus.Loading,this.previousPageTitle="",this.preventDuplicatePageTitleSave=!1,this.logger=l.newLogger("wiki-page"),this.pageLoadingFailedMsg=i.instant(d.strings.wiki_page_loading_failure_message);var S=p.getRootRouteParams();this.channelGuid=S.threadId,this.loadPage(),this.setupEventListeners();var C=this.updateLastModified.bind(this);e.$watch("wikiPageCtrl.canvas.selectedPage.modified",function(e,t){e!=t&&C()}),e.$watchCollection("wikiPageCtrl.canvas.selectedPage.activeUsers",function(){w.canvas&&w.canvas.selectedPage?w.updateActiveUsers():w.resetActiveUsers()}),a.startPageActiveUsersUpdate(this.wikiContext),C()}return e.$inject=["$scope","$element","$translate","$timeout","$q","wikiService","wikiUtils","eventingService","loggingService","resources","utilityService","routeUtilityService","constants","accessibilityService","timeService","wikiOperationsScheduler","wikiLocalStateService"],e.prototype.loadPage=function(){return this.pageStatus=o.WikiLoadStatus.Loading,this.canvas?(!this.canvas.selectedPage&&this.canvas.pages&&this.canvas.pages.length&&(this.canvas.selectedPage=this.canvas.pages[0]),this.eventingService.$emit(this.constants.events.wiki.wikiPageLoaded),this.canvas.selectedPage?(this.pageStatus=o.WikiLoadStatus.Loaded,this.canvas.selectedPage.hasSections()?this.scrollToSelectedSection():this.newSection(0),void this.updateCanvasLocalState()):void(this.canvas.hasPages()?(this.logger.error("[loadPage]: failed; selected page has to be defined"),this.pageStatus=o.WikiLoadStatus.Error):this.createNewPage())):(this.logger.error("[loadPage]: failed: canvas has to be defined"),void(this.pageStatus=o.WikiLoadStatus.Error))},e.prototype.createNewPage=function(e){var t=this;return void 0===e&&(e=!0),this.pageStatus=o.WikiLoadStatus.Loading,this.wikiService.newPage(this.wikiContext,this.canvas,"").then(function(e){e.isNewPage=!0,t.canvas.selectedPage=e,t.pageStatus=o.WikiLoadStatus.Loaded,t.$timeout(function(){t.focusTitleAndUpdatePreviousTitle(),t.newSection(0)})}).catch(function(i){t.pageStatus=e?o.WikiLoadStatus.Error:o.WikiLoadStatus.Loaded})},e.prototype.scrollToSelectedSection=function(){var e=this;this.$timeout(function(){if(e.canvas.selectedSection){var t=e.$element.find(e.constants.wiki.componentSelectors.allSections).get(e.canvas.selectedPage.sections.indexOf(e.canvas.selectedSection));t&&e.utilityService.scrollElementIntoView(t,e.constants.utilities.scroll.top,!0)}})},e.prototype.setupEventListeners=function(){this.eventingService.$on(this.$scope,this.constants.events.wiki.updateSelectedPageAndSection,this.onUpdateSelectedPageAndSection.bind(this)),this.eventingService.$on(this.$scope,this.constants.events.wiki.deleteSelectedPage,this.onDeleteSelectedPage.bind(this)),this.eventingService.$on(this.$scope,this.constants.events.wiki.deleteSelectedSection,this.onDeleteSelectedSection.bind(this)),this.eventingService.$on(this.$scope,this.constants.events.wiki.createNewPage,this.onCreateNewPage.bind(this)),this.eventingService.$once(this.$scope,this.constants.events.wiki.scrollToSection,this.scrollToSelectedSection.bind(this))},e.prototype.onCreateNewPage=function(e){if(!this.canvas)return this.logger.error("[onCreateNewPage]: failed; canvas has to be defined"),void(this.pageStatus=o.WikiLoadStatus.Error);this.createNewPage(!1)},e.prototype.onUpdateSelectedPageAndSection=function(e,t){t?(t.selectedSection||this.eventingService.$emit(this.constants.events.canvas.conversationChange,{context:this.wikiContext,section:t.selectedSection,showTabChatPane:!1}),this.canvas.selectedPage=t.selectedPage,this.canvas.selectedSection=t.selectedSection,this.loadPage()):this.logger.error("[onUpdateSelectedPageAndSection]: payload must be defined")},e.prototype.onDeleteSelectedPage=function(e,t){var i=this;t&&t.selectedPage?this.canvas.pages.indexOf(t.selectedPage)<0||this.wikiUtils.showConfirmationDialog({titleString:this.resources.strings.wiki_delete_page_confirmation_title,bodyString:this.resources.strings.wiki_delete_page_confirmation_body,confirmButtonLabel:this.resources.strings.wiki_delete_page_confirmation_ok_button,confirmCallback:function(){var e=i.canvas.selectedPage.id===t.selectedPage.id;i.wikiService.deletePage(i.wikiContext,t.selectedPage).then(function(){i.canvas.hasPages()?i.canvas.selectedPage&&i.moveFocusToSidebarPageAfterTimeout(i.canvas.selectedPage.id):i.createNewPage()}).then(function(){e&&i.updateCanvasLocalState()}).catch(function(e){e&&e.errorCode===s.WikiErrorCode.page_delete&&i.wikiUtils.showErrorDialog(e),s.WikiError.log(i.logger,"onDeleteSelectedPage",e)})},cancelCallback:function(){return i.moveFocusToSidebarPageAfterTimeout(t.selectedPage.id)}}):this.logger.error("[onDeleteSelectedPage]: payload must be defined")},e.prototype.onDeleteSelectedSection=function(e,t){var i=this;if(t&&t.selectedPage&&t.selectedSection){this.wikiUtils.showConfirmationDialog({titleString:this.resources.strings.wiki_delete_section_confirmation_title,bodyString:this.resources.strings.wiki_delete_section_confirmation_body,confirmButtonLabel:this.resources.strings.wiki_delete_section_confirmation_ok_button,confirmCallback:function(){var e=!!i.canvas.selectedSection&&i.canvas.selectedSection.id===t.selectedSection.id;return i.wikiService.deleteSection(i.wikiContext,t.selectedSection).then(function(){i.canvas.selectedPage.hasSections()||i.newSection(0),i.moveFocusToSidebarPageAfterTimeout(i.canvas.selectedPage.id)}).then(function(){e&&i.updateCanvasLocalState()}).catch(function(e){e&&e.errorCode===s.WikiErrorCode.section_delete&&i.wikiUtils.showErrorDialog(e),s.WikiError.log(i.logger,"onDeleteSelectedSection",e)})},cancelCallback:function(){return i.moveFocusToSidebarPageAfterTimeout(t.selectedPage.id)}})}else this.logger.error("[onDeleteSelectedSection]: selectedPage and selectedSection must be defined")},e.prototype.moveFocusToSidebarPageAfterTimeout=function(e){var t=this;this.$timeout(function(){return t.wikiUtils.moveFocusToPageListPageWithId(e)})},e.prototype.focusTitleAndUpdatePreviousTitle=function(){this.wikiUtils.moveFocusTo(this.constants.wiki.componentSelectors.pageTitleClass,2),this.updatePreviousPageTitle()},e.prototype.updatePreviousPageTitle=function(){this.previousPageTitle=this.canvas.selectedPage.title||""},e.prototype.handleNewPageExperienceSectionFocus=function(){this.canvas.selectedPage.isNewPage&&this.wikiUtils.focusEditorTitle()},e.prototype.restorePageTitle=function(){this.canvas.selectedPage.title=this.previousPageTitle||this.$translate.instant(this.resources.strings.wiki_page_default_title)},e.prototype.updateLastModified=function(){if(this.canvas&&this.canvas.selectedPage&&this.canvas.selectedPage.modified){var e=this.timeService.getTimeAgoString(this.canvas.selectedPage.modified);this.lastModifiedString=this.$translate.instant(this.resources.strings.wiki_page_last_edited,{lastModified:e})}},e.prototype.updateActiveUsers=function(){var e=this.constants.wiki.pageActiveUsers.maxVisibleActiveUsersCount;this.visibleActiveUsers=this.canvas.selectedPage.activeUsers.slice(0,e),this.hiddenActiveUsers=this.canvas.selectedPage.activeUsers.slice(e),this.hiddenActiveUserNames=this.hiddenActiveUsers.map(function(e){return e.displayName}).join(", ")},e.prototype.resetActiveUsers=function(){this.visibleActiveUsers=null,this.hiddenActiveUsers=null,this.hiddenActiveUserNames=null},e.prototype.updateCanvasLocalState=function(){this.wikiLocalStateService.updateCanvasLocalState(this.canvas.selectedSection,this.canvas.selectedPage,this.wikiContext)},e.prototype.onPageTitleInputKeyPress=function(e){if(this.preventDuplicatePageTitleSave)e.preventDefault();else{var t=this.constants.keyCodes;switch(e.which){case t.enter:e.stopPropagation(),this.handleNewPageExperienceSectionFocus(),this.exitEditPageTitleMode(!0);break;case t.escape:this.exitEditPageTitleMode()}}},e.prototype.enterEditPageTitleMode=function(e){this.updatePreviousPageTitle(),this.accessibilityService.isInKeyboardNavigationMode()&&this.wikiUtils.setCursorToEndOfPageTitle()},e.prototype.exitEditPageTitleMode=function(e){var t=this;void 0===e&&(e=!1);var i=this.canvas.selectedPage.title===this.previousPageTitle,n=!e||i||this.preventDuplicatePageTitleSave;this.canvas.selectedPage.isNewPage=!1,n?this.restorePageTitle():(this.canvas.selectedPage.title||(this.canvas.selectedPage.title=this.$translate.instant(this.resources.strings.wiki_page_default_title)),this.wikiOperationsScheduler.addAndProcess({name:"save page title",queueId:this.canvas.selectedPage.itemId,action:function(){return t.preventDuplicatePageTitleSave=!0,t.wikiService.savePageTitle(t.wikiContext,t.canvas.selectedPage).then(function(){t.updatePreviousPageTitle()}).catch(function(e){t.restorePageTitle(),t.focusTitleAndUpdatePreviousTitle()}).finally(function(){t.preventDuplicatePageTitleSave=!1})}}))},e.prototype.addSectionButtonClicked=function(e,t){this.canvas.isEditingSectionReady()&&this.newSection(t)},e.prototype.newSection=function(e){var t=this;if(this.logger.debug("[newSection]: event handler - section to be added at index "+e),isNaN(e)||e<0)this.logger.error("[newSection]: failed; section index must be a number >= 0");else if(!this.preventDuplicateSectionAdd){this.preventDuplicateSectionAdd=!0;var i=this.$q.defer();this.wikiOperationsScheduler.addAndProcess({name:"new section",queueId:this.canvas.selectedPage.itemId,completed:i,action:function(){return t.wikiService.newSection(t.wikiContext,t.canvas,t.canvas.selectedPage,"",e,i).then(function(e){t.canvas.selectedSection=e}).finally(function(){t.preventDuplicateSectionAdd=!1})}})}},Object.defineProperty(e.prototype,"pageLoaded",{get:function(){return this.pageStatus===o.WikiLoadStatus.Loaded},enumerable:!0,configurable:!0}),e}();t.WikiPageController=a,angular.module("teamspace.wikiPage",["ngSanitize","pascalprecht.translate","teamspace.wikiService","teamspace.wikiUtils","teamspace.eventingService","teamspace.constants","teamspace.customScrollbar","teamspace.dialogService","teamspace.loggingService","teamspace.utilityService","teamspace.routeUtilityService","teamspace.wikiLocalStateService","teamspace.tooltipService","teamspace.accessibilityService","teamspace.wikiOperationsScheduler","teamspace.wikiLoadStatus"]).directive("wikiPage",function(){return{restrict:"E",scope:{},bindToController:{wikiContext:"<",canvas:"<"},controllerAs:"wikiPageCtrl",controller:a,template:n}})},2585:function(e,t){e.exports='<div class="ts-wiki-page">\n  <div ng-if="wikiPageCtrl.pageLoaded" class="ts-wiki-page-scrollbar" simple-scrollbar customscrolleventonroot="{{::wikiPageCtrl.constants.events.wiki.scrollToSection}}">\n    \x3c!-- page loaded --\x3e\n    <div class="ts-wiki-page-content-parent">\n      <div class="ts-wiki-page-content">\n\n        \x3c!-- page title --\x3e\n        <div class="ts-wiki-page-title ts-wiki-page-main-content-width">\n          <div class="title-section">\n            <input sanitized class="wiki-page-title-input" id="canvas-page-id-{{::wikiPageCtrl.canvas.selectedPage.id}}" data-tid="canvas-page-id-{{::wikiPageCtrl.canvas.selectedPage.id}}" title="{{wikiPageCtrl.canvas.selectedPage.title}}" simple-focus="wikiPageCtrl.enterEditPageTitleMode($event)" ng-model="wikiPageCtrl.canvas.selectedPage.title" ng-keydown="wikiPageCtrl.onPageTitleInputKeyPress($event)" ng-blur="wikiPageCtrl.exitEditPageTitleMode(true)" placeholder="{{::$root.resources.strings.wiki_page_title_placeholder|translate}}" acc-role="focus-default" aria-labelledby="wiki-page-saved" track-outcome="{{::$root.trackConstants.trackOutcome.select}}" track-scenario="{{::$root.trackConstants.trackScenario.editPageTitle}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.page}}" track-name="{{::$root.trackConstants.trackModuleName.wikiPageActionButton}}" track-type="{{::$root.trackConstants.trackType.button}}" track-summary="Edit page title"/>\n            <div id="wiki-page-saved" class="title-last-modified" ng-bind-html="wikiPageCtrl.lastModifiedString">\n            </div>\n          </div>\n\n          <div class="page-active-users" acc-role="list" data-acc-presence-indicator>\n            <profile-picture ng-repeat="activeUser in wikiPageCtrl.visibleActiveUsers track by activeUser.upn" acc-role="list-item clickable" data-acc-active-user aria-label="{{::activeUser.displayName}}" tabindex="-1" person-card pc-upn="activeUser.upn" pc-display-name="activeUser.displayName" css-class="active-user-icon" principal-name="activeUser.upn" display-name="activeUser.displayName" source="wiki-page">\n            </profile-picture>\n            <div class="hidden-active-users ts-show-cursor" ng-if="wikiPageCtrl.hiddenActiveUsers.length > 0" title="{{ wikiPageCtrl.hiddenActiveUserNames }}" acc-role="list-item" data-acc-active-user aria-label="{{ wikiPageCtrl.hiddenActiveUserNames }}">\n              +<span ng-bind="wikiPageCtrl.hiddenActiveUsers.length"></span>\n            </div>\n          </div>\n        </div>\n\n\n        \x3c!-- page sections --\x3e\n        <div class="page-sections" acc-role="canvas-section" role="application">\n          <div class="ts-wiki-page-main-content-width ts-wiki-page-empty-content-filler">\n          </div>\n          \x3c!-- meeting notes --\x3e\n          <div class="wiki-section-and-add" ng-repeat="wikiSection in wikiPageCtrl.canvas.selectedPage.sections">\n            <wiki-section class="ts-wiki-page-section ts-wiki-page-main-content-width ts-wiki-page-content-background" ng-class="{\'animate\': wikiSection === wikiPageCtrl.selectedSection}" data-tid="canvas-wiki-section-{{wikiSection.id}}" section-index="$index" is-first="$first" is-last="$last" on-new-section="wikiPageCtrl.newSection(toIndex)" wiki-context="wikiPageCtrl.wikiContext" canvas="wikiPageCtrl.canvas" section="wikiSection" page="wikiPageCtrl.canvas.selectedPage">\n            </wiki-section>\n            <div class="post-section" data-tid="canvas-post-section-{{wikiSection.id}}">\n              <div class="add-section">\n                <div class="add-section-button">\n                  \x3c!-- id, tabindex and data-tid are used for keyboard nav and automation; do not change! --\x3e\n                  <button id="section-add-{{wikiSection.id}}" tabindex="-1" type="button" aria-labelledby="wiki-section-add-span-{{wikiSection.id}}" data-tid="canvas-add-section-button-{{wikiSection.id}}" class="ts-sym ts-svg-text-below" ng-click="wikiPageCtrl.addSectionButtonClicked($event, $index + 1)" ng-disabled="wikiPageCtrl.preventDuplicateSectionAdd || !wikiPageCtrl.canvas.isEditingSectionReady()" track-outcome="{{::$root.trackConstants.trackOutcome.select}}" track-scenario="{{::$root.trackConstants.trackScenario.addSection}}" track-scenario-type="{{::$root.trackConstants.trackScenarioType.page}}" track-name="{{::$root.trackConstants.trackModuleName.wikiPageActionButton}}" track-type="{{::$root.trackConstants.trackType.button}}" track-data="::{ isMeetingNotes: wikiPageCtrl.canvas.isMeetingNotes }" track-summary="Add section to page">\n                    <ng-include src="\'svg/icons-add.html\'"></ng-include>\n                  </button>\n                </div>\n                <div class="add-section-span">\n                  <span id="wiki-section-add-span-{{wikiSection.id}}" translate-once="{{::$root.resources.strings.wiki_section_add_new_label}}"></span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <wiki-load-status ng-if="!wikiPageCtrl.pageLoaded" load-status="wikiPageCtrl.pageStatus" error-msg="::wikiPageCtrl.pageLoadingFailedMsg">\n  </wiki-load-status>\n</div>'}},[2563]);
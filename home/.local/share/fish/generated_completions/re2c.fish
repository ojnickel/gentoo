# re2c
# Autogenerated from man page /usr/share/man/man1/re2c.1.bz2
complete -c re2c -s '?' -s h -l help -d 'Show help message'
complete -c re2c -s 1 -l single-pass -d 'Deprecated.  Does nothing (single pass is the default now)'
complete -c re2c -s 8 -l utf-8 -d 'Generate a lexer that reads input in UTF-8 encoding'
complete -c re2c -s b -l bit-vectors -d 'Optimize conditional jumps using bit masks.  Implies -s'
complete -c re2c -s c -l conditions -l start-conditions -d 'Enable support of Flex-like "conditions": multiple interrelated lexers within…'
complete -c re2c -l case-insensitive -d 'Treat single-quoted and double-quoted strings as case-insensitive'
complete -c re2c -l case-inverted -d 'Invert the meaning of single-quoted and double-quoted strings: treat single-q…'
complete -c re2c -l case-ranges -d 'Collapse consecutive cases in a switch statements into a range of the form ca…'
complete -c re2c -l depfile -d 'Write dependency information to FILE in the form of a Makefile rule <output-f…'
complete -c re2c -s e -l ecb -d 'Generate a lexer that reads input in EBCDIC encoding'
complete -c re2c -l empty-class -d 'Define the way re2c treats empty character classes'
complete -c re2c -l encoding-policy -d 'Define the way re2c treats Unicode surrogates'
complete -c re2c -s f -l storable-state -d 'Generate a lexer which can store its inner state'
complete -c re2c -s F -l flex-syntax -d 'Partial support for Flex syntax: in this mode named definitions don\\(aqt need…'
complete -c re2c -s g -l computed-gotos -d 'Optimize conditional jumps using non-standard "computed goto" extension (whic…'
complete -c re2c -s I -d 'Add PATH to the list of locations which are used when searching for include f…'
complete -c re2c -s i -l no-debug-info -d 'Do not output #line information'
complete -c re2c -l input -d 'Specify the API used by the generated code to interface with used-defined code'
complete -c re2c -l input-encoding -d 'Specify the way re2c parses regular expressions'
complete -c re2c -l lang -d 'Specify the output language'
complete -c re2c -l location-format -d 'Specify location format in messages'
complete -c re2c -l no-generation-date -d 'Suppress date output in the generated file'
complete -c re2c -l no-version -d 'Suppress version output in the generated file'
complete -c re2c -s o -l output -d 'Specify the OUTPUT file'
complete -c re2c -s P -l posix-captures -d 'Enable submatch extraction with POSIX-style capturing groups'
complete -c re2c -s r -l reusable -d 'Allows reuse of re2c rules with /*!rules:re2c */ and /*!use:re2c */ blocks'
complete -c re2c -s S -l skeleton -d 'Ignore user-defined interface code and generate a self-contained "skeleton" p…'
complete -c re2c -s s -l nested-ifs -d 'Use nested if statements instead of switch statements in conditional jumps'
complete -c re2c -s T -l tags -d 'Enable submatch extraction with tags'
complete -c re2c -s t -l type-header -d 'Generate a HEADER file that contains enum with condition names'
complete -c re2c -s u -l unicode -d 'Generate a lexer that reads UTF32-encoded input'
complete -c re2c -s V -l vernum -d 'Show version information in MMmmpp format (major, minor, patch)'
complete -c re2c -l verbose -d 'Output a short message in case of success'
complete -c re2c -s v -l version -d 'Show version information'
complete -c re2c -s w -l wide-chars -d 'Generate a lexer that reads UCS2-encoded input'
complete -c re2c -s x -l utf-16 -d 'Generate a lexer that reads UTF16-encoded input'
complete -c re2c -s D -l emit-dot -d 'Instead of normal output generate lexer graph in . dot format'
complete -c re2c -s d -l debug-output -d 'Emit YYDEBUG in the generated code'
complete -c re2c -l dump-adfa -d 'Debug option: output DFA after tunneling (in . dot format)'
complete -c re2c -l dump-cfg -d 'Debug option: output control flow graph of tag variables (in . dot format)'
complete -c re2c -l dump-closure-stats -d 'Debug option: output statistics on the number of states in closure'
complete -c re2c -l dump-dfa-det -d 'Debug option: output DFA immediately after determinization (in . dot format)'
complete -c re2c -l dump-dfa-min -d 'Debug option: output DFA after minimization (in . dot format)'
complete -c re2c -l dump-dfa-tagopt -d 'Debug option: output DFA after tag optimizations (in . dot format)'
complete -c re2c -l dump-dfa-tree -d 'Debug option: output DFA under construction with states represented as tag hi…'
complete -c re2c -l dump-dfa-raw -d 'Debug option: output DFA under construction with expanded state-sets (in '
complete -c re2c -l dump-interf -d 'Debug option: output interference table produced by liveness analysis of tag …'
complete -c re2c -l dump-nfa -d 'Debug option: output NFA (in . dot format)'
complete -c re2c -l dfa-minimization -d 'Internal option: DFA minimization algorithm used by re2c'
complete -c re2c -l eager-skip -d 'Internal option: make the generated lexer advance the input position eagerly …'
complete -c re2c -l no-lookahead -d 'Internal option: use TDFA(0) instead of TDFA(1)'
complete -c re2c -l no-optimize-tags -d 'Internal optionL: suppress optimization of tag variables (useful for debuggin…'
complete -c re2c -l posix-closure -d 'Internal option: specify shortest-path algorithm used for the construction of…'
complete -c re2c -l posix-prectable -d 'Internal option: specify the algorithm used to compute POSIX precedence table'
complete -c re2c -l stadfa -d 'Internal option: use staDFA algorithm for submatch extraction'
complete -c re2c -l fixed-tags -d 'Internal option: specify whether the fixed-tag optimization should be applied…'
complete -c re2c -s W -d 'Turn on all warnings'
complete -c re2c -o Werror -d 'Turn warnings into errors'
complete -c re2c -o 'W<warning>' -d 'Turn on warning'
complete -c re2c -o 'Wno-<warning>' -d 'Turn off warning'
complete -c re2c -o 'Werror-<warning>' -d 'Turn on warning and treat it as an error (this implies -W<warning>)'
complete -c re2c -o 'Wno-error-<warning>' -d 'Don\\(aqt treat this particular warning as an error'
complete -c re2c -o Wcondition-order -d 'Warn if the generated program makes implicit assumptions about condition numb…'
complete -c re2c -o Wempty-character-class -d 'Warn if a regular expression contains an empty character class'
complete -c re2c -o Wmatch-empty-string -d 'Warn if a rule is nullable (matches an empty string)'
complete -c re2c -o Wswapped-range -d 'Warn if the lower bound of a range is greater than its upper bound'
complete -c re2c -o Wundefined-control-flow -d 'Warn if some input strings cause undefined control flow in the lexer (the fau…'
complete -c re2c -o Wunreachable-rules -d 'Warn about rules that are shadowed by other rules and will never match'
complete -c re2c -o Wuseless-escape -d 'Warn if a symbol is escaped when it shouldn\\(aqt be'
complete -c re2c -o Wnondeterministic-tags -d 'Warn if a tag has n-th degree of nondeterminism, where n is greater than 1'
complete -c re2c -o Wsentinel-in-midrule -d 'Warn if the sentinel symbol occurs in the middle of a rule --- this may cause…'

